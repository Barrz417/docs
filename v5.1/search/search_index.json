{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation home # Getting started Adding your first repository (5 min) Sign up with your Git provider so that Codacy can have access to your Git provider organizations and members. You can then add any repository you have access to with one click. Supported languages Codacy supports over 40 programming languages and frameworks out of the box, and regularly adds support for new languages and tools. Using Codacy Creating and managing an organization Codacy automatically imports your Git provider organizations and members. Changes reflect on Codacy in real time and you can manage people who joined your organization on Codacy. Setting up integrations Set up integrations to receive Codacy status checks on your current workflow. Most popular topics Adding coverage to your repository Set up your repositories to show code coverage reports directly on Codacy. Managing people in organizations Invite your team members to join Codacy to analyze their commits on private repositories. Using the Codacy API Programmatically retrieve and analyze data from Codacy and perform configuration changes","title":"Documentation home"},{"location":"#documentation-home","text":"Getting started Adding your first repository (5 min) Sign up with your Git provider so that Codacy can have access to your Git provider organizations and members. You can then add any repository you have access to with one click. Supported languages Codacy supports over 40 programming languages and frameworks out of the box, and regularly adds support for new languages and tools. Using Codacy Creating and managing an organization Codacy automatically imports your Git provider organizations and members. Changes reflect on Codacy in real time and you can manage people who joined your organization on Codacy. Setting up integrations Set up integrations to receive Codacy status checks on your current workflow.","title":"Documentation home"},{"location":"special-thanks/","text":"Special thanks # We would like to thank everyone who helped us greatly. The names on these lists contributed immensely to what Codacy is today. Open source tools # In addition to in-house built rules, we use open source tools for many of our static analysis. We want to express our gratitude to everyone who contributed to those tools. PMB Brakeman RuboCop SimpleCov CoffeeLint Pylint PHPMD PHP_CodeSniffer JSHint Mocha Scalastyle CSSLint radon Clone Digger PHPCPD plato sloc LessLinter Hadolint TSLint SCSSLint Credo PSScriptAnalyzer Ameba Language support contributions # These are the tools integrated on Codacy by our own users! Without them, we wouldn't have support for these languages. Language Who made it possible CoffeeScript Ryan Delaney Elixir Grant McLendon PowerShell Aditya Patwardhan Crystal Vitalii Elenhaupt Collaborators # For all the people who helped us so much, we want to give a big shout out and thanks! David Pate Adriaan Moors Iulian Dragos Jakob Pupke Mathieu Demarne Ryan Shipp Eugene Burmako","title":"Special thanks"},{"location":"special-thanks/#special-thanks","text":"We would like to thank everyone who helped us greatly. The names on these lists contributed immensely to what Codacy is today.","title":"Special thanks"},{"location":"special-thanks/#open-source-tools","text":"In addition to in-house built rules, we use open source tools for many of our static analysis. We want to express our gratitude to everyone who contributed to those tools. PMB Brakeman RuboCop SimpleCov CoffeeLint Pylint PHPMD PHP_CodeSniffer JSHint Mocha Scalastyle CSSLint radon Clone Digger PHPCPD plato sloc LessLinter Hadolint TSLint SCSSLint Credo PSScriptAnalyzer Ameba","title":"Open source tools"},{"location":"special-thanks/#language-support-contributions","text":"These are the tools integrated on Codacy by our own users! Without them, we wouldn't have support for these languages. Language Who made it possible CoffeeScript Ryan Delaney Elixir Grant McLendon PowerShell Aditya Patwardhan Crystal Vitalii Elenhaupt","title":"Language support contributions"},{"location":"special-thanks/#collaborators","text":"For all the people who helped us so much, we want to give a big shout out and thanks! David Pate Adriaan Moors Iulian Dragos Jakob Pupke Mathieu Demarne Ryan Shipp Eugene Burmako","title":"Collaborators"},{"location":"account/emails/","text":"Emails # To manage the email addresses associated with your account and your email notifications, click on your avatar on the top right-hand corner and open Your account , page Emails . Managing your email notifications # Codacy can send you an email whenever there are new analysis results on your repositories with the list of found issues and the changes that created them. Codacy sends all email notifications to your default email address, and you can change your default email address by clicking make default next to another email address. Configure the notifications that you wish to receive under Repository notifications : Per commit: Codacy will send you an email for each analyzed commit. Per pull request: Codacy will send you an email for each analyzed pull request. Only my activity: By default, Codacy will only send you emails about your own commits and pull requests. Turn off this setting to receive emails for commits and pull requests made by other people as well. Tip To turn off all email notifications, disable the settings Per commit and Per pull request . See also # How do I change my email address on Codacy?","title":"Emails"},{"location":"account/emails/#emails","text":"To manage the email addresses associated with your account and your email notifications, click on your avatar on the top right-hand corner and open Your account , page Emails .","title":"Emails"},{"location":"account/emails/#managing-your-email-notifications","text":"Codacy can send you an email whenever there are new analysis results on your repositories with the list of found issues and the changes that created them. Codacy sends all email notifications to your default email address, and you can change your default email address by clicking make default next to another email address. Configure the notifications that you wish to receive under Repository notifications : Per commit: Codacy will send you an email for each analyzed commit. Per pull request: Codacy will send you an email for each analyzed pull request. Only my activity: By default, Codacy will only send you emails about your own commits and pull requests. Turn off this setting to receive emails for commits and pull requests made by other people as well. Tip To turn off all email notifications, disable the settings Per commit and Per pull request .","title":"Managing your email notifications"},{"location":"account/emails/#see-also","text":"How do I change my email address on Codacy?","title":"See also"},{"location":"account/managing-your-profile/","text":"Managing your profile # To manage your profile information such as your name and avatar, click on your avatar on the top right-hand corner and select Your account . Changing your name or username # To change your name or username, update the fields Name or Username and click the button Update profile . Changing your avatar # To change your avatar, sign up or log in at Gravatar using the same email address that you used to log into Codacy. The avatar that you define there will be automatically used as your avatar on Codacy. Note Organization avatars aren't editable at the moment. Deleting your account # When you delete your account on Codacy, your profile and information about your personal repositories will be completely removed from Codacy. To delete your account, click the button Delete account and confirm that you really want to proceed. Note If you're the last organization owner of any of your organizations, you must either add someone else as an owner or delete those organizations before you can delete your account.","title":"Managing your profile"},{"location":"account/managing-your-profile/#managing-your-profile","text":"To manage your profile information such as your name and avatar, click on your avatar on the top right-hand corner and select Your account .","title":"Managing your profile"},{"location":"account/managing-your-profile/#changing-your-name-or-username","text":"To change your name or username, update the fields Name or Username and click the button Update profile .","title":"Changing your name or username"},{"location":"account/managing-your-profile/#changing-your-avatar","text":"To change your avatar, sign up or log in at Gravatar using the same email address that you used to log into Codacy. The avatar that you define there will be automatically used as your avatar on Codacy. Note Organization avatars aren't editable at the moment.","title":"Changing your avatar"},{"location":"account/managing-your-profile/#deleting-your-account","text":"When you delete your account on Codacy, your profile and information about your personal repositories will be completely removed from Codacy. To delete your account, click the button Delete account and confirm that you really want to proceed. Note If you're the last organization owner of any of your organizations, you must either add someone else as an owner or delete those organizations before you can delete your account.","title":"Deleting your account"},{"location":"chart/","text":"Installing Codacy Self-hosted # This documentation guides you on how to install Codacy Self-hosted on Kubernetes or MicroK8s. Important If you're running the legacy Codacy Self-hosted solution running on Docker please contact support@codacy.com so that we can assist you with the migration to Codacy Self-hosted running on Kubernetes or MicroK8s. To install Codacy you must complete these main steps: Setting up the system requirements Ensure that your infrastructure meets the hardware and system requirements to run Codacy. Installing Codacy Install Codacy on the cluster using our Helm chart that includes all the necessary components and dependencies. Configuring Codacy Configure integrations with Git providers and set up monitoring. The next sections include detailed instructions on how to complete each step of the installation process. Make sure that you complete each step before advancing to the next one. 1. Setting up the system requirements # Before you start, you must prepare and provision the database server and Kubernetes or MicroK8s cluster that will host Codacy. Carefully review and set up the system requirements to run Codacy by following the instructions on the page below: System requirements Optionally, you can follow one of the guides below to quickly create a new Kubernetes or MicroK8s cluster that satisfies the characteristics described in the system requirements: Creating an Amazon EKS cluster Creating a MicroK8s cluster 2. Installing Codacy # Install Codacy on an existing cluster using our Helm chart: Make sure that you have the following tools installed on your machine: kubectl within one minor version difference of your cluster Important If you're using MicroK8s you don't need to install kubectl because you will execute all kubectl commands as microk8s.kubectl commands instead. To simplify this, check how to create an alias for kubectl . Helm version >= 3.2 Create a cluster namespace called codacy that will group all resources related to Codacy. kubectl create namespace codacy Add the Docker registry credentials provided by Codacy together with your license to a cluster Secret. This is necessary because some Codacy Docker images are currently private. Substitute <docker_username> and <docker_password> with the Docker registry username and password and run the following command: kubectl create secret docker-registry docker-credentials \\ --docker-username = <docker_username> \\ --docker-password = <docker_password> \\ --namespace codacy Download the template file values-production.yaml and use a text editor of your choice to edit the value placeholders as described in the comments. Create an address record on your DNS provider mapping the hostname you used in the previous step to the IP address of your Ingress controller. Important If you're using MicroK8s you must map the hostname to the public IP address of the machine running MicroK8s. Add Codacy's chart repository to your Helm client and install the Codacy chart using the file values-production.yaml created previously. Important If you're using MicroK8s you must download and use the file values-microk8s.yaml together with the file values-production.yaml by uncommenting the last line in the helm upgrade command below. helm repo add codacy-stable https://charts.codacy.com/stable/ helm repo update helm upgrade --install codacy codacy-stable/codacy \\ --namespace codacy \\ --version 5 .1.0 \\ --values values-production.yaml # --values values-microk8s.yaml By now all the Codacy pods should be starting in the cluster. Run the following command and wait for all the pods to have the status Running , which can take several minutes: $ kubectl get pods -n codacy NAME READY STATUS RESTARTS AGE codacy-api-f7897b965-fgn67 1 /1 Running 0 8m57s codacy-api-f7897b965-kkqsx 1 /1 Running 0 8m57s codacy-crow-7c957d45f6-b8zp2 1 /1 Running 2 8m57s codacy-crowdb-0 1 /1 Running 0 8m57s codacy-engine-549bcb69d9-cgrqf 1 /1 Running 1 8m57s codacy-engine-549bcb69d9-sh5f4 1 /1 Running 1 8m57s codacy-fluentdoperator-x5vr2 2 /2 Running 0 8m57s codacy-listener-868b784dcf-npdfh 1 /1 Running 0 8m57s codacy-listenerdb-0 1 /1 Running 0 8m57s codacy-minio-7cfdc7b4f4-254gz 1 /1 Running 0 8m57s codacy-nfsserverprovisioner-0 1 /1 Running 0 8m57s codacy-portal-774d9fc596-rwqj5 1 /1 Running 2 8m56s codacy-rabbitmq-ha-0 1 /1 Running 0 8m57s codacy-ragnaros-69459775b5-hmj4d 1 /1 Running 3 8m57s codacy-remote-provider-service-8fb8556b-rr4ws 1 /1 Running 0 8m56s codacy-worker-manager-656dbf8d6d-n4j7c 1 /1 Running 0 8m57s 3. Configuring Codacy # After successfully installing Codacy on your cluster, you're now ready to perform the post-install configuration steps: Use a browser to navigate to the Codacy hostname previously configured on the file values-production.yaml . Log in using your Git provider account. This automatically creates a Codacy administrator account with your credentials. Follow Codacy's onboarding process, which will guide you through the following steps: Configuring one or more of the following supported integrations: GitHub Cloud GitHub Enterprise GitLab Cloud GitLab Enterprise Bitbucket Cloud Bitbucket Server Email Creating an initial organization Inviting users to Codacy As a last step we recommend that you set up monitoring on your Codacy instance. If you run into any issues while configuring Codacy, be sure to check our troubleshooting guide for more help.","title":"Installing Codacy Self-hosted"},{"location":"chart/#installing-codacy-self-hosted","text":"This documentation guides you on how to install Codacy Self-hosted on Kubernetes or MicroK8s. Important If you're running the legacy Codacy Self-hosted solution running on Docker please contact support@codacy.com so that we can assist you with the migration to Codacy Self-hosted running on Kubernetes or MicroK8s. To install Codacy you must complete these main steps: Setting up the system requirements Ensure that your infrastructure meets the hardware and system requirements to run Codacy. Installing Codacy Install Codacy on the cluster using our Helm chart that includes all the necessary components and dependencies. Configuring Codacy Configure integrations with Git providers and set up monitoring. The next sections include detailed instructions on how to complete each step of the installation process. Make sure that you complete each step before advancing to the next one.","title":"Installing Codacy Self-hosted"},{"location":"chart/#1-setting-up-the-system-requirements","text":"Before you start, you must prepare and provision the database server and Kubernetes or MicroK8s cluster that will host Codacy. Carefully review and set up the system requirements to run Codacy by following the instructions on the page below: System requirements Optionally, you can follow one of the guides below to quickly create a new Kubernetes or MicroK8s cluster that satisfies the characteristics described in the system requirements: Creating an Amazon EKS cluster Creating a MicroK8s cluster","title":"1. Setting up the system requirements"},{"location":"chart/#2-installing-codacy","text":"Install Codacy on an existing cluster using our Helm chart: Make sure that you have the following tools installed on your machine: kubectl within one minor version difference of your cluster Important If you're using MicroK8s you don't need to install kubectl because you will execute all kubectl commands as microk8s.kubectl commands instead. To simplify this, check how to create an alias for kubectl . Helm version >= 3.2 Create a cluster namespace called codacy that will group all resources related to Codacy. kubectl create namespace codacy Add the Docker registry credentials provided by Codacy together with your license to a cluster Secret. This is necessary because some Codacy Docker images are currently private. Substitute <docker_username> and <docker_password> with the Docker registry username and password and run the following command: kubectl create secret docker-registry docker-credentials \\ --docker-username = <docker_username> \\ --docker-password = <docker_password> \\ --namespace codacy Download the template file values-production.yaml and use a text editor of your choice to edit the value placeholders as described in the comments. Create an address record on your DNS provider mapping the hostname you used in the previous step to the IP address of your Ingress controller. Important If you're using MicroK8s you must map the hostname to the public IP address of the machine running MicroK8s. Add Codacy's chart repository to your Helm client and install the Codacy chart using the file values-production.yaml created previously. Important If you're using MicroK8s you must download and use the file values-microk8s.yaml together with the file values-production.yaml by uncommenting the last line in the helm upgrade command below. helm repo add codacy-stable https://charts.codacy.com/stable/ helm repo update helm upgrade --install codacy codacy-stable/codacy \\ --namespace codacy \\ --version 5 .1.0 \\ --values values-production.yaml # --values values-microk8s.yaml By now all the Codacy pods should be starting in the cluster. Run the following command and wait for all the pods to have the status Running , which can take several minutes: $ kubectl get pods -n codacy NAME READY STATUS RESTARTS AGE codacy-api-f7897b965-fgn67 1 /1 Running 0 8m57s codacy-api-f7897b965-kkqsx 1 /1 Running 0 8m57s codacy-crow-7c957d45f6-b8zp2 1 /1 Running 2 8m57s codacy-crowdb-0 1 /1 Running 0 8m57s codacy-engine-549bcb69d9-cgrqf 1 /1 Running 1 8m57s codacy-engine-549bcb69d9-sh5f4 1 /1 Running 1 8m57s codacy-fluentdoperator-x5vr2 2 /2 Running 0 8m57s codacy-listener-868b784dcf-npdfh 1 /1 Running 0 8m57s codacy-listenerdb-0 1 /1 Running 0 8m57s codacy-minio-7cfdc7b4f4-254gz 1 /1 Running 0 8m57s codacy-nfsserverprovisioner-0 1 /1 Running 0 8m57s codacy-portal-774d9fc596-rwqj5 1 /1 Running 2 8m56s codacy-rabbitmq-ha-0 1 /1 Running 0 8m57s codacy-ragnaros-69459775b5-hmj4d 1 /1 Running 3 8m57s codacy-remote-provider-service-8fb8556b-rr4ws 1 /1 Running 0 8m56s codacy-worker-manager-656dbf8d6d-n4j7c 1 /1 Running 0 8m57s","title":"2. Installing Codacy"},{"location":"chart/#3-configuring-codacy","text":"After successfully installing Codacy on your cluster, you're now ready to perform the post-install configuration steps: Use a browser to navigate to the Codacy hostname previously configured on the file values-production.yaml . Log in using your Git provider account. This automatically creates a Codacy administrator account with your credentials. Follow Codacy's onboarding process, which will guide you through the following steps: Configuring one or more of the following supported integrations: GitHub Cloud GitHub Enterprise GitLab Cloud GitLab Enterprise Bitbucket Cloud Bitbucket Server Email Creating an initial organization Inviting users to Codacy As a last step we recommend that you set up monitoring on your Codacy instance. If you run into any issues while configuring Codacy, be sure to check our troubleshooting guide for more help.","title":"3. Configuring Codacy"},{"location":"chart/requirements/","text":"System requirements # Before installing Codacy Self-hosted you must ensure that you have the following infrastructure correctly provisioned and configured: Git provider Kubernetes or MicroK8s cluster PostgreSQL server The next sections describe in detail how to set up these prerequisites. Git provider # To use Codacy Self-hosted, you must use one or more of our supported Git providers . In particular, if you're using a self-hosted Git provider, make sure that your version is supported by Codacy. Kubernetes or MicroK8s cluster setup # The cluster running Codacy must satisfy the following requirements: The infrastructure hosting the cluster must be provisioned with the hardware and networking requirements described below The orchestration platform managing the cluster must be one of: Kubernetes version 1.14.* to 1.20.* (1.20 recommended) MicroK8s version 1.14.* to 1.19.* (1.19 recommended) The NGINX Ingress controller must be installed and correctly set up in the cluster Cluster networking requirements # The cluster must be configured to accept and establish connections on the following ports: Service Protocol/Port Notes Inbound SSH TCP/22 MicroK8s only , to access the infrastructure remotely. Inbound HTTP TCP/80 Allow access to the Codacy website and API endpoints Inbound HTTPS TCP/443 Allow access to the Codacy website and API endpoints Outbound PostgreSQL TCP/5432 Connection to the PostgreSQL DBMS Outbound SMTP TCP/25 Connection to your SMTP server Outbound SMTPS TCP/465 Connection to your SMTP server over TLS/SSL Outbound Docker Hub * Connection to Docker Hub to download the required container images Outbound Git provider * Connection to the ports required by your remote Git provider Cluster hardware requirements # The high-level architecture described in the next section is important in understanding how Codacy uses and allocates hardware resources. Below we also provide guidance on resource provisioning for typical scenarios . For a custom hardware resource recommendation, please contact us at support@codacy.com . Codacy architecture # You can look at Codacy separately as two groups of components: The \"Platform\" contains the UI and other components important to treat and show results The \"Analysis\" is the swarm of workers that run between one and four linters simultaneously, depending on factors such as the number of files or the programming languages used in your projects Since all components are running on a cluster, you can increase the number of pod replicas in every deployment to give you more resilience and throughput, at a cost of increased resource usage. The following is a simplified overview of how to calculate resource allocation for the group of components \"Platform\" and \"Analysis\": Group of components vCPU Memory Platform (1 pod replica per component) 4 8 GB Analysis (1 Analysis Worker pod with up to 4 linters) 5 (per Analysis Worker) 10 GB (per Analysis Worker) Standard cluster provisioning # As described in the section above, Codacy's architecture allows scaling the \"Analysis\" group of components, meaning that the resources needed for Codacy depend mainly on the rate of commits done by your team that Codacy will be analyzing. The resources recommended on the following table are based on our experience and are also the defaults in the values-production.yaml file. You might need to adapt these defaults taking into account your use case. In particular, you should set the value of global.workerManager.workers.config.dedicatedMax to the maximum number of concurrent analysis depending on the available resources and number of replicas per component. Note For MicroK8s clusters we added an extra 1.5 vCPU and 1.5 GB memory to the \"Platform\" to account for the MicroK8s platform itself running on the same machine. Installation type Pod replicas per component Max. concurrent analysis Platform resources Analysis resources ~ Total resources Kubernetes Small Installation 1 2 4 vCPUs 8 GB RAM 10 vCPUs 20 GB RAM 16 vCPUs 32 GB RAM Kubernetes Medium Installation (default) 2 4 8 vCPUs 16 GB RAM 20 vCPUs 40 GB RAM 32 vCPUs 64 GB RAM Kubernetes Big Installation 2+ 10+ 8+ vCPUs 16+ GB RAM 50+ vCPUs 100+ GB RAM 60+ vCPUs 110+ GB RAM MicroK8s Minimum 1 2 5.5 vCPUs 9.5 GB RAM 10 vCPUs 20 GB RAM 16 vCPUs 32 GB RAM MicroK8s Recommended (default) 1+ 2 9.5+ vCPUs 17.5+ GB RAM 10 vCPUs 20 GB RAM 21+ vCPUs 40+ GB RAM The storage requirements recommended on the following table depend mainly on the number of repositories that Codacy will be analyzing and should be used as a guideline to determine your installation requirements. Component Bundled in the chart? Minimum recommended NFS Yes 200 GB RabbitMQ Yes 8 GB Minio Yes 20 GB PostgreSQL No (external DB recommended) 500 GB+ PostgreSQL server setup # Codacy requires a database server to persist data that must satisfy the following requirements: The infrastructure hosting the database server must be provisioned with the hardware requirements described below The DBMS server must be PostgreSQL version 10.15 The PostgreSQL server must be configured to accept connections from the cluster The Codacy databases and a dedicated user must be created using the instructions below Important Google, the developer of Kubernetes, doesn't recommend running database servers on your cluster . As such, consider using a managed solution like Amazon RDS or Google Cloud SQL, or running the PostgreSQL server on a dedicated virtual machine. We recommend that you use a managed solution to reduce maintenance and configuration costs of the PostgreSQL server. The main cloud providers all have this service that you can use, for example: Amazon RDS for PostgreSQL or Amazon Aurora PostgreSQL-Compatible Edition Azure Database for PostgreSQL Google Cloud SQL for PostgreSQL Digital Ocean Managed Databases PostgreSQL hardware requirements # The following are the minimum specifications recommended for provisioning the PostgreSQL server: vCPUs Memory Storage Max. concurrent connections 4 8 GB 500 GB+ 300 Preparing PostgreSQL for Codacy # Before installing Codacy you must create a set of databases that will be used by Codacy to persist data. We also recommend that you create a dedicated user for Codacy, with access permissions only to the databases that are specific to Codacy: Connect to the PostgreSQL server as a database admin user. For example, using the psql command line client: psql -U postgres -h <PostgreSQL server hostname> Create the dedicated user that Codacy will use to connect to PostgreSQL. Make sure that you change the username and password to suit your security needs: CREATE USER codacy WITH PASSWORD 'codacy' ; ALTER ROLE codacy WITH CREATEDB ; Take note of the username and password you define, as you will require them later to configure the connection from Codacy to the PostgreSQL server. Make sure that you can connect to the PostgreSQL database using the newly created user. For example, using the psql command line client: psql -U codacy -d postgres -h <PostgreSQL server hostname> Create the databases required by Codacy: CREATE DATABASE accounts WITH OWNER = codacy ; CREATE DATABASE analysis WITH OWNER = codacy ; CREATE DATABASE results WITH OWNER = codacy ; CREATE DATABASE metrics WITH OWNER = codacy ; CREATE DATABASE filestore WITH OWNER = codacy ; CREATE DATABASE jobs WITH OWNER = codacy ; CREATE DATABASE listener WITH OWNER = codacy ; CREATE DATABASE crow WITH OWNER = codacy ;","title":"System requirements"},{"location":"chart/requirements/#system-requirements","text":"Before installing Codacy Self-hosted you must ensure that you have the following infrastructure correctly provisioned and configured: Git provider Kubernetes or MicroK8s cluster PostgreSQL server The next sections describe in detail how to set up these prerequisites.","title":"System requirements"},{"location":"chart/requirements/#git-provider","text":"To use Codacy Self-hosted, you must use one or more of our supported Git providers . In particular, if you're using a self-hosted Git provider, make sure that your version is supported by Codacy.","title":"Git provider"},{"location":"chart/requirements/#kubernetes-or-microk8s-cluster-setup","text":"The cluster running Codacy must satisfy the following requirements: The infrastructure hosting the cluster must be provisioned with the hardware and networking requirements described below The orchestration platform managing the cluster must be one of: Kubernetes version 1.14.* to 1.20.* (1.20 recommended) MicroK8s version 1.14.* to 1.19.* (1.19 recommended) The NGINX Ingress controller must be installed and correctly set up in the cluster","title":"Kubernetes or MicroK8s cluster setup"},{"location":"chart/requirements/#postgresql-server-setup","text":"Codacy requires a database server to persist data that must satisfy the following requirements: The infrastructure hosting the database server must be provisioned with the hardware requirements described below The DBMS server must be PostgreSQL version 10.15 The PostgreSQL server must be configured to accept connections from the cluster The Codacy databases and a dedicated user must be created using the instructions below Important Google, the developer of Kubernetes, doesn't recommend running database servers on your cluster . As such, consider using a managed solution like Amazon RDS or Google Cloud SQL, or running the PostgreSQL server on a dedicated virtual machine. We recommend that you use a managed solution to reduce maintenance and configuration costs of the PostgreSQL server. The main cloud providers all have this service that you can use, for example: Amazon RDS for PostgreSQL or Amazon Aurora PostgreSQL-Compatible Edition Azure Database for PostgreSQL Google Cloud SQL for PostgreSQL Digital Ocean Managed Databases","title":"PostgreSQL server setup"},{"location":"chart/configuration/monitoring/","text":"Monitoring # Currently, Codacy Self-hosted supports two monitoring solutions: Crow : A simple, lightweight, and built-in monitoring solution, enabled by default when you install Codacy. Prometheus + Grafana + Loki : A comprehensive third-party monitoring solution, recommended for more advanced usage. The sections below provide instructions on how to set up each monitoring solution. Setting up monitoring using Crow # Crow displays information about the projects that are pending analysis and the jobs currently running on Codacy. Crow is installed alongside Codacy when the Helm chart is deployed to the cluster. By default, you can access Crow as follows: URL: http://<codacy hostname>/monitoring , where <codacy hostname> is the hostname of your Codacy instance Username: codacy Password: C0dacy123 We highly recommend that you define a custom password for Crow, if you haven't already done it when installing Codacy: Edit the value of global.crow.config.passwordAuth.password in the values-production.yaml file that you used to install Codacy: global : crow : config : passwordAuth : password : C0dacy123 Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml Setting up monitoring using Grafana, Prometheus, and Loki # Prometheus is an open-source systems monitoring and alerting toolkit. Logs can be collected using Loki , which is a horizontally-scalable, highly-available, multi-tenant log aggregation system. Its data can be visualized with Grafana , a widely used open source analytics and monitoring solution. This solution is considerably more resource demanding than Crow, and is recommended only for more advanced usage. Furthermore, its installation, configuration, and management require a deeper knowledge of Kubernetes as each component must be carefully tweaked to match your specific use case, using as starting point the .yaml values files provided by us. The instructions below cover the basic installation of the components in this monitoring stack. 1. Installing Prometheus # The simplest way to set up Prometheus in your cluster is by using the Prometheus Operator bundle. Add the custom resources required for installing this bundle in your cluster: Important If you're using MicroK8s use microk8s.kubectl instead of kubectl . kubectl apply -f \"https://raw.githubusercontent.com/coreos/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml\" kubectl apply -f \"https://raw.githubusercontent.com/coreos/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml\" kubectl apply -f \"https://raw.githubusercontent.com/coreos/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml\" kubectl apply -f \"https://raw.githubusercontent.com/coreos/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml\" kubectl apply -f \"https://raw.githubusercontent.com/coreos/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml\" kubectl apply -f \"https://raw.githubusercontent.com/coreos/prometheus-operator/release-0.38/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml\" 2. Installing Loki # Obtain the configuration file for Loki, values-loki.yaml , and install it by running the command below. While the default storage class setting for Loki persistence should suit most use cases, you may need to adjust it to your specific Kubernetes installation. For instance, for MicroK8s use storageClassName: microk8s-hostpath . helm repo add loki https://grafana.github.io/loki/charts kubectl create namespace monitoring helm upgrade --install --atomic --timeout 600s loki loki/loki \\ --version 0 .28.1 --namespace monitoring --values values-loki.yaml 3. Installing Promtail # Promtail is an agent that ships the contents of local logs to a Loki instance. Obtain the configuration file for Promtail, values-promtail.yaml , and install it by running the command below. helm upgrade --install --atomic --timeout 600s promtail loki/promtail \\ --version 0 .22.2 --namespace monitoring --values values-promtail.yaml 4. Installing Prometheus and Grafana # Obtain the configuration file for the Prometheus Operator bundle , values-prometheus-operator.yaml . Then: Edit the Grafana password for the admin user and the hostname for Grafana in the values-prometheus-operator.yaml file. Install the bundle on your cluster by running the command below. helm upgrade --install --atomic --timeout 600s monitoring stable/prometheus-operator \\ --version 8 .13.8 --namespace monitoring --values values-prometheus-operator.yaml Follow the Kubernetes documentation to access the Grafana service that's now running on your cluster, using the method that best suits your use case. 5. Enable service dashboards # Now that you have Prometheus and Grafana installed you can enable metrics reporting for Codacy components. Create a file named values-monitoring.yaml with the following content: global : metrics : kamon : enabled : true prometheusReporter : enabled : true serviceMonitor : enabled : true grafana : enabled : true Apply this configuration by performing a Helm upgrade. To do so append --values values-monitoring.yaml to the command used to install Codacy : helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-monitoring.yaml","title":"Monitoring"},{"location":"chart/configuration/monitoring/#monitoring","text":"Currently, Codacy Self-hosted supports two monitoring solutions: Crow : A simple, lightweight, and built-in monitoring solution, enabled by default when you install Codacy. Prometheus + Grafana + Loki : A comprehensive third-party monitoring solution, recommended for more advanced usage. The sections below provide instructions on how to set up each monitoring solution.","title":"Monitoring"},{"location":"chart/configuration/monitoring/#setting-up-monitoring-using-crow","text":"Crow displays information about the projects that are pending analysis and the jobs currently running on Codacy. Crow is installed alongside Codacy when the Helm chart is deployed to the cluster. By default, you can access Crow as follows: URL: http://<codacy hostname>/monitoring , where <codacy hostname> is the hostname of your Codacy instance Username: codacy Password: C0dacy123 We highly recommend that you define a custom password for Crow, if you haven't already done it when installing Codacy: Edit the value of global.crow.config.passwordAuth.password in the values-production.yaml file that you used to install Codacy: global : crow : config : passwordAuth : password : C0dacy123 Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml","title":"Setting up monitoring using Crow"},{"location":"chart/configuration/monitoring/#setting-up-monitoring-using-grafana-prometheus-and-loki","text":"Prometheus is an open-source systems monitoring and alerting toolkit. Logs can be collected using Loki , which is a horizontally-scalable, highly-available, multi-tenant log aggregation system. Its data can be visualized with Grafana , a widely used open source analytics and monitoring solution. This solution is considerably more resource demanding than Crow, and is recommended only for more advanced usage. Furthermore, its installation, configuration, and management require a deeper knowledge of Kubernetes as each component must be carefully tweaked to match your specific use case, using as starting point the .yaml values files provided by us. The instructions below cover the basic installation of the components in this monitoring stack.","title":"Setting up monitoring using Grafana, Prometheus, and Loki"},{"location":"chart/configuration/integrations/bitbucket-cloud/","text":"Bitbucket Cloud # Follow the instructions below to set up the Codacy Self-hosted integration with Bitbucket Cloud. Create an OAuth consumer # To integrate Codacy with Bitbucket Cloud, you must register an OAuth consumer for Codacy on Bitbucket. You can create a consumer on any existing individual or team account. To create a consumer, do the following: On Bitbucket, click on your avatar on the bottom left-hand corner and select Bitbucket settings . Select OAuth on the left sidebar and click the button Add consumer . Fill in the fields to create the OAuth consumer: Name: Name of the OAuth consumer. For example, Codacy . Callback URL: Copy the URL below, replacing the HTTP protocol and hostname with the correct values for your Codacy instance. https://codacy.example.com/login/Bitbucket?codacy_skip_ga=1 This is a private consumer: Enable the check box. Add the permissions: Account: Write Team membership: Read Projects: Read Repositories: Admin Pull requests: Write Issues: Write Webhooks: Read and write Click Save, and then click the name of the new OAuth consumer to take note of the generated key and secret. Configure Bitbucket Cloud on Codacy # After creating the OAuth consumer on Bitbucket Cloud, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.bitbucket.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the OAuth consumer: global : bitbucket : enabled : \"true\" login : \"true\" # Show login button for Bitbucket Cloud key : \"\" # OAuth consumer key secret : \"\" # OAuth consumer secret Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use Bitbucket Cloud to authenticate to Codacy.","title":"Bitbucket Cloud"},{"location":"chart/configuration/integrations/bitbucket-cloud/#bitbucket-cloud","text":"Follow the instructions below to set up the Codacy Self-hosted integration with Bitbucket Cloud.","title":"Bitbucket Cloud"},{"location":"chart/configuration/integrations/bitbucket-cloud/#create-oauth","text":"To integrate Codacy with Bitbucket Cloud, you must register an OAuth consumer for Codacy on Bitbucket. You can create a consumer on any existing individual or team account. To create a consumer, do the following: On Bitbucket, click on your avatar on the bottom left-hand corner and select Bitbucket settings . Select OAuth on the left sidebar and click the button Add consumer . Fill in the fields to create the OAuth consumer: Name: Name of the OAuth consumer. For example, Codacy . Callback URL: Copy the URL below, replacing the HTTP protocol and hostname with the correct values for your Codacy instance. https://codacy.example.com/login/Bitbucket?codacy_skip_ga=1 This is a private consumer: Enable the check box. Add the permissions: Account: Write Team membership: Read Projects: Read Repositories: Admin Pull requests: Write Issues: Write Webhooks: Read and write Click Save, and then click the name of the new OAuth consumer to take note of the generated key and secret.","title":"Create an OAuth consumer"},{"location":"chart/configuration/integrations/bitbucket-cloud/#configure","text":"After creating the OAuth consumer on Bitbucket Cloud, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.bitbucket.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the OAuth consumer: global : bitbucket : enabled : \"true\" login : \"true\" # Show login button for Bitbucket Cloud key : \"\" # OAuth consumer key secret : \"\" # OAuth consumer secret Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use Bitbucket Cloud to authenticate to Codacy.","title":"Configure Bitbucket Cloud on Codacy"},{"location":"chart/configuration/integrations/bitbucket-server/","text":"Bitbucket Server # Follow the instructions below to set up the Codacy Self-hosted integration with Bitbucket Server. Create a Bitbucket Server application link # To integrate Codacy with Bitbucket Server, you must create an application link on your Bitbucket Server instance: Since Bitbucket Server uses OAuth1, you need to create a key pair to sign and validate the requests between Codacy and the Bitbucket Server instance. Create a key pair using the RSA algorithm in the PKCS#8 format by executing the command: bash < ( curl -fsSL https://raw.githubusercontent.com/codacy/chart/master/docs/configuration/integrations/generate-bitbucket-server-secrets.sh ) Store the keys in a safe place for usage in the next steps and as a backup. Open <bitbucket server url>/plugins/servlet/applinks/listApplicationLinks , where <bitbucket server url> is the URL of your Bitbucket Server instance. Create a new application link with the URL of your Codacy instance. Fill in the fields: Application Name: Name of the application. For example, Codacy . Application Type: Select Generic Application . The remaining fields should be left blank. After creating the link, click Edit to add an incoming authentication. Fill in the fields of the incomming authentication: Consumer Key: Enter the consumerKey generated previously. Consumer Name: Name of the consumer. For example, Codacy . Public Key: Enter the consumerPublicKey generated previously. The remaining fields should be left blank. Configure Bitbucket Server on Codacy # After creating the Bitbucket Server application link, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.bitbucketEnterprise.enabled: \"true\" and define the remaining values as described below and with the information obtained when you created the Bitbucket Server application link: bitbucketEnterprise : enabled : \"true\" login : \"true\" # Show login button for Bitbucket Server hostname : \"bitbucket.example.com\" # Hostname of your Bitbucket Server instance protocol : \"https\" # Protocol of your Bitbucket Server instance port : 7990 # Port of your Bitbucket Server instance consumerKey : \"\" # Generated when creating the Bitbucket Server application link consumerPublicKey : \"\" # Generated when creating the Bitbucket Server application link consumerPrivateKey : \"\" # Generated when creating the Bitbucket Server application link Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use Bitbucket Server to authenticate to Codacy.","title":"Bitbucket Server"},{"location":"chart/configuration/integrations/bitbucket-server/#bitbucket-server","text":"Follow the instructions below to set up the Codacy Self-hosted integration with Bitbucket Server.","title":"Bitbucket Server"},{"location":"chart/configuration/integrations/bitbucket-server/#create-a-bitbucket-server-application-link","text":"To integrate Codacy with Bitbucket Server, you must create an application link on your Bitbucket Server instance: Since Bitbucket Server uses OAuth1, you need to create a key pair to sign and validate the requests between Codacy and the Bitbucket Server instance. Create a key pair using the RSA algorithm in the PKCS#8 format by executing the command: bash < ( curl -fsSL https://raw.githubusercontent.com/codacy/chart/master/docs/configuration/integrations/generate-bitbucket-server-secrets.sh ) Store the keys in a safe place for usage in the next steps and as a backup. Open <bitbucket server url>/plugins/servlet/applinks/listApplicationLinks , where <bitbucket server url> is the URL of your Bitbucket Server instance. Create a new application link with the URL of your Codacy instance. Fill in the fields: Application Name: Name of the application. For example, Codacy . Application Type: Select Generic Application . The remaining fields should be left blank. After creating the link, click Edit to add an incoming authentication. Fill in the fields of the incomming authentication: Consumer Key: Enter the consumerKey generated previously. Consumer Name: Name of the consumer. For example, Codacy . Public Key: Enter the consumerPublicKey generated previously. The remaining fields should be left blank.","title":"Create a Bitbucket Server application link"},{"location":"chart/configuration/integrations/bitbucket-server/#configure-bitbucket-server-on-codacy","text":"After creating the Bitbucket Server application link, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.bitbucketEnterprise.enabled: \"true\" and define the remaining values as described below and with the information obtained when you created the Bitbucket Server application link: bitbucketEnterprise : enabled : \"true\" login : \"true\" # Show login button for Bitbucket Server hostname : \"bitbucket.example.com\" # Hostname of your Bitbucket Server instance protocol : \"https\" # Protocol of your Bitbucket Server instance port : 7990 # Port of your Bitbucket Server instance consumerKey : \"\" # Generated when creating the Bitbucket Server application link consumerPublicKey : \"\" # Generated when creating the Bitbucket Server application link consumerPrivateKey : \"\" # Generated when creating the Bitbucket Server application link Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use Bitbucket Server to authenticate to Codacy.","title":"Configure Bitbucket Server on Codacy"},{"location":"chart/configuration/integrations/email/","text":"SMTP server # Follow the instructions below to set up Codacy Self-hosted to send emails using your SMTP server: Edit the file values-production.yaml that you used to install Codacy . Set global.email.enabled: \"true\" and define the remaining values with the credentials for your SMTP server: email : enabled : \"true\" replyTo : \"notifications@mycompany.com\" # Reply-to field on sent emails smtp : protocol : \"smtp\" # SMTP protocol to use, either smtps or smtp hostname : \"smtp.example.com\" # Hostname of your SMTP server # username: \"\" # Optional username to authenticate on your SMTP server # password: \"\" # Optional password to authenticate on your SMTP server # port: 25 # Optional port of your SMTP server, the default is 25 Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to: Invite new users via email Receive commit and pull request email notifications","title":"SMTP server"},{"location":"chart/configuration/integrations/email/#smtp-server","text":"Follow the instructions below to set up Codacy Self-hosted to send emails using your SMTP server: Edit the file values-production.yaml that you used to install Codacy . Set global.email.enabled: \"true\" and define the remaining values with the credentials for your SMTP server: email : enabled : \"true\" replyTo : \"notifications@mycompany.com\" # Reply-to field on sent emails smtp : protocol : \"smtp\" # SMTP protocol to use, either smtps or smtp hostname : \"smtp.example.com\" # Hostname of your SMTP server # username: \"\" # Optional username to authenticate on your SMTP server # password: \"\" # Optional password to authenticate on your SMTP server # port: 25 # Optional port of your SMTP server, the default is 25 Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to: Invite new users via email Receive commit and pull request email notifications","title":"SMTP server"},{"location":"chart/configuration/integrations/github-app-create/","text":"Creating a GitHub App # You must create and correctly set up a GitHub App to allow Codacy Self-hosted to integrate with GitHub. To create the GitHub App: If you're using GitHub Cloud , open https://github.com/settings/apps/new . If you're using GitHub Enterprise , open https://github.example.com/settings/apps/new , replacing the HTTP protocol and hostname with the correct values for your GitHub Enterprise instance. Configure the new GitHub App using the values listed on the table below, replacing https://codacy.example.com with the correct base URL of your Codacy instance. Field Value GitHub App name Codacy Homepage URL https://codacy.example.com User authorization callback URL https://codacy.example.com Expire user authorization tokens Disabled \u26a0\ufe0f Note: Currently, Codacy doesn't support expiring user access tokens . Make sure that this option is turned off. Webhook URL For GitHub Cloud: https://codacy.example.com/2.0/events/gh/organization For GitHub Enterprise: https://codacy.example.com/2.0/events/ghe/organization Repository permissions Administration Read & write Checks Read & write Issues Read & write Metadata Read only Pull requests Read & write Webhooks Read & write Commit statuses Read & write Organization permissions Members Read only Webhooks Read & write User permissions Email addresses Read only Git SSH keys Read & write Where can this GitHub App be installed? Any account Scroll to the bottom of the page, click Generate a private key , and save the .pem file containing the private key. Take note of the following information, as you'll need it to configure Codacy: GitHub App name App ID Client ID Client secret Private key (contents of the .pem file generated in the previous step)","title":"Creating a GitHub App"},{"location":"chart/configuration/integrations/github-app-create/#creating-a-github-app","text":"You must create and correctly set up a GitHub App to allow Codacy Self-hosted to integrate with GitHub. To create the GitHub App: If you're using GitHub Cloud , open https://github.com/settings/apps/new . If you're using GitHub Enterprise , open https://github.example.com/settings/apps/new , replacing the HTTP protocol and hostname with the correct values for your GitHub Enterprise instance. Configure the new GitHub App using the values listed on the table below, replacing https://codacy.example.com with the correct base URL of your Codacy instance. Field Value GitHub App name Codacy Homepage URL https://codacy.example.com User authorization callback URL https://codacy.example.com Expire user authorization tokens Disabled \u26a0\ufe0f Note: Currently, Codacy doesn't support expiring user access tokens . Make sure that this option is turned off. Webhook URL For GitHub Cloud: https://codacy.example.com/2.0/events/gh/organization For GitHub Enterprise: https://codacy.example.com/2.0/events/ghe/organization Repository permissions Administration Read & write Checks Read & write Issues Read & write Metadata Read only Pull requests Read & write Webhooks Read & write Commit statuses Read & write Organization permissions Members Read only Webhooks Read & write User permissions Email addresses Read only Git SSH keys Read & write Where can this GitHub App be installed? Any account Scroll to the bottom of the page, click Generate a private key , and save the .pem file containing the private key. Take note of the following information, as you'll need it to configure Codacy: GitHub App name App ID Client ID Client secret Private key (contents of the .pem file generated in the previous step)","title":"Creating a GitHub App"},{"location":"chart/configuration/integrations/github-cloud/","text":"GitHub Cloud # Follow the instructions below to set up the Codacy Self-hosted integration with GitHub Cloud: Follow the instructions on creating a GitHub App . Edit the file values-production.yaml that you used to install Codacy . Set global.github.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitHub App: github : enabled : \"true\" login : \"true\" # Show login button for GitHub Cloud clientId : \"\" # Client ID clientSecret : \"\" # Client secret app : name : \"codacy\" # GitHub App name id : \"1234\" # App ID privateKey : \"\" # Contents of the .pem file without newlines or the BEGIN/END lines Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitHub Cloud to authenticate to Codacy.","title":"GitHub Cloud"},{"location":"chart/configuration/integrations/github-cloud/#github-cloud","text":"Follow the instructions below to set up the Codacy Self-hosted integration with GitHub Cloud: Follow the instructions on creating a GitHub App . Edit the file values-production.yaml that you used to install Codacy . Set global.github.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitHub App: github : enabled : \"true\" login : \"true\" # Show login button for GitHub Cloud clientId : \"\" # Client ID clientSecret : \"\" # Client secret app : name : \"codacy\" # GitHub App name id : \"1234\" # App ID privateKey : \"\" # Contents of the .pem file without newlines or the BEGIN/END lines Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitHub Cloud to authenticate to Codacy.","title":"GitHub Cloud"},{"location":"chart/configuration/integrations/github-enterprise/","text":"GitHub Enterprise # Follow the instructions below to set up the Codacy Self-hosted integration with GitHub Enterprise: Follow the instructions on creating a GitHub App . Edit the file values-production.yaml that you used to install Codacy . Set global.githubEnterprise.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitHub App: githubEnterprise : enabled : \"true\" login : \"true\" # Show login button for GitHub Enterprise hostname : \"github.example.com\" # Hostname of your GitHub Enterprise instance protocol : \"https\" # Protocol of your GitHub Enterprise instance port : 443 # Port of your GitHub Enterprise instance disableSSL : \"false\" # Disable certificate validation isPrivateMode : \"true\" # Status of private mode on your GitHub Enterprise instance clientId : \"\" # GitHub App Client ID clientSecret : \"\" # GitHub App Client secret app : name : \"codacy\" # GitHub App name id : \"1234\" # GitHub App ID privateKey : \"\" # Contents of the .pem file without newlines or the BEGIN/END lines Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitHub Enterprise to authenticate to Codacy.","title":"GitHub Enterprise"},{"location":"chart/configuration/integrations/github-enterprise/#github-enterprise","text":"Follow the instructions below to set up the Codacy Self-hosted integration with GitHub Enterprise: Follow the instructions on creating a GitHub App . Edit the file values-production.yaml that you used to install Codacy . Set global.githubEnterprise.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitHub App: githubEnterprise : enabled : \"true\" login : \"true\" # Show login button for GitHub Enterprise hostname : \"github.example.com\" # Hostname of your GitHub Enterprise instance protocol : \"https\" # Protocol of your GitHub Enterprise instance port : 443 # Port of your GitHub Enterprise instance disableSSL : \"false\" # Disable certificate validation isPrivateMode : \"true\" # Status of private mode on your GitHub Enterprise instance clientId : \"\" # GitHub App Client ID clientSecret : \"\" # GitHub App Client secret app : name : \"codacy\" # GitHub App name id : \"1234\" # GitHub App ID privateKey : \"\" # Contents of the .pem file without newlines or the BEGIN/END lines Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitHub Enterprise to authenticate to Codacy.","title":"GitHub Enterprise"},{"location":"chart/configuration/integrations/gitlab-cloud/","text":"GitLab Cloud # Follow the instructions below to set up the Codacy Self-hosted integration with GitLab Cloud. Create a GitLab application # To integrate Codacy with GitLab Cloud, you must create a GitLab application: Open https://gitlab.com/profile/applications . Fill in the fields to register your Codacy instance on GitLab: Name: Name of the application. For example, Codacy . Redirect URI: Copy the URLs below, replacing the HTTP protocol and hostname with the correct values for your Codacy instance. This field is case sensitive. https://codacy.example.com/login/GitLab https://codacy.example.com/add/addProvider/GitLab https://codacy.example.com/add/addService/GitLab https://codacy.example.com/add/addPermissions/GitLab Scopes: Enable the scopes: api read_user read_repository openid Click Save application and take note of the generated Application Id and Secret. Configure GitLab Cloud on Codacy # After creating the GitLab application, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.gitlab.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitLab application: gitlab : enabled : \"true\" login : \"true\" # Show login button for GitLab Cloud clientId : \"\" # Application ID clientSecret : \"\" # Secret Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitLab Cloud to authenticate to Codacy.","title":"GitLab Cloud"},{"location":"chart/configuration/integrations/gitlab-cloud/#gitlab-cloud","text":"Follow the instructions below to set up the Codacy Self-hosted integration with GitLab Cloud.","title":"GitLab Cloud"},{"location":"chart/configuration/integrations/gitlab-cloud/#create-application","text":"To integrate Codacy with GitLab Cloud, you must create a GitLab application: Open https://gitlab.com/profile/applications . Fill in the fields to register your Codacy instance on GitLab: Name: Name of the application. For example, Codacy . Redirect URI: Copy the URLs below, replacing the HTTP protocol and hostname with the correct values for your Codacy instance. This field is case sensitive. https://codacy.example.com/login/GitLab https://codacy.example.com/add/addProvider/GitLab https://codacy.example.com/add/addService/GitLab https://codacy.example.com/add/addPermissions/GitLab Scopes: Enable the scopes: api read_user read_repository openid Click Save application and take note of the generated Application Id and Secret.","title":"Create a GitLab application"},{"location":"chart/configuration/integrations/gitlab-cloud/#configure","text":"After creating the GitLab application, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.gitlab.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitLab application: gitlab : enabled : \"true\" login : \"true\" # Show login button for GitLab Cloud clientId : \"\" # Application ID clientSecret : \"\" # Secret Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitLab Cloud to authenticate to Codacy.","title":"Configure GitLab Cloud on Codacy"},{"location":"chart/configuration/integrations/gitlab-enterprise/","text":"GitLab Enterprise # Follow the instructions below to set up the Codacy Self-hosted integration with GitLab Enterprise: Create a GitLab application # To integrate Codacy with GitLab Enterprise, you must create a GitLab application: Open <gitlab enterprise url>/profile/applications as a GitLab admin, where <gitlab enterprise url> is the URL of your GitLab Enterprise instance. Fill in the fields to register your Codacy instance on GitLab: Name: Name of the application. For example, Codacy . Redirect URI: Copy the URLs below, replacing the HTTP protocol and hostname with the correct values for your Codacy instance. This field is case sensitive. https://codacy.example.com/login/GitLabEnterprise https://codacy.example.com/add/addProvider/GitLabEnterprise https://codacy.example.com/add/addService/GitLabEnterprise https://codacy.example.com/add/addPermissions/GitLabEnterprise Scopes: Enable the scopes: api read_user read_repository openid Click Save application and take note of the generated Application Id and Secret. Configure GitLab Enterprise on Codacy # After creating the GitLab application, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.gitlabEnterprise.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitLab application: gitlabEnterprise : enabled : \"true\" login : \"true\" # Show login button for GitLab Enterprise hostname : \"gitlab.example.com\" # Hostname of your GitLab Enterprise instance protocol : \"https\" # Protocol of your GitLab Enterprise instance port : 443 # Port of your GitLab Enterprise instance clientId : \"\" # Application ID clientSecret : \"\" # Secret Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitLab Enterprise to authenticate to Codacy. Detect changes to repositories and organizations # Optionally, Codacy can automatically detect the following changes to repositories and organizations on your GitLab Enterprise instance: For repositories: renames, deletes, and visibility changes For organizations: renames, deletes, and access removed To do this, you must configure a System Hook on your GitLab Enterprise instance to notify Codacy of the changes: Open <gitlab enterprise url>/admin/hooks as a GitLab admin, where <gitlab enterprise url> is the URL of your GitLab Enterprise instance. Fill in the fields to create the System Hook: URL: The URL of your Codacy instance with the path /2.0/events/gle/organization . For example, http://codacy.example.com/2.0/events/gle/organization Secret Token: Copy the Application Secret from the GitLab application that you created previously, or from the value of clientSecret in the file values-production.yaml that you used to install Codacy. Trigger: Enable the trigger Repository update events SSL verification: Enable the SSL verification. Click Save Changes to save the System Hook.","title":"GitLab Enterprise"},{"location":"chart/configuration/integrations/gitlab-enterprise/#gitlab-enterprise","text":"Follow the instructions below to set up the Codacy Self-hosted integration with GitLab Enterprise:","title":"GitLab Enterprise"},{"location":"chart/configuration/integrations/gitlab-enterprise/#create-application","text":"To integrate Codacy with GitLab Enterprise, you must create a GitLab application: Open <gitlab enterprise url>/profile/applications as a GitLab admin, where <gitlab enterprise url> is the URL of your GitLab Enterprise instance. Fill in the fields to register your Codacy instance on GitLab: Name: Name of the application. For example, Codacy . Redirect URI: Copy the URLs below, replacing the HTTP protocol and hostname with the correct values for your Codacy instance. This field is case sensitive. https://codacy.example.com/login/GitLabEnterprise https://codacy.example.com/add/addProvider/GitLabEnterprise https://codacy.example.com/add/addService/GitLabEnterprise https://codacy.example.com/add/addPermissions/GitLabEnterprise Scopes: Enable the scopes: api read_user read_repository openid Click Save application and take note of the generated Application Id and Secret.","title":"Create a GitLab application"},{"location":"chart/configuration/integrations/gitlab-enterprise/#configure","text":"After creating the GitLab application, you must configure it on Codacy: Edit the file values-production.yaml that you used to install Codacy . Set global.gitlabEnterprise.enabled: \"true\" and define the remaining values as described below using the information obtained when you created the GitLab application: gitlabEnterprise : enabled : \"true\" login : \"true\" # Show login button for GitLab Enterprise hostname : \"gitlab.example.com\" # Hostname of your GitLab Enterprise instance protocol : \"https\" # Protocol of your GitLab Enterprise instance port : 443 # Port of your GitLab Enterprise instance clientId : \"\" # Application ID clientSecret : \"\" # Secret Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml After this is done you will be able to use GitLab Enterprise to authenticate to Codacy.","title":"Configure GitLab Enterprise on Codacy"},{"location":"chart/configuration/integrations/gitlab-enterprise/#detect-changes-to-repositories-and-organizations","text":"Optionally, Codacy can automatically detect the following changes to repositories and organizations on your GitLab Enterprise instance: For repositories: renames, deletes, and visibility changes For organizations: renames, deletes, and access removed To do this, you must configure a System Hook on your GitLab Enterprise instance to notify Codacy of the changes: Open <gitlab enterprise url>/admin/hooks as a GitLab admin, where <gitlab enterprise url> is the URL of your GitLab Enterprise instance. Fill in the fields to create the System Hook: URL: The URL of your Codacy instance with the path /2.0/events/gle/organization . For example, http://codacy.example.com/2.0/events/gle/organization Secret Token: Copy the Application Secret from the GitLab application that you created previously, or from the value of clientSecret in the file values-production.yaml that you used to install Codacy. Trigger: Enable the trigger Repository update events SSL verification: Enable the SSL verification. Click Save Changes to save the System Hook.","title":"Detect changes to repositories and organizations"},{"location":"chart/infrastructure/eks-quickstart/","text":"Creating an Amazon EKS cluster # Follow the instructions below to set up an Amazon EKS cluster from scratch, including the necessary underlying infrastructure, using Terraform. The following diagram is a non-exhaustive overview of what you can expect to have deployed in your AWS account by using this quickstart guide. 1. Prepare your environment # Prepare your environment to set up the Amazon EKS cluster: Make sure that you have the following tools installed on your machine: Git version >= 2.0.0 AWS CLI version 1 Terraform version >= 0.12 Kubectl version >= 1.14 Set up the AWS CLI credentials for your AWS account using the AWS CLI and Terraform documentation as reference. Note that, as stated in the Terraform documentation , if your .aws/credentials are more complex you might need to set AWS_SDK_LOAD_CONFIG=1 for Terraform to work correctly: export AWS_SDK_LOAD_CONFIG = 1 Clone the Codacy chart repository and change to the directory that includes the provided Terraform configuration files: git clone https://github.com/codacy/chart.git cd chart/docs/infrastructure/EKS/ This folder includes the following infrastructure stacks: backend: Optional S3 bucket for storing the Terraform state and a DynamoDB table for state locking main: Amazon EKS cluster, including the setup of all network and node infrastructure to go from zero to a fully functional cluster You must have administration privileges on AWS to deploy (and eventually destroy) this infrastructure. The policy file aws-terraform-minimum-admin-policy.json lists the minimum privileges that are required. 2. Set up the Terraform state storage backend # The backend stores the current and historical state of your infrastructure. Although using the backend is optional, we recommend that you deploy it, particularly if you're planning to use these Terraform templates to make modifications to the cluster in the future: Initialize Terraform and deploy the infrastructure described in the backend/ directory, then follow Terraform's instructions: cd backend/ terraform init && terraform apply This creates an Amazon S3 bucket with a unique name to save the infrastructure state. Take note of the value of state_bucket_name in the output of the command. Edit the main/config.tf file and follow the instructions included in the comments to set the name of the Amazon S3 bucket created above and enable the use of the backend in those infrastructure stacks. 3. Create a vanilla Amazon EKS cluster # Create a cluster that includes all the required network and node setup: Initialize Terraform and deploy the infrastructure described in the main/ directory, then follow Terraform's instructions: cd ../main/ terraform init && terraform apply This process takes around 10 minutes. Consider if you want to tailor the cluster to your needs by customizing the cluster configuration. The cluster configuration (such as the type and number of nodes, network CIDRs, etc.) is exposed as variables in the main/variables.tf file. To customize the defaults of that file we recommend that you use a variable definitions file and set the variables in a file named terraform.tfvars in the directory main/ . The following is an example terraform.tfvars : some_key = \"a_string_value\" another_key = 3 someting_else = true Subsequently running terraform apply loads the variables in the terraform.tfvars file by default: terraform apply Set up the kubeconfig file that stores the information needed by kubectl to connect to the new cluster by default: aws eks update-kubeconfig --name codacy-cluster --alias codacy-cluster Get information about the pods in the cluster to test that the cluster was created and that kubectl can successfully connect to the cluster: kubectl get pods -A 4. Prepare to set up the Ingress Controller # Prepare your infrastructure for the Ingress Controller setup, which is performed later during the installation process: Make sure that your network resources are correctly tagged, and create the following required tags if they are missing: Resource Type Key = Value VPC kubernetes.io/cluster/codacy-cluster = shared Subnet (public) kubernetes.io/cluster/codacy-cluster = shared kubernetes.io/role/elb = 1 Subnet (private) kubernetes.io/cluster/codacy-cluster = shared kubernetes.io/role/internal-elb = 1 For more information refer to the AWS documentation . Add the following chart repositories to Helm: helm repo add stable https://charts.helm.sh/stable helm repo update 5. Install the NGINX Ingress Controller # Install the NGINX Ingress Controller: Download the configuration file values-nginx.yaml for the NGINX Ingress Controller. If you wish to use a private load balancer or restrict the IP range for the provisioned load balancer edit the file and enable the required annotation and/or the corresponding setting where indicated. Install the NGINX Ingress Controller: kubectl create namespace codacy helm upgrade --install --namespace codacy --version 1 .39.0 codacy-nginx-ingress stable/nginx-ingress -f values-nginx.yaml Uninstalling the Amazon EKS cluster # Warning If you proceed beyond this point you'll permanently delete and break things. Delete the Kubernetes cluster. Run the following command in the main/ directory: terraform destroy This process takes around 10 minutes. Remove the Terraform backend. If you created the Terraform backend with the provided stack you can now safely delete it. The backend is purposely created with extra settings to prevent its accidental destruction. To destroy it cleanly you must first disable these settings by editing the file backend/state_and_lock.tf and following the instructions included in the comments. Afterwards, run the following command in the backend/ directory: terraform apply && terraform destroy Note that you first have to run terraform apply to update the settings, and only then will terraform destroy be able to destroy the backend.","title":"Creating an Amazon EKS cluster"},{"location":"chart/infrastructure/eks-quickstart/#creating-an-amazon-eks-cluster","text":"Follow the instructions below to set up an Amazon EKS cluster from scratch, including the necessary underlying infrastructure, using Terraform. The following diagram is a non-exhaustive overview of what you can expect to have deployed in your AWS account by using this quickstart guide.","title":"Creating an Amazon EKS cluster"},{"location":"chart/infrastructure/eks-quickstart/#1-prepare-your-environment","text":"Prepare your environment to set up the Amazon EKS cluster: Make sure that you have the following tools installed on your machine: Git version >= 2.0.0 AWS CLI version 1 Terraform version >= 0.12 Kubectl version >= 1.14 Set up the AWS CLI credentials for your AWS account using the AWS CLI and Terraform documentation as reference. Note that, as stated in the Terraform documentation , if your .aws/credentials are more complex you might need to set AWS_SDK_LOAD_CONFIG=1 for Terraform to work correctly: export AWS_SDK_LOAD_CONFIG = 1 Clone the Codacy chart repository and change to the directory that includes the provided Terraform configuration files: git clone https://github.com/codacy/chart.git cd chart/docs/infrastructure/EKS/ This folder includes the following infrastructure stacks: backend: Optional S3 bucket for storing the Terraform state and a DynamoDB table for state locking main: Amazon EKS cluster, including the setup of all network and node infrastructure to go from zero to a fully functional cluster You must have administration privileges on AWS to deploy (and eventually destroy) this infrastructure. The policy file aws-terraform-minimum-admin-policy.json lists the minimum privileges that are required.","title":"1. Prepare your environment"},{"location":"chart/infrastructure/eks-quickstart/#2-set-up-the-terraform-state-storage-backend","text":"The backend stores the current and historical state of your infrastructure. Although using the backend is optional, we recommend that you deploy it, particularly if you're planning to use these Terraform templates to make modifications to the cluster in the future: Initialize Terraform and deploy the infrastructure described in the backend/ directory, then follow Terraform's instructions: cd backend/ terraform init && terraform apply This creates an Amazon S3 bucket with a unique name to save the infrastructure state. Take note of the value of state_bucket_name in the output of the command. Edit the main/config.tf file and follow the instructions included in the comments to set the name of the Amazon S3 bucket created above and enable the use of the backend in those infrastructure stacks.","title":"2. Set up the Terraform state storage backend"},{"location":"chart/infrastructure/eks-quickstart/#3-create-a-vanilla-amazon-eks-cluster","text":"Create a cluster that includes all the required network and node setup: Initialize Terraform and deploy the infrastructure described in the main/ directory, then follow Terraform's instructions: cd ../main/ terraform init && terraform apply This process takes around 10 minutes. Consider if you want to tailor the cluster to your needs by customizing the cluster configuration. The cluster configuration (such as the type and number of nodes, network CIDRs, etc.) is exposed as variables in the main/variables.tf file. To customize the defaults of that file we recommend that you use a variable definitions file and set the variables in a file named terraform.tfvars in the directory main/ . The following is an example terraform.tfvars : some_key = \"a_string_value\" another_key = 3 someting_else = true Subsequently running terraform apply loads the variables in the terraform.tfvars file by default: terraform apply Set up the kubeconfig file that stores the information needed by kubectl to connect to the new cluster by default: aws eks update-kubeconfig --name codacy-cluster --alias codacy-cluster Get information about the pods in the cluster to test that the cluster was created and that kubectl can successfully connect to the cluster: kubectl get pods -A","title":"3. Create a vanilla Amazon EKS cluster"},{"location":"chart/infrastructure/eks-quickstart/#4-prepare-to-set-up-the-ingress-controller","text":"Prepare your infrastructure for the Ingress Controller setup, which is performed later during the installation process: Make sure that your network resources are correctly tagged, and create the following required tags if they are missing: Resource Type Key = Value VPC kubernetes.io/cluster/codacy-cluster = shared Subnet (public) kubernetes.io/cluster/codacy-cluster = shared kubernetes.io/role/elb = 1 Subnet (private) kubernetes.io/cluster/codacy-cluster = shared kubernetes.io/role/internal-elb = 1 For more information refer to the AWS documentation . Add the following chart repositories to Helm: helm repo add stable https://charts.helm.sh/stable helm repo update","title":"4. Prepare to set up the Ingress Controller"},{"location":"chart/infrastructure/eks-quickstart/#5-install-the-nginx-ingress-controller","text":"Install the NGINX Ingress Controller: Download the configuration file values-nginx.yaml for the NGINX Ingress Controller. If you wish to use a private load balancer or restrict the IP range for the provisioned load balancer edit the file and enable the required annotation and/or the corresponding setting where indicated. Install the NGINX Ingress Controller: kubectl create namespace codacy helm upgrade --install --namespace codacy --version 1 .39.0 codacy-nginx-ingress stable/nginx-ingress -f values-nginx.yaml","title":"5. Install the NGINX Ingress Controller"},{"location":"chart/infrastructure/eks-quickstart/#uninstalling-the-amazon-eks-cluster","text":"Warning If you proceed beyond this point you'll permanently delete and break things. Delete the Kubernetes cluster. Run the following command in the main/ directory: terraform destroy This process takes around 10 minutes. Remove the Terraform backend. If you created the Terraform backend with the provided stack you can now safely delete it. The backend is purposely created with extra settings to prevent its accidental destruction. To destroy it cleanly you must first disable these settings by editing the file backend/state_and_lock.tf and following the instructions included in the comments. Afterwards, run the following command in the backend/ directory: terraform apply && terraform destroy Note that you first have to run terraform apply to update the settings, and only then will terraform destroy be able to destroy the backend.","title":"Uninstalling the Amazon EKS cluster"},{"location":"chart/infrastructure/microk8s-quickstart/","text":"Creating a MicroK8s cluster # Follow the instructions below to set up a MicroK8s instance from scratch, including all the necessary dependencies and configurations. MicroK8s is a lightweight, fully conformant, single-package Kubernetes developed by Canonical. The project is publicly available on GitHub . 1. Prepare your environment # Prepare your environment to set up the MicroK8s instance. You will need a machine running Ubuntu Server 18.04 LTS that: Is correctly provisioned with the resources described for MicroK8s in the system requirements Is able to establish a connection to the PostgreSQL instance described in the system requirements Make sure that you have Helm version 3.2.1 installed. The next steps assume that you're starting from a clean install of Ubuntu Server and require that you run commands on a local or remote command line session on the machine. 2. Installing MicroK8s # Install MicroK8s on the machine: Make sure that the package nfs-common is installed: sudo apt update && sudo apt install nfs-common -y Install MicroK8s from the 1.16/stable channel: sudo snap install microk8s --classic --channel = 1 .16/stable sudo usermod -a -G microk8s $USER sudo su - $USER Check that MicroK8s is running: microk8s.status --wait-ready 3. Configuring MicroK8s # Now that MicroK8s is running on the machine we can proceed to enabling the necessary addons: Configure MicroK8s to allow privileged containers: sudo mkdir -p /var/snap/microk8s/current/args sudo echo \"--allow-privileged=true\" >> /var/snap/microk8s/current/args/kube-apiserver microk8s.status --wait-ready Enable the following MicroK8s addons: microk8s.enable dns microk8s.status --wait-ready microk8s.enable storage microk8s.status --wait-ready microk8s.enable ingress microk8s.status --wait-ready Important Check the output of the commands to make sure that all the addons are enabled correctly. If by chance any of the addons fails to be enabled, re-execute the microk8s.enable command for that addon. Restart MicroK8s and its services to make sure that all configurations are working: microk8s.stop microk8s.start microk8s.status --wait-ready Export your kubeconfig so that Helm knows on which cluster to install the charts: microk8s.config > ~/.kube/config The addons are now enabled and the MicroK8s instance bootstrapped. However, we must wait for some MicroK8s pods to be ready, as failing to do so can result in the pods entering a CrashLoopBackoff state: microk8s.kubectl wait -n kube-system --for = condition = Ready pod -l k8s-app = kube-dns microk8s.kubectl wait -n kube-system --for = condition = Ready pod -l k8s-app = hostpath-provisioner # If the following command fails, you probably installed the wrong MicroK8s version microk8s.kubectl wait --all-namespaces --for = condition = Ready pod -l name = nginx-ingress-microk8s Verify that the MicroK8s configuration was successful: microk8s.status --wait-ready The output of the command should be the following: microk8s is running addons: knative: disabled jaeger: disabled fluentd: disabled gpu: disabled cilium: disabled storage: enabled registry: disabled rbac: disabled ingress: enabled dns: enabled metrics-server: disabled linkerd: disabled prometheus: disabled istio: disabled dashboard: disabled After these steps you have ensured that DNS, HTTP, and NGINX Ingress are enabled and working properly inside the MicroK8s instance. Notes on installing Codacy # You can now follow the generic Codacy installation instructions but please note the following: You must execute all kubectl commands as microk8s.kubectl commands instead. To simplify this, we suggest that you create an alias so that you can run the commands directly as provided on the instructions: alias kubectl = microk8s.kubectl When running the helm upgrade command that installs the Codacy chart, you will be instructed to also use the file values-microk8s.yaml that downsizes some component limits, making it easier to fit Codacy in the lightweight MicroK8s solution.","title":"Creating a MicroK8s cluster"},{"location":"chart/infrastructure/microk8s-quickstart/#creating-a-microk8s-cluster","text":"Follow the instructions below to set up a MicroK8s instance from scratch, including all the necessary dependencies and configurations. MicroK8s is a lightweight, fully conformant, single-package Kubernetes developed by Canonical. The project is publicly available on GitHub .","title":"Creating a MicroK8s cluster"},{"location":"chart/infrastructure/microk8s-quickstart/#1-prepare-your-environment","text":"Prepare your environment to set up the MicroK8s instance. You will need a machine running Ubuntu Server 18.04 LTS that: Is correctly provisioned with the resources described for MicroK8s in the system requirements Is able to establish a connection to the PostgreSQL instance described in the system requirements Make sure that you have Helm version 3.2.1 installed. The next steps assume that you're starting from a clean install of Ubuntu Server and require that you run commands on a local or remote command line session on the machine.","title":"1. Prepare your environment"},{"location":"chart/infrastructure/microk8s-quickstart/#2-installing-microk8s","text":"Install MicroK8s on the machine: Make sure that the package nfs-common is installed: sudo apt update && sudo apt install nfs-common -y Install MicroK8s from the 1.16/stable channel: sudo snap install microk8s --classic --channel = 1 .16/stable sudo usermod -a -G microk8s $USER sudo su - $USER Check that MicroK8s is running: microk8s.status --wait-ready","title":"2. Installing MicroK8s"},{"location":"chart/infrastructure/microk8s-quickstart/#3-configuring-microk8s","text":"Now that MicroK8s is running on the machine we can proceed to enabling the necessary addons: Configure MicroK8s to allow privileged containers: sudo mkdir -p /var/snap/microk8s/current/args sudo echo \"--allow-privileged=true\" >> /var/snap/microk8s/current/args/kube-apiserver microk8s.status --wait-ready Enable the following MicroK8s addons: microk8s.enable dns microk8s.status --wait-ready microk8s.enable storage microk8s.status --wait-ready microk8s.enable ingress microk8s.status --wait-ready Important Check the output of the commands to make sure that all the addons are enabled correctly. If by chance any of the addons fails to be enabled, re-execute the microk8s.enable command for that addon. Restart MicroK8s and its services to make sure that all configurations are working: microk8s.stop microk8s.start microk8s.status --wait-ready Export your kubeconfig so that Helm knows on which cluster to install the charts: microk8s.config > ~/.kube/config The addons are now enabled and the MicroK8s instance bootstrapped. However, we must wait for some MicroK8s pods to be ready, as failing to do so can result in the pods entering a CrashLoopBackoff state: microk8s.kubectl wait -n kube-system --for = condition = Ready pod -l k8s-app = kube-dns microk8s.kubectl wait -n kube-system --for = condition = Ready pod -l k8s-app = hostpath-provisioner # If the following command fails, you probably installed the wrong MicroK8s version microk8s.kubectl wait --all-namespaces --for = condition = Ready pod -l name = nginx-ingress-microk8s Verify that the MicroK8s configuration was successful: microk8s.status --wait-ready The output of the command should be the following: microk8s is running addons: knative: disabled jaeger: disabled fluentd: disabled gpu: disabled cilium: disabled storage: enabled registry: disabled rbac: disabled ingress: enabled dns: enabled metrics-server: disabled linkerd: disabled prometheus: disabled istio: disabled dashboard: disabled After these steps you have ensured that DNS, HTTP, and NGINX Ingress are enabled and working properly inside the MicroK8s instance.","title":"3. Configuring MicroK8s"},{"location":"chart/infrastructure/microk8s-quickstart/#notes-on-installing-codacy","text":"You can now follow the generic Codacy installation instructions but please note the following: You must execute all kubectl commands as microk8s.kubectl commands instead. To simplify this, we suggest that you create an alias so that you can run the commands directly as provided on the instructions: alias kubectl = microk8s.kubectl When running the helm upgrade command that installs the Codacy chart, you will be instructed to also use the file values-microk8s.yaml that downsizes some component limits, making it easier to fit Codacy in the lightweight MicroK8s solution.","title":"Notes on installing Codacy"},{"location":"chart/maintenance/database/","text":"Database migration guide # Migrating databases between pods is a straightforward process with 3 steps: Dump the databases to a dump file. Apply the dump file. Delete the dump file. You will have to dump all the following databases: accounts analysis filestore jobs metrics results Requirements # The following operations must be executed by a user which has elevated access ( SUPERUSER ) in the Postgres databases. Dumping your current data out of a running Postgres # You will need to know the following: $HOSTNAME - the hostname where the database is located. $DB_USER - the username with privileged access to the database that will perform the dump. $DB - the database that you would like to export. $DB_PASSWORD - the database password. pg_dump # The following command lets you extract a given database into a dump file: PGPASSWORD = $DB_PASSWORD pg_dump -h $SRC_HOSTNAME -p $SRC_HOSTPORT -U $DB_USER --clean -Fc $db > /tmp/ $db .dump This will dump the file with the .dump extension into the /tmp folder. For more information and additional options, please check the official documentation. pg_restore # To restore a database, you can run a pg_restore command to consume the dump file and replicate the data onto Postgres: PGPASSWORD = $DB_PASSWORD pg_restore -h $DEST_HOSTNAME -p $DEST_HOSTPORT -U $DB_USER -j 8 -d $db -n public --clean $db .dump With the custom format from pg_dump (by using -Fc ) we can now invoke pg_restore with multiple parallel jobs. This should make the restoration of the databases quicker, depending on which value you provide for the number of parallel jobs to execute. We provide a value of 8 parallel jobs in the example above ( -j 8 ). Note If you run into any problems while restoring, make sure that you have the database created in that Postgres instance (e.g. before restoring the jobs database the Postgres instance should have an empty database called jobs created there). For more information and additional options, please check the official documentation . Sample script # Assuming you have the same $DB_USER and $DB_PASSWORD , and that you want to migrate all the databases from the same hostname to the same destination hostname, you could migrate your databases with the following sample script: SRC_HOSTNAME = $1 SRC_HOSTPORT = $2 DEST_HOSTNAME = $3 DEST_HOSTPORT = $4 DB_USER = $5 DB_PASSWORD = $6 declare -a dbs =( accounts analysis filestore jobs metrics results ) for db in ${ dbs [@] } do PGPASSWORD = $DB_PASSWORD pg_dump -h $SRC_HOSTNAME -p $SRC_HOSTPORT -U $DB_USER --clean -Fc $db > /tmp/ $db .dump PGPASSWORD = $DB_PASSWORD pg_restore -h $DEST_HOSTNAME -p $DEST_HOSTPORT -U $DB_USER -d $db -n public --clean $db .dump done As an example, you could run the script as follows: migrateDBs.sh postgres\u2013instance1.us-east-1.rds.amazonaws.com 25060 postgres\u2013instance1.eu-west-1.rds.amazonaws.com 25060 super_user secret_password","title":"Database migration guide"},{"location":"chart/maintenance/database/#database-migration-guide","text":"Migrating databases between pods is a straightforward process with 3 steps: Dump the databases to a dump file. Apply the dump file. Delete the dump file. You will have to dump all the following databases: accounts analysis filestore jobs metrics results","title":"Database migration guide"},{"location":"chart/maintenance/database/#requirements","text":"The following operations must be executed by a user which has elevated access ( SUPERUSER ) in the Postgres databases.","title":"Requirements"},{"location":"chart/maintenance/database/#dumping-your-current-data-out-of-a-running-postgres","text":"You will need to know the following: $HOSTNAME - the hostname where the database is located. $DB_USER - the username with privileged access to the database that will perform the dump. $DB - the database that you would like to export. $DB_PASSWORD - the database password.","title":"Dumping your current data out of a running Postgres"},{"location":"chart/maintenance/database/#sample-script","text":"Assuming you have the same $DB_USER and $DB_PASSWORD , and that you want to migrate all the databases from the same hostname to the same destination hostname, you could migrate your databases with the following sample script: SRC_HOSTNAME = $1 SRC_HOSTPORT = $2 DEST_HOSTNAME = $3 DEST_HOSTPORT = $4 DB_USER = $5 DB_PASSWORD = $6 declare -a dbs =( accounts analysis filestore jobs metrics results ) for db in ${ dbs [@] } do PGPASSWORD = $DB_PASSWORD pg_dump -h $SRC_HOSTNAME -p $SRC_HOSTPORT -U $DB_USER --clean -Fc $db > /tmp/ $db .dump PGPASSWORD = $DB_PASSWORD pg_restore -h $DEST_HOSTNAME -p $DEST_HOSTPORT -U $DB_USER -d $db -n public --clean $db .dump done As an example, you could run the script as follows: migrateDBs.sh postgres\u2013instance1.us-east-1.rds.amazonaws.com 25060 postgres\u2013instance1.eu-west-1.rds.amazonaws.com 25060 super_user secret_password","title":"Sample script"},{"location":"chart/maintenance/license/","text":"Updating your Codacy license # Some changes to your Codacy plan require that you update your Codacy Self-hosted license with a new one provided by a Codacy representative: Edit the value of codacy-api.config.license in the values-production.yaml file that you used to install Codacy: codacy-api : config : license : <--- insert your Codacy license here ---> Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml","title":"Updating your Codacy license"},{"location":"chart/maintenance/license/#updating-your-codacy-license","text":"Some changes to your Codacy plan require that you update your Codacy Self-hosted license with a new one provided by a Codacy representative: Edit the value of codacy-api.config.license in the values-production.yaml file that you used to install Codacy: codacy-api : config : license : <--- insert your Codacy license here ---> Apply the new configuration by performing a Helm upgrade. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version 5 .1.0 \\ --values values-production.yaml \\ # --values values-microk8s.yaml","title":"Updating your Codacy license"},{"location":"chart/maintenance/uninstall/","text":"Uninstalling Codacy # To ensure a clean removal you should uninstall Codacy Self-hosted before destroying the cluster. To do so run: helm -n codacy uninstall codacy kubectl -n codacy delete --all pod & kubectl -n codacy delete --all pvc & kubectl -n codacy delete --all job & sleep 5 kubectl -n codacy patch pvc -p '{\"metadata\":{\"finalizers\":null}}' $( kubectl -n codacy get pvc -o jsonpath = '{.items[*].metadata.name}' ) sleep 5 kubectl -n codacy delete pod $( kubectl -n codacy get pod -o jsonpath = '{.items[*].metadata.name}' ) --force --grace-period = 0 kubectl -n codacy get pod & kubectl -n codacy get pvc & kubectl -n codacy get job & Note that the deletion of pvc s in the above command has to run in the background due to a cyclic dependency in one of the components. If you're unsure of the effects of these commands please run each of the bash subcommands and validate their output: echo \"PVCs to delete:\" kubectl get pvc -n codacy -o jsonpath = '{.items[*].metadata.name}' echo \"PODS to delete:\" kubectl get pods -n codacy -o jsonpath = '{.items[*].metadata.name}'","title":"Uninstalling Codacy"},{"location":"chart/maintenance/uninstall/#uninstalling-codacy","text":"To ensure a clean removal you should uninstall Codacy Self-hosted before destroying the cluster. To do so run: helm -n codacy uninstall codacy kubectl -n codacy delete --all pod & kubectl -n codacy delete --all pvc & kubectl -n codacy delete --all job & sleep 5 kubectl -n codacy patch pvc -p '{\"metadata\":{\"finalizers\":null}}' $( kubectl -n codacy get pvc -o jsonpath = '{.items[*].metadata.name}' ) sleep 5 kubectl -n codacy delete pod $( kubectl -n codacy get pod -o jsonpath = '{.items[*].metadata.name}' ) --force --grace-period = 0 kubectl -n codacy get pod & kubectl -n codacy get pvc & kubectl -n codacy get job & Note that the deletion of pvc s in the above command has to run in the background due to a cyclic dependency in one of the components. If you're unsure of the effects of these commands please run each of the bash subcommands and validate their output: echo \"PVCs to delete:\" kubectl get pvc -n codacy -o jsonpath = '{.items[*].metadata.name}' echo \"PODS to delete:\" kubectl get pods -n codacy -o jsonpath = '{.items[*].metadata.name}'","title":"Uninstalling Codacy"},{"location":"chart/maintenance/upgrade/","text":"Upgrading Codacy # To upgrade Codacy Self-hosted to the latest stable version: Check the release notes for all Codacy Self-hosted versions between your current version and the most recent version for breaking changes and follow the instructions provided carefully. Warning Failing to follow the steps to deal with breaking changes can cause the upgrade to fail or cause problems while Codacy is running. In particular, Codacy Self-hosted v5.0.0 drops the support for legacy manual organizations . Tip To see the version of your Codacy Self-hosted instance click your avatar on the top right-hand corner of any Codacy page: Store all your currently defined configuration values in a file: helm get values codacy \\ --namespace codacy \\ --output yaml > codacy.yaml Note If you installed Codacy on a Kubernetes namespace different from codacy , make sure that you adjust the namespace when executing the commands in this page. Review the values stored in the file codacy.yaml , making any changes if necessary. Perform the upgrade using the values stored in the file: helm repo update helm upgrade codacy codacy-stable/codacy \\ --version 5 .1.0 \\ --namespace codacy \\ --values codacy.yaml","title":"Upgrading Codacy"},{"location":"chart/maintenance/upgrade/#upgrading-codacy","text":"To upgrade Codacy Self-hosted to the latest stable version: Check the release notes for all Codacy Self-hosted versions between your current version and the most recent version for breaking changes and follow the instructions provided carefully. Warning Failing to follow the steps to deal with breaking changes can cause the upgrade to fail or cause problems while Codacy is running. In particular, Codacy Self-hosted v5.0.0 drops the support for legacy manual organizations . Tip To see the version of your Codacy Self-hosted instance click your avatar on the top right-hand corner of any Codacy page: Store all your currently defined configuration values in a file: helm get values codacy \\ --namespace codacy \\ --output yaml > codacy.yaml Note If you installed Codacy on a Kubernetes namespace different from codacy , make sure that you adjust the namespace when executing the commands in this page. Review the values stored in the file codacy.yaml , making any changes if necessary. Perform the upgrade using the values stored in the file: helm repo update helm upgrade codacy codacy-stable/codacy \\ --version 5 .1.0 \\ --namespace codacy \\ --values codacy.yaml","title":"Upgrading Codacy"},{"location":"chart/troubleshoot/k8s-cheatsheet/","text":"Kubernetes cheatsheet # Debugging using events # Important Always check the pods and deployment versions in the namespace to make sure you aren't debugging an issue in a version that's not the one you would expect Events are a great way to understand what's going on under the hood in a Kubernetes cluster. By looking at them you can see if probes are failing, and other important signals from your cluster. Get events for the whole namespace: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp Get error events: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp --field-selector type = Error Get warning events: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp --field-selector type = Warning Get events from a specific pod: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp --field-selector involvedObject.name = <POD-NAME> Helm # Check all the previous releases in your namespace: helm -n codacy history codacy Rollback to a specific revision: helm -n codacy rollback codacy <REVISION> Edit configmap # kubectl get configmaps and kubectl edit configmap <configmap-name> Restart deployment of daemonset # daemonsets # kubectl get daemonsets and kubectl rollout restart daemonset/<daemonset-name> deployment # kubectl get deployment and kubectl rollout restart deployment/<deployment-name> and kubectl rollout status deployment/<deployment-name> -w Read logs # daemonset with multiple containers # kubectl logs daemonset/<daemonset-name> <container-name> -f service # kubectl get svc and kubectl logs -l $( kubectl get svc/<service-name> -o = json | jq \".spec.selector\" | jq -r 'to_entries|map(\"\\(.key)=\\(.value|tostring)\")|.[]' | sed -e 'H;${x;s/\\n/,/g;s/^,//;p;};d' ) -f Open shell inside container # kubectl exec -it daemonset/<daemonset-name> -c <container-name> sh or kubectl exec -it deployment/<deployment-name> sh MicroK8s # Session Manager SSH # When using AWS Session Manager, to connect to the instance where you installed microk8s, since the CLI is very limited you will benefit from using these aliases: alias kubectl = 'sudo microk8s.kubectl -n <namespace-name>' alias helm = 'sudo helm'","title":"Kubernetes cheatsheet"},{"location":"chart/troubleshoot/k8s-cheatsheet/#kubernetes-cheatsheet","text":"","title":"Kubernetes cheatsheet"},{"location":"chart/troubleshoot/k8s-cheatsheet/#debugging-using-events","text":"Important Always check the pods and deployment versions in the namespace to make sure you aren't debugging an issue in a version that's not the one you would expect Events are a great way to understand what's going on under the hood in a Kubernetes cluster. By looking at them you can see if probes are failing, and other important signals from your cluster. Get events for the whole namespace: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp Get error events: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp --field-selector type = Error Get warning events: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp --field-selector type = Warning Get events from a specific pod: kubectl -n codacy get events --sort-by = .metadata.creationTimestamp --field-selector involvedObject.name = <POD-NAME>","title":"Debugging using events"},{"location":"chart/troubleshoot/k8s-cheatsheet/#helm","text":"Check all the previous releases in your namespace: helm -n codacy history codacy Rollback to a specific revision: helm -n codacy rollback codacy <REVISION>","title":"Helm"},{"location":"chart/troubleshoot/k8s-cheatsheet/#edit-configmap","text":"kubectl get configmaps and kubectl edit configmap <configmap-name>","title":"Edit configmap"},{"location":"chart/troubleshoot/k8s-cheatsheet/#restart-deployment-of-daemonset","text":"","title":"Restart deployment of daemonset"},{"location":"chart/troubleshoot/k8s-cheatsheet/#read-logs","text":"","title":"Read logs"},{"location":"chart/troubleshoot/k8s-cheatsheet/#open-shell-inside-container","text":"kubectl exec -it daemonset/<daemonset-name> -c <container-name> sh or kubectl exec -it deployment/<deployment-name> sh","title":"Open shell inside container"},{"location":"chart/troubleshoot/k8s-cheatsheet/#microk8s","text":"","title":"MicroK8s"},{"location":"chart/troubleshoot/logs-collect/","text":"Collecting logs for Support # To help troubleshoot issues, obtain the logs from your Codacy Self-hosted instance and send them to Codacy's Support: Run the following command on a machine with network access to the Codacy cluster, replacing <namespace> with the namespace in which Codacy was installed: bash < ( curl -fsSL https://raw.githubusercontent.com/codacy/chart/master/docs/troubleshoot/extract-codacy-logs.sh ) \\ -n <namespace> This will download the logs of the last 7 days as an archive file with the name codacy_logs_<timestamp>.zip . Tip You can also download the script extract-codacy-logs.sh to run it manually. Send the compressed logs to Codacy's support team at support@codacy.com for analysis. Note If the file is too big, please upload the file to either a cloud storage service such as Google Drive or to a file transfer service such as WeTransfer and send us the link to the file instead. Alternatively, to reduce the size of the compressed archive file, retrieve logs for a smaller number of days by replacing <days> with a number between 1 and 7: bash < ( curl -fsSL https://raw.githubusercontent.com/codacy/chart/master/docs/troubleshoot/extract-codacy-logs.sh ) \\ -n <namespace> -d <days>","title":"Collecting logs for Support"},{"location":"chart/troubleshoot/logs-collect/#collecting-logs-for-support","text":"To help troubleshoot issues, obtain the logs from your Codacy Self-hosted instance and send them to Codacy's Support: Run the following command on a machine with network access to the Codacy cluster, replacing <namespace> with the namespace in which Codacy was installed: bash < ( curl -fsSL https://raw.githubusercontent.com/codacy/chart/master/docs/troubleshoot/extract-codacy-logs.sh ) \\ -n <namespace> This will download the logs of the last 7 days as an archive file with the name codacy_logs_<timestamp>.zip . Tip You can also download the script extract-codacy-logs.sh to run it manually. Send the compressed logs to Codacy's support team at support@codacy.com for analysis. Note If the file is too big, please upload the file to either a cloud storage service such as Google Drive or to a file transfer service such as WeTransfer and send us the link to the file instead. Alternatively, to reduce the size of the compressed archive file, retrieve logs for a smaller number of days by replacing <days> with a number between 1 and 7: bash < ( curl -fsSL https://raw.githubusercontent.com/codacy/chart/master/docs/troubleshoot/extract-codacy-logs.sh ) \\ -n <namespace> -d <days>","title":"Collecting logs for Support"},{"location":"chart/troubleshoot/troubleshoot/","text":"Troubleshooting Codacy # This page includes information to help you troubleshoot issues that you may come across while installing, configuring, and operating Codacy Self-hosted. If the information provided on this page isn't enough to solve your issue, contact support@codacy.com providing: The description of the issue All the information that you were able to obtain while following these troubleshooting instructions The collected logs of your Codacy instance The version of your Codacy instance Tip To see the version of your Codacy Self-hosted instance click your avatar on the top right-hand corner of any Codacy page: Git provider integrations # The following sections help you troubleshoot the integration of Codacy with your Git provider. GitHub Cloud and GitHub Enterprise authentication # 404 error # While trying to authenticate on GitHub you get the following error message: This might mean that there is a mismatch in the Client ID that Codacy is using to authenticate on GitHub. To solve this issue: Make sure that the value of clientId in your values-production.yaml file is the same as the Client ID of the GitHub App that you created If the values were different, update your configuration and re-execute the helm upgrade command as described for GitHub Cloud or GitHub Enterprise If the error persists: Take note of the parameter client_id in the URL of the GitHub error page (for example, Iv1.0000000000000000 ) Check if the value of the parameter matches the value of the Client ID of your GitHub App GitLab Cloud and GitLab Enterprise authentication # Invalid redirect URI # While trying to authenticate on GitLab you get the following error message: This might mean that the redirect URIs are not correct in the GitLab application that Codacy is using to authenticate on GitLab. To solve this issue: Open the GitLab application that you created on GitLab Cloud or GitLab Enterprise Make sure that all the redirect URIs have the correct protocol for the Codacy instance endpoints, either http:// or https:// Make sure that all the redirect URIs have the full path with the correct case, since the field is case-sensitive If the error persists: Take note of the parameter redirect_uri in the URL of the GitLab error page (for example, https%3A%2F%2Fcodacy.example.com%2Flogin%2FGitLab or https%3A%2F%2Fcodacy.example.com%2Flogin%2FGitLabEnterprise ) Decode the value of the parameter using a tool such as urldecoder.com (for example, https://codacy.example.com/login/GitLab or https://codacy.example.com/login/GitLabEnterprise ) Check if the decoded value matches one of the redirect URIs of your GitLab application Unknown client # While trying to authenticate on GitLab you get the following error message: This might mean that there is a mismatch in the Application ID that Codacy is using to authenticate on GitLab. To solve this issue: Make sure that the value of clientId in your values-production.yaml file is the same as the Application ID of the GitLab Cloud or GitLab Enterprise application that you created If the values were different, update your configuration and re-execute the helm upgrade command as described for GitLab Cloud or GitLab Enterprise If the error persists: Take note of the parameter client_id in the URL of the GitLab error page (for example, cca35a2a1f9b9b516ac927d82947bd5149b0e57e922c9e5564ac092ea16a3ccd ) Check if the value of the parameter matches the value of the Application ID of your GitLab application Bitbucket Cloud authentication # Invalid client_id # While trying to authenticate on Bitbucket Cloud you get the following error message: This might mean that there is a mismatch in the OAuth consumer Client ID that Codacy is using to authenticate on Bitbucket Cloud. To solve this issue: Make sure that the value of key in your values-production.yaml file is the same as the Key of the Bitbucket OAuth consumer that you created If the values were different, update your configuration and re-execute the helm upgrade command as described for Bitbucket Cloud If the error persists: Take note of the parameter client_id in the URL of the Bitbucket Cloud error page (for example, r8QJDkkxj8unYfg4Bd ) Check if the value of the parameter matches the value of the Client ID of your Bitbucket OAuth consumer Codacy configuration # The following sections help you troubleshoot the Codacy configuration. Accessing the RabbitMQ dashboard # We use RabbitMQ for the internal message queue between our components. If you need to access the RabbitMQ dashboard: Create a port-forward from the rabbitmq pod to your local machine, replacing <namespace> with the namespace in which Codacy was installed: kubectl port-forward codacy-rabbitmq-ha-0 15672 :15672 --namespace = <namespace> Important If you're using MicroK8s use microk8s.kubectl instead of kubectl . Access the RabbitMQ dashboard on the address localhost:15672 , and log in with the configured RabbitMQ credentials. The default RabbitMQ credentials are the following: Username: rabbitmq-codacy Password: rabbitmq-codacy","title":"Troubleshooting Codacy"},{"location":"chart/troubleshoot/troubleshoot/#troubleshooting-codacy","text":"This page includes information to help you troubleshoot issues that you may come across while installing, configuring, and operating Codacy Self-hosted. If the information provided on this page isn't enough to solve your issue, contact support@codacy.com providing: The description of the issue All the information that you were able to obtain while following these troubleshooting instructions The collected logs of your Codacy instance The version of your Codacy instance Tip To see the version of your Codacy Self-hosted instance click your avatar on the top right-hand corner of any Codacy page:","title":"Troubleshooting Codacy"},{"location":"chart/troubleshoot/troubleshoot/#git-provider-integrations","text":"The following sections help you troubleshoot the integration of Codacy with your Git provider.","title":"Git provider integrations"},{"location":"chart/troubleshoot/troubleshoot/#codacy-configuration","text":"The following sections help you troubleshoot the Codacy configuration.","title":"Codacy configuration"},{"location":"codacy-api/api-tokens/","text":"API tokens # The Codacy API tokens allow you to: Authenticate when using the Codacy API Upload coverage data or upload the results of running local analysis to Codacy Codacy provides two types of API tokens: Account API tokens are defined at the Codacy user account level. Each account API token authorizes access to the same organizations and repositories as the owner of the account. Project API tokens are defined on individual repositories. Each project API token only authorizes access to the corresponding repository. The sections below provide detailed instructions on how to generate and revoke API tokens. Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. Generating and revoking account API tokens # You can create new account API tokens programmatically using the Codacy API or using the Codacy UI: Open your account, tab Access management . Click the button Create API token under Account API tokens . Tip You can create multiple account API tokens. This can be useful to have a more flexible control by revoking only a specific token. To revoke an account API token, click the \"X\" next to the token. After this, all applications or services using that token to access the Codacy API will fail to authenticate and will receive the reply {\"error\":\"not found\"} . Generating and revoking project API tokens # You can create new project API tokens programmatically using the Codacy API or using the Codacy UI: Open your repository Settings , tab Integrations . Click the button Add integration and add a Project API integration. Click the button Settings on the Project API integration and copy the project API token. Tip You can create multiple (up to 100) project API tokens per repository. This can be useful to have a more flexible control by revoking only a specific token. To revoke a project API token, click the trash can icon for the corresponding Project API integration. After this, all applications or services using that token to access the Codacy API will fail to authenticate and will receive the reply {\"error\":\"not found\"} . See also # Adding coverage to your repository Running local analysis Client-side tools Creating project API tokens programmatically","title":"API tokens"},{"location":"codacy-api/api-tokens/#api-tokens","text":"The Codacy API tokens allow you to: Authenticate when using the Codacy API Upload coverage data or upload the results of running local analysis to Codacy Codacy provides two types of API tokens: Account API tokens are defined at the Codacy user account level. Each account API token authorizes access to the same organizations and repositories as the owner of the account. Project API tokens are defined on individual repositories. Each project API token only authorizes access to the corresponding repository. The sections below provide detailed instructions on how to generate and revoke API tokens. Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this.","title":"API tokens"},{"location":"codacy-api/api-tokens/#account-api-tokens","text":"You can create new account API tokens programmatically using the Codacy API or using the Codacy UI: Open your account, tab Access management . Click the button Create API token under Account API tokens . Tip You can create multiple account API tokens. This can be useful to have a more flexible control by revoking only a specific token. To revoke an account API token, click the \"X\" next to the token. After this, all applications or services using that token to access the Codacy API will fail to authenticate and will receive the reply {\"error\":\"not found\"} .","title":"Generating and revoking account API tokens"},{"location":"codacy-api/api-tokens/#project-api-tokens","text":"You can create new project API tokens programmatically using the Codacy API or using the Codacy UI: Open your repository Settings , tab Integrations . Click the button Add integration and add a Project API integration. Click the button Settings on the Project API integration and copy the project API token. Tip You can create multiple (up to 100) project API tokens per repository. This can be useful to have a more flexible control by revoking only a specific token. To revoke a project API token, click the trash can icon for the corresponding Project API integration. After this, all applications or services using that token to access the Codacy API will fail to authenticate and will receive the reply {\"error\":\"not found\"} .","title":"Generating and revoking project API tokens"},{"location":"codacy-api/api-tokens/#see-also","text":"Adding coverage to your repository Running local analysis Client-side tools Creating project API tokens programmatically","title":"See also"},{"location":"codacy-api/using-the-codacy-api/","text":"Using the Codacy API # The Codacy API allows you to programmatically retrieve and analyze data from Codacy and perform a few configuration changes. Codacy supports two API versions but we strongly recommend using the new API v3 when possible since it's the version being actively developed: API v3 (recommended) API v2 Endpoint documentation https://api.codacy.com/api/api-docs https://api.codacy.com/swagger Base URL https://api.codacy.com/api/v3 https://api.codacy.com/ Overview Use the new endpoints to access and manipulate the following resources, among others: Analysis details, issue and ignored issue details, repository quality settings Account details and API token management Organization details and join request management People management Repository management and file details Tool and code pattern details Use the legacy endpoints to access and manipulate the following resources: Commit code quality details and deltas Project details and configurations, file code quality and issue details Important If you're using Codacy Self-hosted you must use your own Codacy instance domain name in the API URLs to access the endpoint documentation matching your Codacy Self-hosted version and to call the endpoints on your Codacy instance. For example, use the following URLs for the API v3 endpoint documentation and endpoints: https://<your Codacy instance domain name>/api/api-docs https://<your Codacy instance domain name>/api/v3 Authenticating requests to the Codacy API # Most API endpoints require that you authenticate using an API token. After obtaining the necessary tokens , include them in your request headers using the format api-token: <your account API token> or project-token: <your project API token> . Note Currently, all API v3 endpoints that require authentication must use account API tokens , while the API v2 endpoints require either account or project API tokens . For example, to make a request to an API v3 endpoint that requires an account API token: curl -X GET 'https://api.codacy.com/api/v3/user/organizations/gh' \\ -H 'api-token: <your account API token>' Or to make a request to an API v2 endpoint that requires a project API token: curl -X GET 'https://api.codacy.com/2.0/commit/da275c14ffab6e402dcc6009828067ffa44b7ee0' \\ -H 'project-token: <your project API token>' Using parameters in requests # Most API endpoints require that you specify parameters. For GET requests , specify parameters directly as path segments of the endpoint URLs. Some endpoints also accept optional query string parameters. For example, to call the endpoint getRepositoryWithAnalysis with the parameters: provider: gh remoteOrganizationName: codacy repositoryName: docs branch (query string): api-overview curl -X GET 'https://app.codacy.com/api/v3/analysis/organizations/gh/codacy/repositories/docs?branch=api-overview' \\ -H 'api-token: <your account API token>' For POST , PATCH , and DELETE requests , besides the parameters included in the URL you may also need to include a JSON body. For example, to call the endpoint searchRepositoryIssues specifying the issue levels Error and Warning in the body: curl -X POST 'https://app.codacy.com/api/v3/analysis/organizations/gh/codacy/repositories/docs/issues/search' \\ -H 'api-token: <your account API token>' \\ -H 'Content-Type: application/json' \\ -d '{\"levels\": [\"Error\", \"Warning\"]}' Using pagination # Endpoints that return lists containing a potential large number of results use cursor-based pagination to return the results in small batches: These endpoints return the results together with a pagination object that includes a cursor . To obtain the next page of results, call the endpoint again using the cursor from the previous response as a parameter. If the response doesn't include a cursor it means that the endpoint returned the last page of results. Use the parameter limit to configure the number of results that the endpoint returns in each page. The maximum limit is 1000 and the default is 100. Note To make sure that you receive all results when calling an endpoint with pagination, repeat the process above until the response doesn't include the cursor to obtain another page of results. For example, the following command requests the first 10 repositories in the Codacy GitHub organization: curl -X GET 'https://app.codacy.com/api/v3/organizations/gh/codacy/repositories?limit=10' -H 'api-token: <your account API token>' The response includes the first 10 results, as well as the cursor to obtain the next page of results: { \"data\" : [ ... ], \"pagination\" : { \"cursor\" : \"codacy_2\" , \"limit\" : 10 , \"total\" : 156 } } To obtain the next page of results, it's necessary to include the cursor from the previous page as a parameter: curl -X GET 'https://app.codacy.com/api/v3/organizations/gh/codacy/repositories?limit=10&cursor=codacy_2' -H 'api-token: <your account API token>' If you continue requesting more pages the endpoint will eventually return a pagination object that doens't include a cursor . This means that you've reached the last page of results: { \"data\" : [ ... ], \"pagination\" : { \"limit\" : 10 , \"total\" : 156 } }","title":"Using the Codacy API"},{"location":"codacy-api/using-the-codacy-api/#using-the-codacy-api","text":"The Codacy API allows you to programmatically retrieve and analyze data from Codacy and perform a few configuration changes. Codacy supports two API versions but we strongly recommend using the new API v3 when possible since it's the version being actively developed: API v3 (recommended) API v2 Endpoint documentation https://api.codacy.com/api/api-docs https://api.codacy.com/swagger Base URL https://api.codacy.com/api/v3 https://api.codacy.com/ Overview Use the new endpoints to access and manipulate the following resources, among others: Analysis details, issue and ignored issue details, repository quality settings Account details and API token management Organization details and join request management People management Repository management and file details Tool and code pattern details Use the legacy endpoints to access and manipulate the following resources: Commit code quality details and deltas Project details and configurations, file code quality and issue details Important If you're using Codacy Self-hosted you must use your own Codacy instance domain name in the API URLs to access the endpoint documentation matching your Codacy Self-hosted version and to call the endpoints on your Codacy instance. For example, use the following URLs for the API v3 endpoint documentation and endpoints: https://<your Codacy instance domain name>/api/api-docs https://<your Codacy instance domain name>/api/v3","title":"Using the Codacy API"},{"location":"codacy-api/using-the-codacy-api/#authenticating-requests-to-the-codacy-api","text":"Most API endpoints require that you authenticate using an API token. After obtaining the necessary tokens , include them in your request headers using the format api-token: <your account API token> or project-token: <your project API token> . Note Currently, all API v3 endpoints that require authentication must use account API tokens , while the API v2 endpoints require either account or project API tokens . For example, to make a request to an API v3 endpoint that requires an account API token: curl -X GET 'https://api.codacy.com/api/v3/user/organizations/gh' \\ -H 'api-token: <your account API token>' Or to make a request to an API v2 endpoint that requires a project API token: curl -X GET 'https://api.codacy.com/2.0/commit/da275c14ffab6e402dcc6009828067ffa44b7ee0' \\ -H 'project-token: <your project API token>'","title":"Authenticating requests to the Codacy API"},{"location":"codacy-api/using-the-codacy-api/#using-parameters-in-requests","text":"Most API endpoints require that you specify parameters. For GET requests , specify parameters directly as path segments of the endpoint URLs. Some endpoints also accept optional query string parameters. For example, to call the endpoint getRepositoryWithAnalysis with the parameters: provider: gh remoteOrganizationName: codacy repositoryName: docs branch (query string): api-overview curl -X GET 'https://app.codacy.com/api/v3/analysis/organizations/gh/codacy/repositories/docs?branch=api-overview' \\ -H 'api-token: <your account API token>' For POST , PATCH , and DELETE requests , besides the parameters included in the URL you may also need to include a JSON body. For example, to call the endpoint searchRepositoryIssues specifying the issue levels Error and Warning in the body: curl -X POST 'https://app.codacy.com/api/v3/analysis/organizations/gh/codacy/repositories/docs/issues/search' \\ -H 'api-token: <your account API token>' \\ -H 'Content-Type: application/json' \\ -d '{\"levels\": [\"Error\", \"Warning\"]}'","title":"Using parameters in requests"},{"location":"codacy-api/using-the-codacy-api/#using-pagination","text":"Endpoints that return lists containing a potential large number of results use cursor-based pagination to return the results in small batches: These endpoints return the results together with a pagination object that includes a cursor . To obtain the next page of results, call the endpoint again using the cursor from the previous response as a parameter. If the response doesn't include a cursor it means that the endpoint returned the last page of results. Use the parameter limit to configure the number of results that the endpoint returns in each page. The maximum limit is 1000 and the default is 100. Note To make sure that you receive all results when calling an endpoint with pagination, repeat the process above until the response doesn't include the cursor to obtain another page of results. For example, the following command requests the first 10 repositories in the Codacy GitHub organization: curl -X GET 'https://app.codacy.com/api/v3/organizations/gh/codacy/repositories?limit=10' -H 'api-token: <your account API token>' The response includes the first 10 results, as well as the cursor to obtain the next page of results: { \"data\" : [ ... ], \"pagination\" : { \"cursor\" : \"codacy_2\" , \"limit\" : 10 , \"total\" : 156 } } To obtain the next page of results, it's necessary to include the cursor from the previous page as a parameter: curl -X GET 'https://app.codacy.com/api/v3/organizations/gh/codacy/repositories?limit=10&cursor=codacy_2' -H 'api-token: <your account API token>' If you continue requesting more pages the endpoint will eventually return a pagination object that doens't include a cursor . This means that you've reached the last page of results: { \"data\" : [ ... ], \"pagination\" : { \"limit\" : 10 , \"total\" : 156 } }","title":"Using pagination"},{"location":"codacy-api/examples/adding-repositories-to-codacy-programmatically/","text":"Adding repositories to Codacy programmatically # There are scenarios where manually adding Git repositories on the Codacy UI is inconvenient or time-consuming. For example: You want to add all new repositories to Codacy when they're created on the Git provider You're adding a large number of repositories to Codacy, such as when initially adding all repositories in your Git provider organization To add repositories programmatically, use Codacy's API v3 endpoint addRepository by performing an HTTP POST request to /repositories , specifying the Git provider and the full path of the repository in the body of the request: curl -X POST https://app.codacy.com/api/v3/repositories \\ -H 'Content-Type: application/json' \\ -H 'api-token: <API_KEY>' \\ -d ' { \"provider\" : \"<GIT_PROVIDER>\" , \"repositoryFullPath\" : \"<REPOSITORY_FULL_PATH>\" } Substitute the placeholders with your own values: API_KEY: Account API token used to authenticate on the Codacy API. GIT_PROVIDER: Git provider hosting the repository, using one of the values in the table below. For example, gh for GitHub Cloud. Value Git provider gh GitHub Cloud ghe GitHub Enterprise gl GitLab Cloud gle GitLab Enterprise bb Bitbucket Cloud bbe Bitbucket Server REPOSITORY_FULL_PATH: Name of the organization and repository on the Git provider, using the format <organization>/<repository> . For example, codacy/docs . You must have admin permissions over the repository on the Git provider. Important If you're using GitLab you must specify the full group path and the repository using the format <group>/<subgroup-1>/.../<subgroup-N>/<repository> . Example: Adding all repositories in a GitHub organization # We provide an example Bash script that adds all repositories in a GitHub Cloud organization to Codacy. We suggest that you adapt the script to your specific scenario. Warning Since Codacy automatically analyzes new repositories, adding many repositories in a short time can cause delays in the analysis of other repositories depending on the size of the repositories, the sizing of the infrastructure, and the concurrent analysis configuration. For example: Repositories added Expected delay 1 to 10 Small 11 to 100 Considerable More than 100 Extreme To avoid these delays, we recommend that you add repositories in small batches or that you space out adding new repositories in time. The example script: Defines a GitHub personal access token , the GitHub organization name, and the account API token used to authenticate on the Codacy API. Calls the GitHub API to obtain the list of all repositories in the defined organization. Uses jq to return the value of full_name for each repository obtained in the JSON response. The full_name already includes the organization and repository names using the format <organization>/<repository> . For each repository, calls the Codacy API endpoint addRepository to add a new repository specifying gh as the Git provider and the value of full_name as the full path of the repository. Checks the HTTP status code obtained in the response and performs basic error handling. Pauses a few seconds between requests to the Codacy API to avoid rate limiting. #!/bin/bash GITHUB_AUTH_TOKEN = \"<your GitHub personal access token>\" GITHUB_ORG_NAME = \"<your GitHub organization name>\" CODACY_API_TOKEN = \"<your account API token>\" printf \"Obtaining all repositories in the $GITHUB_ORG_NAME organization\\n\" for repo in $( curl -s https://api.github.com/orgs/ $GITHUB_ORG_NAME /repos -H \"Authorization: Bearer $GITHUB_AUTH_TOKEN \" | jq -r '.[] | .full_name' ) ; do printf \"Adding $repo to Codacy\\n\" http_status = $( curl -X POST https://app.codacy.com/api/v3/repositories \\ -H \"Content-Type: application/json\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ -d '{\"provider\":\"gh\", \"repositoryFullPath\":\"' $repo '\"}' \\ -sSo /dev/null -w \"%{http_code}\" ) case \" $http_status \" in 200 ) printf \" $repo added successfully\\n\" ;; 401 ) printf \"Error: 401 Unauthorized, check the Codacy API token\\n\" break ;; 409 ) printf \"Error: 409 Conflict, $repo is already added to Codacy\\n\" ;; * ) printf \"Error: $http_status HTTP status code\\n\" break ;; esac sleep 10 # Wait 10 seconds done Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API. Besides this, the script doesn't consider paginated results obtained from the GitHub API. Learn how to use pagination on the GitHub API to ensure that you obtain all the repositories in your organization.","title":"Adding repositories to Codacy programmatically"},{"location":"codacy-api/examples/adding-repositories-to-codacy-programmatically/#adding-repositories-to-codacy-programmatically","text":"There are scenarios where manually adding Git repositories on the Codacy UI is inconvenient or time-consuming. For example: You want to add all new repositories to Codacy when they're created on the Git provider You're adding a large number of repositories to Codacy, such as when initially adding all repositories in your Git provider organization To add repositories programmatically, use Codacy's API v3 endpoint addRepository by performing an HTTP POST request to /repositories , specifying the Git provider and the full path of the repository in the body of the request: curl -X POST https://app.codacy.com/api/v3/repositories \\ -H 'Content-Type: application/json' \\ -H 'api-token: <API_KEY>' \\ -d ' { \"provider\" : \"<GIT_PROVIDER>\" , \"repositoryFullPath\" : \"<REPOSITORY_FULL_PATH>\" } Substitute the placeholders with your own values: API_KEY: Account API token used to authenticate on the Codacy API. GIT_PROVIDER: Git provider hosting the repository, using one of the values in the table below. For example, gh for GitHub Cloud. Value Git provider gh GitHub Cloud ghe GitHub Enterprise gl GitLab Cloud gle GitLab Enterprise bb Bitbucket Cloud bbe Bitbucket Server REPOSITORY_FULL_PATH: Name of the organization and repository on the Git provider, using the format <organization>/<repository> . For example, codacy/docs . You must have admin permissions over the repository on the Git provider. Important If you're using GitLab you must specify the full group path and the repository using the format <group>/<subgroup-1>/.../<subgroup-N>/<repository> .","title":"Adding repositories to Codacy programmatically"},{"location":"codacy-api/examples/adding-repositories-to-codacy-programmatically/#example-adding-all-repositories-in-a-github-organization","text":"We provide an example Bash script that adds all repositories in a GitHub Cloud organization to Codacy. We suggest that you adapt the script to your specific scenario. Warning Since Codacy automatically analyzes new repositories, adding many repositories in a short time can cause delays in the analysis of other repositories depending on the size of the repositories, the sizing of the infrastructure, and the concurrent analysis configuration. For example: Repositories added Expected delay 1 to 10 Small 11 to 100 Considerable More than 100 Extreme To avoid these delays, we recommend that you add repositories in small batches or that you space out adding new repositories in time. The example script: Defines a GitHub personal access token , the GitHub organization name, and the account API token used to authenticate on the Codacy API. Calls the GitHub API to obtain the list of all repositories in the defined organization. Uses jq to return the value of full_name for each repository obtained in the JSON response. The full_name already includes the organization and repository names using the format <organization>/<repository> . For each repository, calls the Codacy API endpoint addRepository to add a new repository specifying gh as the Git provider and the value of full_name as the full path of the repository. Checks the HTTP status code obtained in the response and performs basic error handling. Pauses a few seconds between requests to the Codacy API to avoid rate limiting. #!/bin/bash GITHUB_AUTH_TOKEN = \"<your GitHub personal access token>\" GITHUB_ORG_NAME = \"<your GitHub organization name>\" CODACY_API_TOKEN = \"<your account API token>\" printf \"Obtaining all repositories in the $GITHUB_ORG_NAME organization\\n\" for repo in $( curl -s https://api.github.com/orgs/ $GITHUB_ORG_NAME /repos -H \"Authorization: Bearer $GITHUB_AUTH_TOKEN \" | jq -r '.[] | .full_name' ) ; do printf \"Adding $repo to Codacy\\n\" http_status = $( curl -X POST https://app.codacy.com/api/v3/repositories \\ -H \"Content-Type: application/json\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ -d '{\"provider\":\"gh\", \"repositoryFullPath\":\"' $repo '\"}' \\ -sSo /dev/null -w \"%{http_code}\" ) case \" $http_status \" in 200 ) printf \" $repo added successfully\\n\" ;; 401 ) printf \"Error: 401 Unauthorized, check the Codacy API token\\n\" break ;; 409 ) printf \"Error: 409 Conflict, $repo is already added to Codacy\\n\" ;; * ) printf \"Error: $http_status HTTP status code\\n\" break ;; esac sleep 10 # Wait 10 seconds done Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API. Besides this, the script doesn't consider paginated results obtained from the GitHub API. Learn how to use pagination on the GitHub API to ensure that you obtain all the repositories in your organization.","title":"Example: Adding all repositories in a GitHub organization"},{"location":"codacy-api/examples/creating-project-api-tokens-programmatically/","text":"Creating project API tokens programmatically # To create new project API tokens for your Codacy repositories programmatically, use the Codacy API endpoint createRepositoryApiToken . For example, if you're setting up coverage for all your repositories and prefer not to use a single account API token that grants the same permissions as an administrator, you need to create an individual project API token for each repository. Example: Creating project API tokens for all repositories in an organization # This example creates new project API tokens for all the repositories in an organization and outputs a comma-separated list of repository names and corresponding token strings. The example script: Defines the account API token used to authenticate on the Codacy API, the Git provider, and the organization name. Calls the Codacy API endpoint listOrganizationRepositories to retrieve the list of repositories in the organization. Uses jq to select only the name of the repositories. Asks for confirmation from the user before making any changes. For each repository, calls the Codacy API endpoint createRepositoryApiToken to create a new project API token and uses jq to obtain only the created token string. Outputs a comma-separated list of the repository names and the corresponding new token strings. Pauses a few seconds between requests to the Codacy API to avoid rate limiting. #!/bin/bash CODACY_API_TOKEN = \"<your account API token>\" GIT_PROVIDER = \"<your Git provider>\" # gh, ghe, gl, gle, bb, or bbe ORGANIZATION = \"<your organization name>\" repositories = $( curl -sX GET \"https://app.codacy.com/api/v3/organizations/ $GIT_PROVIDER / $ORGANIZATION /repositories\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ | jq -r \".data[] | .name\" ) count = $( echo \" $repositories \" | wc -l ) read -p \"Create project tokens for $count repositories? (y/n) \" choice if [ \" $choice \" = \"y\" ] ; then echo \" $repositories \" | while read repository ; do echo -n \" $repository ,\" curl -sX POST \"https://app.codacy.com/api/v3/organizations/ $GIT_PROVIDER / $ORGANIZATION /repositories/ $repository /tokens\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ | jq -r \".data | .token\" sleep 2 # Wait 2 seconds done else echo \"No changes made.\" ; fi Example output: chart,<new project API token> docs,<new project API token> website,<new project API token> [...] Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API. See also # API tokens","title":"Creating project API tokens programmatically"},{"location":"codacy-api/examples/creating-project-api-tokens-programmatically/#creating-project-api-tokens-programmatically","text":"To create new project API tokens for your Codacy repositories programmatically, use the Codacy API endpoint createRepositoryApiToken . For example, if you're setting up coverage for all your repositories and prefer not to use a single account API token that grants the same permissions as an administrator, you need to create an individual project API token for each repository.","title":"Creating project API tokens programmatically"},{"location":"codacy-api/examples/creating-project-api-tokens-programmatically/#example-creating-project-api-tokens-for-all-repositories-in-an-organization","text":"This example creates new project API tokens for all the repositories in an organization and outputs a comma-separated list of repository names and corresponding token strings. The example script: Defines the account API token used to authenticate on the Codacy API, the Git provider, and the organization name. Calls the Codacy API endpoint listOrganizationRepositories to retrieve the list of repositories in the organization. Uses jq to select only the name of the repositories. Asks for confirmation from the user before making any changes. For each repository, calls the Codacy API endpoint createRepositoryApiToken to create a new project API token and uses jq to obtain only the created token string. Outputs a comma-separated list of the repository names and the corresponding new token strings. Pauses a few seconds between requests to the Codacy API to avoid rate limiting. #!/bin/bash CODACY_API_TOKEN = \"<your account API token>\" GIT_PROVIDER = \"<your Git provider>\" # gh, ghe, gl, gle, bb, or bbe ORGANIZATION = \"<your organization name>\" repositories = $( curl -sX GET \"https://app.codacy.com/api/v3/organizations/ $GIT_PROVIDER / $ORGANIZATION /repositories\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ | jq -r \".data[] | .name\" ) count = $( echo \" $repositories \" | wc -l ) read -p \"Create project tokens for $count repositories? (y/n) \" choice if [ \" $choice \" = \"y\" ] ; then echo \" $repositories \" | while read repository ; do echo -n \" $repository ,\" curl -sX POST \"https://app.codacy.com/api/v3/organizations/ $GIT_PROVIDER / $ORGANIZATION /repositories/ $repository /tokens\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ | jq -r \".data | .token\" sleep 2 # Wait 2 seconds done else echo \"No changes made.\" ; fi Example output: chart,<new project API token> docs,<new project API token> website,<new project API token> [...] Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API.","title":"Example: Creating project API tokens for all repositories in an organization"},{"location":"codacy-api/examples/creating-project-api-tokens-programmatically/#see-also","text":"API tokens","title":"See also"},{"location":"codacy-api/examples/obtaining-code-quality-metrics-for-files/","text":"Obtaining code quality metrics for files # To obtain the code quality information for your files in a flexible way, use the Codacy API endpoint listFiles . For example, if you're managing your source code using a monorepo strategy you may want to generate separate code quality reports for the subset of files that belong to each component or project in your repository. Example: Obtaining code quality metrics for a subdirectory of your repository # This example exports the grade, total issues, complexity, coverage, and duplication in CSV format for all files in the directory src/router of the GitHub repository codacy/website . The example script: Defines the account API token used to authenticate on the Codacy API. Calls the Codacy API endpoint listFiles to retrieve the code quality metrics, filtering the results by files that include src/router/ in the path. Uses jq to select only the necessary data fields and convert the results to the CSV format. CODACY_API_TOKEN = \"<your account API token>\" curl -X GET \"https://app.codacy.com/api/v3/organizations/gh/codacy/repositories/website/files?search=src/router/\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ | jq -r \".data[] | [.path, .gradeLetter, .totalIssues, .complexity, .coverage, .duplication] | @csv\" Example output: \"src/components/router/index.ts\",\"A\",0,8,70,0 \"src/components/router/Link.tsx\",\"A\",0,5,100,0 \"src/components/router/Redirect.tsx\",\"B\",0,2,14,0 \"src/components/router/routes/account.ts\",\"A\",0,0,100,0 [...] Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API.","title":"Obtaining code quality metrics for files"},{"location":"codacy-api/examples/obtaining-code-quality-metrics-for-files/#obtaining-code-quality-metrics-for-files","text":"To obtain the code quality information for your files in a flexible way, use the Codacy API endpoint listFiles . For example, if you're managing your source code using a monorepo strategy you may want to generate separate code quality reports for the subset of files that belong to each component or project in your repository.","title":"Obtaining code quality metrics for files"},{"location":"codacy-api/examples/obtaining-code-quality-metrics-for-files/#example-obtaining-code-quality-metrics-for-a-subdirectory-of-your-repository","text":"This example exports the grade, total issues, complexity, coverage, and duplication in CSV format for all files in the directory src/router of the GitHub repository codacy/website . The example script: Defines the account API token used to authenticate on the Codacy API. Calls the Codacy API endpoint listFiles to retrieve the code quality metrics, filtering the results by files that include src/router/ in the path. Uses jq to select only the necessary data fields and convert the results to the CSV format. CODACY_API_TOKEN = \"<your account API token>\" curl -X GET \"https://app.codacy.com/api/v3/organizations/gh/codacy/repositories/website/files?search=src/router/\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ | jq -r \".data[] | [.path, .gradeLetter, .totalIssues, .complexity, .coverage, .duplication] | @csv\" Example output: \"src/components/router/index.ts\",\"A\",0,8,70,0 \"src/components/router/Link.tsx\",\"A\",0,5,100,0 \"src/components/router/Redirect.tsx\",\"B\",0,2,14,0 \"src/components/router/routes/account.ts\",\"A\",0,0,100,0 [...] Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API.","title":"Example: Obtaining code quality metrics for a subdirectory of your repository"},{"location":"codacy-api/examples/obtaining-current-issues-in-repositories/","text":"Obtaining current issues in repositories # To obtain information about the current issues in your repositories in a flexible way, use the Codacy API endpoint searchRepositoryIssues . For example, you may want to generate a report that includes only issues that belong to specific categories (such as security issues), or that have a minimum severity level. Example: Obtaining security issues with level Error and Warning # This example exports the pattern ID, issue level, file path, and timestamp for all security issues that have the severity level Warning or Error in the GitHub repository codacy/website . The example script: Defines the account API token used to authenticate on the Codacy API. Calls the Codacy API endpoint searchRepositoryIssues to retrieve information about the issues, filtering the results by security issues with the relevant severity levels. Uses jq to select only the necessary data fields and convert the results to the CSV format. CODACY_API_TOKEN = \"<your account API token>\" curl -X POST \"https://app.codacy.com/api/v3/analysis/organizations/gh/codacy/repositories/website/issues/search\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d '{ \"levels\": [\"Error\", \"Warning\"], \"categories\": [\"Security\"] }' \\ | jq -r \".data[] | [.patternInfo.id, .patternInfo.level, .filePath, .commitInfo.timestamp] | @csv\" Example output: \"BundlerAudit_Insecure Dependency\",\"Error\",\"Gemfile.lock\",\"2021-06-16T11:46:24Z\" \"Custom_Scala_PredictableRandom\",\"Warning\",\"src/test/database/SpecsHelper.scala\",\"2021-05-21T16:20:15Z\" \"Custom_Scala_PlayUntrustedHttpRequestParameter\",\"Warning\",\"app/RedirectController.scala\",\"2021-04-26T15:06:33Z\" [...] Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API.","title":"Obtaining current issues in repositories"},{"location":"codacy-api/examples/obtaining-current-issues-in-repositories/#obtaining-current-issues-in-repositories","text":"To obtain information about the current issues in your repositories in a flexible way, use the Codacy API endpoint searchRepositoryIssues . For example, you may want to generate a report that includes only issues that belong to specific categories (such as security issues), or that have a minimum severity level.","title":"Obtaining current issues in repositories"},{"location":"codacy-api/examples/obtaining-current-issues-in-repositories/#example-obtaining-security-issues-with-level-error-and-warning","text":"This example exports the pattern ID, issue level, file path, and timestamp for all security issues that have the severity level Warning or Error in the GitHub repository codacy/website . The example script: Defines the account API token used to authenticate on the Codacy API. Calls the Codacy API endpoint searchRepositoryIssues to retrieve information about the issues, filtering the results by security issues with the relevant severity levels. Uses jq to select only the necessary data fields and convert the results to the CSV format. CODACY_API_TOKEN = \"<your account API token>\" curl -X POST \"https://app.codacy.com/api/v3/analysis/organizations/gh/codacy/repositories/website/issues/search\" \\ -H \"api-token: $CODACY_API_TOKEN \" \\ -H \"Content-Type: application/json\" \\ -d '{ \"levels\": [\"Error\", \"Warning\"], \"categories\": [\"Security\"] }' \\ | jq -r \".data[] | [.patternInfo.id, .patternInfo.level, .filePath, .commitInfo.timestamp] | @csv\" Example output: \"BundlerAudit_Insecure Dependency\",\"Error\",\"Gemfile.lock\",\"2021-06-16T11:46:24Z\" \"Custom_Scala_PredictableRandom\",\"Warning\",\"src/test/database/SpecsHelper.scala\",\"2021-05-21T16:20:15Z\" \"Custom_Scala_PlayUntrustedHttpRequestParameter\",\"Warning\",\"app/RedirectController.scala\",\"2021-04-26T15:06:33Z\" [...] Important For the sake of simplicity, the example doesn't consider paginated results obtained from the Codacy API. Learn how to use pagination to ensure that you process all results returned by the API.","title":"Example: Obtaining security issues with level Error and Warning"},{"location":"coverage-reporter/","text":"Adding coverage to your repository # Code coverage is a metric used to describe the degree to which the source code of a program is tested. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage. You can read more about the basics of code coverage on Codacy's blog. Complete these main steps to start monitoring the test coverage of your repositories on Codacy: Generating coverage reports Ensure that you're generating one of the test coverage report formats supported by Codacy on each push to your repository. Uploading coverage data to Codacy After each push to your repository, run the Codacy Coverage Reporter to parse your report file and upload the coverage data to Codacy. The next sections include detailed instructions on how to complete each step of the setup process. 1. Generating coverage reports # Before setting up Codacy to display code coverage metrics for your repository you must have tests and use tools to generate coverage reports for the languages in your repositories. There are many tools that you can use to generate coverage reports for the languages used in your repositories. The following table contains example coverage tools that generate reports in formats that Codacy supports: Language Example coverage tools Report files C# OpenCover opencover.xml (OpenCover) dotCover CLI dotcover.xml (dotCover detailedXML ) Go Golang Code Coverage Golang report files don't have a specific name. Because of this, later in the setup process you must follow specific instructions while submitting coverage to Codacy. Java JaCoCo jacoco*.xml (JaCoCo) Cobertura cobertura.xml (Cobertura) JavaScript Istanbul Poncho Mocha + Blanket.js lcov.info , lcov.dat , *.lcov (LCOV) PHP PHPUnit coverage-xml/index.xml (PHPUnit XML version <= 4) clover.xml (Clover) Python Coverage.py cobertura.xml (Cobertura) Ruby SimpleCov cobertura.xml (Cobertura) lcov.info , lcov.dat , *.lcov (LCOV) Scala sbt-jacoco jacoco*.xml (JaCoCo) scoverage cobertura.xml (Cobertura) Swift/Objective-C Xcode Code Coverage See below how to generate coverage reports with Xcode Submitting coverage from unsupported report formats # If you're generating a report format that Codacy doesn't support yet, contribute with a parser implementation yourself or use one of the community projects below to generate coverage reports in a supported format: SlatherOrg/slather : generate Cobertura reports from Xcode coverage reports: gem install slather slather coverage -x --output-directory <report-output-dir> --scheme <project-name> <project-name>.xcodeproj This will generate a file cobertura.xml inside the folder <report-output-dir> . dariodf/lcov_ex : generate LCOV reports for Elixir projects chrisgit/sfdx-plugins_apex_coverage_report : generate LCOV or Cobertura reports from Apex test coverage data danielpalme/ReportGenerator : convert between different report formats As a last resort, you can also send the coverage data directly by calling one of the following Codacy API endpoints: saveCoverage saveCoverageWithAccountToken 2. Uploading coverage data to Codacy # After having coverage reports set up for your repository, you must use Codacy Coverage Reporter to convert the reports to smaller JSON files and upload these files to Codacy. The recommended way to do this is using a CI/CD platform that automatically runs tests, generates coverage, and uses Codacy Coverage Reporter to upload the coverage report information for every push to your repository. Set up an API token to allow Codacy Coverage Reporter to authenticate on Codacy: If you're setting up coverage for one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up and automating coverage for multiple repositories , obtain an account API Token and set the following environment variables: CODACY_API_TOKEN: Your account API token. CODACY_ORGANIZATION_PROVIDER: Git provider hosting the repository. Must be one of gh , ghe , gl , gle , bb , or bbe to specify GitHub, GitHub Enterprise, GitLab, GitLab Enterprise, Bitbucket, or Bitbucket Enterprise, respectively. CODACY_USERNAME: Name of your organization on the Git provider, or your username on the Git provider if you're using a personal organization. CODACY_PROJECT_NAME: Name of the repository for which you're uploading the coverage information. export CODACY_API_TOKEN = <your account API token> export CODACY_ORGANIZATION_PROVIDER = <Git provider hosting the repository> export CODACY_USERNAME = <organization name or username on the Git provider> export CODACY_PROJECT_NAME = <repository name> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Run Codacy Coverage Reporter on the root of the locally checked out branch of your Git repository , specifying the relative path to the coverage report to upload: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report -r <coverage report file name> Important Check the console output to validate that the Codacy Coverage Reporter detected the correct commit UUID and successfully uploaded the coverage data to Codacy. If you need help, check the troubleshooting page for solutions to the most common setup issues. Be sure to also check the sections below for more advanced functionality while uploading the coverage data to Codacy. Tip The self-contained script get.sh automatically downloads and runs the most recent version of Codacy Coverage Reporter. See alternative ways of running Codacy Coverage Reporter for other ways of running Codacy Coverage Reporter, such as by installing the binary manually or using a GitHub Action or CircleCI Orb. Optionally, add a Codacy badge to the README of your repository to display the current code coverage. To validate that the coverage setup is complete, wait until your repository has at least two new commits and check that Codacy displays the coverage information on the last commit or in subsequent pull requests, either as a positive, negative, or no variation (represented by = ) of the coverage percentage: Follow these troubleshooting steps if Codacy doesn't display the coverage data for your commit or pull request (represented by - ). Uploading multiple coverage reports for the same language # If your test suite is split on different modules or runs in parallel, you must upload multiple coverage reports for the same language. To do this, specify multiple reports by repeating the flag -r . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ -l Java -r report1.xml -r report2.xml -r report3.xml You can also upload all your reports dynamically using the command find . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ -l Java $( find **/jacoco*.xml -printf '-r %p ' ) Note Alternatively, you can upload each report separately with the flag --partial and notify Codacy with the final command after uploading all reports. For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ --partial -l Java -r report1.xml bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ --partial -l Java -r report2.xml bash < ( curl -Ls https://coverage.codacy.com/get.sh ) final If you're sending reports for a language with the flag --partial , you should use the flag in all reports for that language to ensure the correct calculation of the coverage. Tip It might also be possible to merge the reports before uploading them to Codacy, since most coverage tools support merge/aggregation. For example, http://www.eclemma.org/jacoco/trunk/doc/merge-mojo.html . Uploading the same coverage report for multiple languages # If your test suite generates a single coverage report for more than one language, you must upload the same coverage report for each language. To do this, upload the same report multiple times, specifying each different language with the flag -l . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ -l Javascript -r report.xml bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ -l TypeScript -r report.xml Submitting coverage for Golang # Codacy can't automatically detect Golang coverage report files because they don't have specific file names. If you're uploading a Golang coverage report, you must also specify the report type: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ --force-coverage-parser go -r <coverage report file name> Submitting coverage for unsupported languages # If your language is not in the list of supported languages, you can still send coverage to Codacy. To do this, provide the correct language with the flag -l , together with --force-language . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ -l Kotlin --force-language -r <coverage report file name> See the list of languages that you can specify using the flag -l .","title":"Adding coverage to your repository"},{"location":"coverage-reporter/#adding-coverage-to-your-repository","text":"Code coverage is a metric used to describe the degree to which the source code of a program is tested. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage. You can read more about the basics of code coverage on Codacy's blog. Complete these main steps to start monitoring the test coverage of your repositories on Codacy: Generating coverage reports Ensure that you're generating one of the test coverage report formats supported by Codacy on each push to your repository. Uploading coverage data to Codacy After each push to your repository, run the Codacy Coverage Reporter to parse your report file and upload the coverage data to Codacy. The next sections include detailed instructions on how to complete each step of the setup process.","title":"Adding coverage to your repository"},{"location":"coverage-reporter/#generating-coverage","text":"Before setting up Codacy to display code coverage metrics for your repository you must have tests and use tools to generate coverage reports for the languages in your repositories. There are many tools that you can use to generate coverage reports for the languages used in your repositories. The following table contains example coverage tools that generate reports in formats that Codacy supports: Language Example coverage tools Report files C# OpenCover opencover.xml (OpenCover) dotCover CLI dotcover.xml (dotCover detailedXML ) Go Golang Code Coverage Golang report files don't have a specific name. Because of this, later in the setup process you must follow specific instructions while submitting coverage to Codacy. Java JaCoCo jacoco*.xml (JaCoCo) Cobertura cobertura.xml (Cobertura) JavaScript Istanbul Poncho Mocha + Blanket.js lcov.info , lcov.dat , *.lcov (LCOV) PHP PHPUnit coverage-xml/index.xml (PHPUnit XML version <= 4) clover.xml (Clover) Python Coverage.py cobertura.xml (Cobertura) Ruby SimpleCov cobertura.xml (Cobertura) lcov.info , lcov.dat , *.lcov (LCOV) Scala sbt-jacoco jacoco*.xml (JaCoCo) scoverage cobertura.xml (Cobertura) Swift/Objective-C Xcode Code Coverage See below how to generate coverage reports with Xcode","title":"1. Generating coverage reports"},{"location":"coverage-reporter/#uploading-coverage","text":"After having coverage reports set up for your repository, you must use Codacy Coverage Reporter to convert the reports to smaller JSON files and upload these files to Codacy. The recommended way to do this is using a CI/CD platform that automatically runs tests, generates coverage, and uses Codacy Coverage Reporter to upload the coverage report information for every push to your repository. Set up an API token to allow Codacy Coverage Reporter to authenticate on Codacy: If you're setting up coverage for one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up and automating coverage for multiple repositories , obtain an account API Token and set the following environment variables: CODACY_API_TOKEN: Your account API token. CODACY_ORGANIZATION_PROVIDER: Git provider hosting the repository. Must be one of gh , ghe , gl , gle , bb , or bbe to specify GitHub, GitHub Enterprise, GitLab, GitLab Enterprise, Bitbucket, or Bitbucket Enterprise, respectively. CODACY_USERNAME: Name of your organization on the Git provider, or your username on the Git provider if you're using a personal organization. CODACY_PROJECT_NAME: Name of the repository for which you're uploading the coverage information. export CODACY_API_TOKEN = <your account API token> export CODACY_ORGANIZATION_PROVIDER = <Git provider hosting the repository> export CODACY_USERNAME = <organization name or username on the Git provider> export CODACY_PROJECT_NAME = <repository name> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Run Codacy Coverage Reporter on the root of the locally checked out branch of your Git repository , specifying the relative path to the coverage report to upload: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report -r <coverage report file name> Important Check the console output to validate that the Codacy Coverage Reporter detected the correct commit UUID and successfully uploaded the coverage data to Codacy. If you need help, check the troubleshooting page for solutions to the most common setup issues. Be sure to also check the sections below for more advanced functionality while uploading the coverage data to Codacy. Tip The self-contained script get.sh automatically downloads and runs the most recent version of Codacy Coverage Reporter. See alternative ways of running Codacy Coverage Reporter for other ways of running Codacy Coverage Reporter, such as by installing the binary manually or using a GitHub Action or CircleCI Orb. Optionally, add a Codacy badge to the README of your repository to display the current code coverage. To validate that the coverage setup is complete, wait until your repository has at least two new commits and check that Codacy displays the coverage information on the last commit or in subsequent pull requests, either as a positive, negative, or no variation (represented by = ) of the coverage percentage: Follow these troubleshooting steps if Codacy doesn't display the coverage data for your commit or pull request (represented by - ).","title":"2. Uploading coverage data to Codacy"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/","text":"Alternative ways of running Coverage Reporter # The recommended way to run Codacy Coverage Reporter is using a self-contained script that automatically downloads and runs the most recent version of Codacy Coverage Reporter: On Ubuntu, run: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) On Alpine Linux, run: wget -qO - https://coverage.codacy.com/get.sh | sh The self-contained script can cache the binary. To avoid downloading the binary every time that the script runs, add one of the following directories to your CI cached folders: $HOME/.cache/codacy on Linux $HOME/Library/Caches/Codacy on Mac OS X To use a specific version of the Codacy Coverage Reporter, set the following environment variable to one of the released versions : export CODACY_REPORTER_VERSION = <version> Note Starting on version 13.0.0 the script automatically validates the checksum of the downloaded binary. To skip the checksum validation, define the following environment variable: export CODACY_REPORTER_SKIP_CHECKSUM = true The sections below provide details on alternative ways to run or install Codacy Coverage Reporter. Docker # You can use Docker to run Codacy Coverage Reporter: docker run -v $PWD :/code codacy/codacy-coverage-reporter:<version> report Manually downloading the binary # Linux amd64 # If you prefer, you can manually download and run the native codacy-coverage-reporter binary, either for the latest version or a specific one. You can use the scripts below to automatically check for the latest version of the binaries, download the binaries from either Codacy's public store or GitHub, and run them. Using Codacy's public S3: LATEST_VERSION = \" $( curl -Ls https://artifacts.codacy.com/bin/codacy-coverage-reporter/latest ) \" curl -Ls -o codacy-coverage-reporter \"https://artifacts.codacy.com/bin/codacy-coverage-reporter/ ${ LATEST_VERSION } /codacy-coverage-reporter-linux\" chmod +x codacy-coverage-reporter ./codacy-coverage-reporter report Using GitHub: curl -Ls -o codacy-coverage-reporter \" $( curl -Ls https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | contains(\"codacy-coverage-reporter-linux\"))) | .[0].browser_download_url' ) \" chmod +x codacy-coverage-reporter ./codacy-coverage-reporter report Java 8 # Use the Java 8 binary to run Codacy Coverage reporter on other platforms, such as Linux x86, macOS, Windows, etc. You can use the scripts below to automatically check for the latest version of the Java binaries, download the binaries from either Codacy's public store or GitHub, and run them. Using Codacy's public store: LATEST_VERSION = \" $( curl -Ls https://artifacts.codacy.com/bin/codacy-coverage-reporter/latest ) \" curl -Ls -o codacy-coverage-reporter-assembly.jar \"https://artifacts.codacy.com/bin/codacy-coverage-reporter/ ${ LATEST_VERSION } /codacy-coverage-reporter-assembly.jar\" java -jar codacy-coverage-reporter-assembly.jar report Using GitHub: curl -LS -o codacy-coverage-reporter-assembly.jar \" $( curl -LSs https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | endswith(\".jar\"))) | .[0].browser_download_url' ) \" java -jar codacy-coverage-reporter-assembly.jar report Validating the checksum of the binaries # You can use the checksums available for each release to validate the binaries that you download manually. You can use any tool of your choice to validate the checksum, as long as it uses the SHA512 algorithm. For example, run the commands below to download and validate the checksum for the 13.0.0 Linux binary. Note that the command sha512sum expects to find the binary on the same directory and with the original name codacy-coverage-reporter-linux . curl -Ls -O https://github.com/codacy/codacy-coverage-reporter/releases/download/13.0.0/codacy-coverage-reporter-linux.SHA512SUM sha512sum -c codacy-coverage-reporter-linux.SHA512SUM Building from source # If you are having any issues with your installation, you can also build the coverage reporter from source. Clone the Codacy Coverage Reporter repository: git clone https://github.com/codacy/codacy-coverage-reporter.git Run the command sbt assembly inside the local repository folder: cd codacy-coverage-reporter sbt assembly This will produce a file target/codacy-coverage-reporter-assembly-<version>.jar that you can run. Execute this .jar in the repository where you want to upload the coverage. For example: <path>/java-project$ java -jar ../codacy-coverage-reporter/target/codacy-coverage-reporter-assembly-<version>.jar report CircleCI orb # If you are using CircleCI to report coverage, you can use our orb codacy/coverage-reporter . GitHub Action # If you are using GitHub Actions to report coverage, you can use our GitHub Action codacy/codacy-coverage-reporter-action . Community supported alternatives # Maven plugin # Thanks to the amazing job of Gavin Mogan you can now send your coverage to Codacy using his Maven plugin halkeye/codacy-maven-plugin ! Be sure to follow the instructions on his repository. Travis CI # If you are using Travis CI to report coverage, update your file .travis.yml to include the following blocks: before_script : - bash <(curl -Ls https://coverage.codacy.com/get.sh) download after_success : - bash <(curl -Ls https://coverage.codacy.com/get.sh) Make sure that you also set your project or account API Token as an environment variable in your Travis CI job. Gradle task # A big shout-out to Tom Howard , who suggested a way to create a Gradle task . task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) { main = \"com.codacy.CodacyCoverageReporter\" classpath = configurations.codacy args = [ \"report\", \"-l\", \"Java\", \"-r\", \"${buildDir}/test-results/jacoco/${archivesBaseName}.xml\" ] } task (codacyDepsize) << { def size = 0; configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it } println \"Total dependencies size: ${Math.round(size * 100) / 100} Mb\" configurations .codacy .sort { -it.length() } .each { println \"${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb\" } } task (codacyLocs) << { configurations.codacy.each { String jarName = it println jarName } } The following Gradle task by Ramil Khamitov was based on the solution above. configurations { codacy } repositories { jcenter() } dependencies { codacy 'com.codacy:codacy-coverage-reporter:latest.release' } task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) { main = \"com.codacy.CodacyCoverageReporter\" classpath = configurations.codacy args = [ \"report\", \"-l\", \"Java\", \"-r\", \"${buildDir}/reports/jacoco/test/jacocoTestReport.xml\" ] }","title":"Alternative ways of running Coverage Reporter"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#alternative-ways-of-running-coverage-reporter","text":"The recommended way to run Codacy Coverage Reporter is using a self-contained script that automatically downloads and runs the most recent version of Codacy Coverage Reporter: On Ubuntu, run: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) On Alpine Linux, run: wget -qO - https://coverage.codacy.com/get.sh | sh The self-contained script can cache the binary. To avoid downloading the binary every time that the script runs, add one of the following directories to your CI cached folders: $HOME/.cache/codacy on Linux $HOME/Library/Caches/Codacy on Mac OS X To use a specific version of the Codacy Coverage Reporter, set the following environment variable to one of the released versions : export CODACY_REPORTER_VERSION = <version> Note Starting on version 13.0.0 the script automatically validates the checksum of the downloaded binary. To skip the checksum validation, define the following environment variable: export CODACY_REPORTER_SKIP_CHECKSUM = true The sections below provide details on alternative ways to run or install Codacy Coverage Reporter.","title":"Alternative ways of running Coverage Reporter"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#docker","text":"You can use Docker to run Codacy Coverage Reporter: docker run -v $PWD :/code codacy/codacy-coverage-reporter:<version> report","title":"Docker"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#manually-downloading-the-binary","text":"","title":"Manually downloading the binary"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#building-from-source","text":"If you are having any issues with your installation, you can also build the coverage reporter from source. Clone the Codacy Coverage Reporter repository: git clone https://github.com/codacy/codacy-coverage-reporter.git Run the command sbt assembly inside the local repository folder: cd codacy-coverage-reporter sbt assembly This will produce a file target/codacy-coverage-reporter-assembly-<version>.jar that you can run. Execute this .jar in the repository where you want to upload the coverage. For example: <path>/java-project$ java -jar ../codacy-coverage-reporter/target/codacy-coverage-reporter-assembly-<version>.jar report","title":"Building from source"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#circleci-orb","text":"If you are using CircleCI to report coverage, you can use our orb codacy/coverage-reporter .","title":"CircleCI orb"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#github-action","text":"If you are using GitHub Actions to report coverage, you can use our GitHub Action codacy/codacy-coverage-reporter-action .","title":"GitHub Action"},{"location":"coverage-reporter/alternative-ways-of-running-coverage-reporter/#community-supported-alternatives","text":"","title":"Community supported alternatives"},{"location":"coverage-reporter/troubleshooting-common-issues/","text":"Troubleshooting common issues # The sections below provide instructions or workarounds to overcome common issues while using Codacy Coverage Reporter. No coverage data is visible on the Codacy UI # If the Codacy Coverage Reporter correctly uploaded your coverage report but the coverage data doesn't show up on the Codacy UI, please validate the following: Make sure that the file paths included in your coverage reports are relative to the root directory of your repository. For example, src/index.js . Verify that the Codacy Coverage Reporter is uploading the coverage data for the correct commit in the correct branch . Commit SHA hash detection # The Codacy Coverage Reporter automatically detects the commit SHA hash to associate with the coverage data from the following CI/CD platforms: Appveyor Azure Pipelines Bitrise Buildkite Circle CI Codefresh Codeship Docker GitLab Greenhouse CI Heroku CI Jenkins Magnum CI Semaphore CI Shippable CI Solano CI TeamCity CI Travis CI Wercker CI If the Codacy Coverage Reporter fails to detect the current commit from the CI workflow context, it will use the current commit from the local Git repository instead. However, you can also force using a specific commit SHA hash with the flag --commit-uuid . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report \\ -r report.xml \\ --commit-uuid cd4d000083a744cf1617d46af4ec108b79e06bed Can't guess any report due to no matching # Codacy Coverage Reporter automatically searches for coverage reports matching the file name conventions for supported formats . However, if Codacy Coverage Reporter does not find your coverage report, you can explicitly define the report file name with the flag -r . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report -r <coverage report file name> Report generated an empty result while uploading C# coverage data # If you're using dotCover to generate coverage reports for your C# projects, you must use the dotCover detailedXML report format as follows: dotCover.exe cover ... --reportType = DetailedXml JsonParseException while uploading coverage data # If you're getting a com.fasterxml.jackson.core.JsonParseException error while uploading your coverage data to Codacy it means that your coverage report is too big and that Codacy Coverage Reporter hit a limit of 10 MB when uploading the coverage data to Codacy. There are some ways you can solve this: Split your coverage reports into smaller files and upload them to Codacy one at a time . If you're using dotCover to generate coverage reports for your C# projects , you should exclude xUnit files from the coverage analysis as follows: dotCover.exe cover ... /Filters = -:xunit* By default, dotCover includes xUnit files in the coverage analysis and this results in larger coverage reports. This filter helps ensure that the resulting coverage data does not exceed the size limit accepted by the Codacy API when uploading the results. MalformedInputException while parsing report # If you get a java.nio.charset.MalformedInputException when running the Codacy Coverage Reporter it means that the coverage report includes an unsupported character, perhaps on one of your source code file names. For maximum compatibility of your coverage reports with the Codacy Coverage Reporter, make sure that your coverage reports use UTF-8 encoding or remove any special characters from the reports. SubstrateSegfaultHandler caught signal 11 # If you're experiencing segmentation faults when uploading the coverage results due to oracle/graal#624 , execute the following command before running the reporter, as a workaround: echo \" $( dig +short api.codacy.com | tail -n1 ) api.codacy.com\" >> /etc/hosts coverage-xml/index.xml generated an empty result # If you're using PHPUnit version 5 or above to generate your coverage report, you must output the report using the Clover format. Codacy Coverage Reporter supports the PHPUnit XML format only for versions 4 and older. To change the output format replace the flag --coverage-xml <dir> with --coverage-clover <file> when executing phpunit . See PHPUnit command-line documentation for more information. Can't validate checksum # Starting on version 13.0.0 the get.sh script automatically validates the checksum of the downloaded Codacy Coverage Reporter binary. This requires having either the sha512sum or shasum command on the operating system where you're running the script. If you're getting this error while uploading your coverage data to Codacy, install the correct version of sha512sum or shasum for the operating system that you're using. You can also skip validating the checksum of the binary by defining the following environment variable, however, Codacy doesn't recommend this: export CODACY_REPORTER_SKIP_CHECKSUM = true","title":"Troubleshooting common issues"},{"location":"coverage-reporter/troubleshooting-common-issues/#troubleshooting-common-issues","text":"The sections below provide instructions or workarounds to overcome common issues while using Codacy Coverage Reporter.","title":"Troubleshooting common issues"},{"location":"coverage-reporter/troubleshooting-common-issues/#no-coverage-visible","text":"If the Codacy Coverage Reporter correctly uploaded your coverage report but the coverage data doesn't show up on the Codacy UI, please validate the following: Make sure that the file paths included in your coverage reports are relative to the root directory of your repository. For example, src/index.js . Verify that the Codacy Coverage Reporter is uploading the coverage data for the correct commit in the correct branch .","title":"No coverage data is visible on the Codacy UI"},{"location":"coverage-reporter/troubleshooting-common-issues/#cant-guess-any-report-due-to-no-matching","text":"Codacy Coverage Reporter automatically searches for coverage reports matching the file name conventions for supported formats . However, if Codacy Coverage Reporter does not find your coverage report, you can explicitly define the report file name with the flag -r . For example: bash < ( curl -Ls https://coverage.codacy.com/get.sh ) report -r <coverage report file name>","title":"Can't guess any report due to no matching"},{"location":"coverage-reporter/troubleshooting-common-issues/#detailedxml","text":"If you're using dotCover to generate coverage reports for your C# projects, you must use the dotCover detailedXML report format as follows: dotCover.exe cover ... --reportType = DetailedXml","title":"Report generated an empty result while uploading C# coverage data"},{"location":"coverage-reporter/troubleshooting-common-issues/#jsonparseexception-while-uploading-coverage-data","text":"If you're getting a com.fasterxml.jackson.core.JsonParseException error while uploading your coverage data to Codacy it means that your coverage report is too big and that Codacy Coverage Reporter hit a limit of 10 MB when uploading the coverage data to Codacy. There are some ways you can solve this: Split your coverage reports into smaller files and upload them to Codacy one at a time . If you're using dotCover to generate coverage reports for your C# projects , you should exclude xUnit files from the coverage analysis as follows: dotCover.exe cover ... /Filters = -:xunit* By default, dotCover includes xUnit files in the coverage analysis and this results in larger coverage reports. This filter helps ensure that the resulting coverage data does not exceed the size limit accepted by the Codacy API when uploading the results.","title":"JsonParseException while uploading coverage data"},{"location":"coverage-reporter/troubleshooting-common-issues/#malformedinputexception-while-parsing-report","text":"If you get a java.nio.charset.MalformedInputException when running the Codacy Coverage Reporter it means that the coverage report includes an unsupported character, perhaps on one of your source code file names. For maximum compatibility of your coverage reports with the Codacy Coverage Reporter, make sure that your coverage reports use UTF-8 encoding or remove any special characters from the reports.","title":"MalformedInputException while parsing report"},{"location":"coverage-reporter/troubleshooting-common-issues/#substratesegfaulthandler-caught-signal-11","text":"If you're experiencing segmentation faults when uploading the coverage results due to oracle/graal#624 , execute the following command before running the reporter, as a workaround: echo \" $( dig +short api.codacy.com | tail -n1 ) api.codacy.com\" >> /etc/hosts","title":"SubstrateSegfaultHandler caught signal 11"},{"location":"coverage-reporter/troubleshooting-common-issues/#coverage-xmlindexxml-generated-an-empty-result","text":"If you're using PHPUnit version 5 or above to generate your coverage report, you must output the report using the Clover format. Codacy Coverage Reporter supports the PHPUnit XML format only for versions 4 and older. To change the output format replace the flag --coverage-xml <dir> with --coverage-clover <file> when executing phpunit . See PHPUnit command-line documentation for more information.","title":"coverage-xml/index.xml generated an empty result"},{"location":"coverage-reporter/troubleshooting-common-issues/#checksum","text":"Starting on version 13.0.0 the get.sh script automatically validates the checksum of the downloaded Codacy Coverage Reporter binary. This requires having either the sha512sum or shasum command on the operating system where you're running the script. If you're getting this error while uploading your coverage data to Codacy, install the correct version of sha512sum or shasum for the operating system that you're using. You can also skip validating the checksum of the binary by defining the following environment variable, however, Codacy doesn't recommend this: export CODACY_REPORTER_SKIP_CHECKSUM = true","title":"Can't validate checksum"},{"location":"faq/code-analysis/does-codacy-check-for-dependencies/","text":"Does Codacy check for dependencies? # Codacy doesn't check for dependencies. Codacy performs static code analysis on the source code and checks for code style and security issues, duplication, complexity, and coverage. To learn more on how to extend analysis on your repositories, see Codacy's supported languages and tools .","title":"Does Codacy check for dependencies?"},{"location":"faq/code-analysis/does-codacy-check-for-dependencies/#does-codacy-check-for-dependencies","text":"Codacy doesn't check for dependencies. Codacy performs static code analysis on the source code and checks for code style and security issues, duplication, complexity, and coverage. To learn more on how to extend analysis on your repositories, see Codacy's supported languages and tools .","title":"Does Codacy check for dependencies?"},{"location":"faq/code-analysis/does-codacy-place-limits-on-the-code-analysis/","text":"Does Codacy place limits on the code analysis? # Codacy uses limits when performing the analysis of your repositories to ensure good performance levels and avoid degradation of service during peak load. The following table describes these limits and includes links to more information and workarounds, if available: Limit Value Rationale File size 150 KB Large source code files are typically generated by or dependent on a third-party, and could significantly delay the analysis. See Why is my file over 150 KB missing? File size for coverage reports 10 MB Codacy doesn't parse code coverage reports that are over the file size limit. See JsonParseException while uploading coverage data Number of files for duplication 5000 Some tools fail to calculate duplication or time out when analyzing a number of files above this number. See Why aren't duplication metrics being calculated? Number of issues per file and per tool 50 Codacy limits the number of issues returned on each file by individual tools as a safeguard against degradation of performance on large or unexpected use cases. This means that in some situations Codacy could report more issues after a push that includes fixes for the currently reported issues. Number of comments on the Git provider 25 Codacy limits the number of comments for reporting found issues on pull requests to avoid triggering too many notification emails and to guard against hitting API rate limits. If you believe that you may have hit any of these limits and need help to overcome them, please contact us at support@codacy.com .","title":"Does Codacy place limits on the code analysis?"},{"location":"faq/code-analysis/does-codacy-place-limits-on-the-code-analysis/#does-codacy-place-limits-on-the-code-analysis","text":"Codacy uses limits when performing the analysis of your repositories to ensure good performance levels and avoid degradation of service during peak load. The following table describes these limits and includes links to more information and workarounds, if available: Limit Value Rationale File size 150 KB Large source code files are typically generated by or dependent on a third-party, and could significantly delay the analysis. See Why is my file over 150 KB missing? File size for coverage reports 10 MB Codacy doesn't parse code coverage reports that are over the file size limit. See JsonParseException while uploading coverage data Number of files for duplication 5000 Some tools fail to calculate duplication or time out when analyzing a number of files above this number. See Why aren't duplication metrics being calculated? Number of issues per file and per tool 50 Codacy limits the number of issues returned on each file by individual tools as a safeguard against degradation of performance on large or unexpected use cases. This means that in some situations Codacy could report more issues after a push that includes fixes for the currently reported issues. Number of comments on the Git provider 25 Codacy limits the number of comments for reporting found issues on pull requests to avoid triggering too many notification emails and to guard against hitting API rate limits. If you believe that you may have hit any of these limits and need help to overcome them, please contact us at support@codacy.com .","title":"Does Codacy place limits on the code analysis?"},{"location":"faq/code-analysis/how-does-codacy-measure-complexity-in-my-repository/","text":"How does Codacy measure complexity in my repository? # Codacy uses cyclomatic complexity to identify complex files in your repository. Cyclomatic complexity is a software metric used to indicate the complexity of a program. It's a quantitative measure of the number of linearly independent paths through a program's source code. A complex file is a file with a complexity value bigger than the threshold defined on the repository quality settings . Code complexity is calculated based on the maximum number of complex methods in a file. In your Repository Dashboard you can see how complexity is evolving for your repository.","title":"How does Codacy measure complexity in my repository?"},{"location":"faq/code-analysis/how-does-codacy-measure-complexity-in-my-repository/#how-does-codacy-measure-complexity-in-my-repository","text":"Codacy uses cyclomatic complexity to identify complex files in your repository. Cyclomatic complexity is a software metric used to indicate the complexity of a program. It's a quantitative measure of the number of linearly independent paths through a program's source code. A complex file is a file with a complexity value bigger than the threshold defined on the repository quality settings . Code complexity is calculated based on the maximum number of complex methods in a file. In your Repository Dashboard you can see how complexity is evolving for your repository.","title":"How does Codacy measure complexity in my repository?"},{"location":"faq/code-analysis/how-long-does-it-take-for-my-repository-to-be-analyzed/","text":"How long does it take for my repository to be analyzed? # Codacy usually takes under 5 minutes to analyze your repository, however it may take longer as this depends on the size of your repository. Codacy relies on post-commit hooks sent by your Git provider to trigger the analysis after each push to the repository, so if your analysis is taking a lot of time to start check that the Post-Commit Hook integration for your repository is enabled .","title":"How long does it take for my repository to be analyzed?"},{"location":"faq/code-analysis/how-long-does-it-take-for-my-repository-to-be-analyzed/#how-long-does-it-take-for-my-repository-to-be-analyzed","text":"Codacy usually takes under 5 minutes to analyze your repository, however it may take longer as this depends on the size of your repository. Codacy relies on post-commit hooks sent by your Git provider to trigger the analysis after each push to the repository, so if your analysis is taking a lot of time to start check that the Post-Commit Hook integration for your repository is enabled .","title":"How long does it take for my repository to be analyzed?"},{"location":"faq/code-analysis/how-to-configure-php-codesniffer-coding-standards/","text":"How to configure PHP_CodeSniffer coding standards? # By default, Codacy uses the PHP_CodeSniffer configuration on the Code patterns page when analyzing your repositories. To enforce a specific PHP_CodeSniffer coding standard you must create a configuration file on the root of your repository that references one or more of the following coding standards: Default coding standards packaged together with PHP_CodeSniffer: https://github.com/squizlabs/PHP_CodeSniffer/tree/master/src/Standards Additional coding standards that Codacy packages on the PHP_CodeSniffer tool plugin. Check the repository the additional coding standards to learn how you can reference them in your configuration files: https://github.com/codacy/codacy-codesniffer/blob/master/composer.json For example, create a text file with the name .phpcs.xml to use the PSR12 coding standard but excluding the sniffs Generic.WhiteSpace.DisallowTabIndent and PSR12.Operators.OperatorSpacing : <?xml version=\"1.0\"?> <ruleset name= \"PHP_CodeSniffer\" > <description> PHP_CodeSniffer configuration </description> <rule ref= \"PSR12\" > <exclude name= \"Generic.WhiteSpace.DisallowTabIndent\" /> <exclude name= \"PSR12.Operators.OperatorSpacing\" /> </rule> </ruleset> See also # Check these external resources for more help on customizing your PHP_CodeSniffer configuration: PHP_CodeSniffer configuration file syntax PHP Coding Standard Generator","title":"How to configure PHP_CodeSniffer coding standards?"},{"location":"faq/code-analysis/how-to-configure-php-codesniffer-coding-standards/#how-to-configure-php_codesniffer-coding-standards","text":"By default, Codacy uses the PHP_CodeSniffer configuration on the Code patterns page when analyzing your repositories. To enforce a specific PHP_CodeSniffer coding standard you must create a configuration file on the root of your repository that references one or more of the following coding standards: Default coding standards packaged together with PHP_CodeSniffer: https://github.com/squizlabs/PHP_CodeSniffer/tree/master/src/Standards Additional coding standards that Codacy packages on the PHP_CodeSniffer tool plugin. Check the repository the additional coding standards to learn how you can reference them in your configuration files: https://github.com/codacy/codacy-codesniffer/blob/master/composer.json For example, create a text file with the name .phpcs.xml to use the PSR12 coding standard but excluding the sniffs Generic.WhiteSpace.DisallowTabIndent and PSR12.Operators.OperatorSpacing : <?xml version=\"1.0\"?> <ruleset name= \"PHP_CodeSniffer\" > <description> PHP_CodeSniffer configuration </description> <rule ref= \"PSR12\" > <exclude name= \"Generic.WhiteSpace.DisallowTabIndent\" /> <exclude name= \"PSR12.Operators.OperatorSpacing\" /> </rule> </ruleset>","title":"How to configure PHP_CodeSniffer coding standards?"},{"location":"faq/code-analysis/how-to-configure-php-codesniffer-coding-standards/#see-also","text":"Check these external resources for more help on customizing your PHP_CodeSniffer configuration: PHP_CodeSniffer configuration file syntax PHP Coding Standard Generator","title":"See also"},{"location":"faq/code-analysis/how-to-skip-an-analysis/","text":"How to skip an analysis? # By default, Codacy automatically analyzes a repository whenever you push changes. However, you can override this behavior by adding the tag [ci skip] or [skip ci] anywhere in the subject or body of the commit message. For example: git commit -a -m \"Add eslint-plugin-chai-expect version 1.1.1 [ci skip]\" If you later decide to analyze a skipped commit, you can override any skip tags by reanalyzing the commit . Note This feature isn't supported for pull requests.","title":"How to skip an analysis?"},{"location":"faq/code-analysis/how-to-skip-an-analysis/#how-to-skip-an-analysis","text":"By default, Codacy automatically analyzes a repository whenever you push changes. However, you can override this behavior by adding the tag [ci skip] or [skip ci] anywhere in the subject or body of the commit message. For example: git commit -a -m \"Add eslint-plugin-chai-expect version 1.1.1 [ci skip]\" If you later decide to analyze a skipped commit, you can override any skip tags by reanalyzing the commit . Note This feature isn't supported for pull requests.","title":"How to skip an analysis?"},{"location":"faq/general/how-can-i-change-or-cancel-my-plan/","text":"How can I change or cancel my plan? # You can change or cancel your Codacy plan at any time. If you choose to cancel your annual subscription before the conclusion of the 12 months, your account will continue to work for the remainder of the annual billing period. Codacy values feedback and we thank you in advance for letting us know the primary reason behind your decision to leave, whether budgetary constraints or missing deal-breaker functionality. If you're using Codacy Cloud # If you're using Codacy Cloud see how to change the plan and billing of your Codacy organization . Alternatively, delete your organization to remove all its repositories from Codacy and cancel your existing plan. Note If you're using GitHub Marketplace, make changes to your billing details or cancel your plan directly on your GitHub Billing page . To upgrade to the Pro plan click Choose plan , choose between monthly or yearly billing, and provide your payment and invoice details To make changes to your Pro plan or invoice details click Edit plan details or click Edit invoice details If you have any questions or need help with your account, please contact support@codacy.com . Accepting new people to your organization # On Codacy Cloud , organization owners control if team members need an approval before joining their organization. Codacy updates the billing automatically when new users join an organization. Note If you're using GitHub Marketplace, this configuration isn't available and team members must always wait for an organization owner to manually approve their requests to join the organization. Choose one of the following options in your organization Settings , page Plan and billing : Allow new people to join immediately: team members with access to the organization on the Git provider can join the organization on Codacy immediately. Review join requests from new people: when team members with access to the organization on the Git provider join the organization on Codacy, an organization owner must manually approve their requests to join on the page People . Team members that have already been invited to join the organization are automatically approved, and you can also skip the approval process for organization owners. If you're using Codacy Self-hosted # To help you understand how you're consuming your licensed Codacy seats, use codacy-usage-report to obtain details about the activity of the users in your Codacy Self-hosted instance. If you decide to cancel your plan, please contact support@codacy.com and we'll swiftly process the cancellation. See also # Changing your plan and billing","title":"How can I change or cancel my plan?"},{"location":"faq/general/how-can-i-change-or-cancel-my-plan/#how-can-i-change-or-cancel-my-plan","text":"You can change or cancel your Codacy plan at any time. If you choose to cancel your annual subscription before the conclusion of the 12 months, your account will continue to work for the remainder of the annual billing period. Codacy values feedback and we thank you in advance for letting us know the primary reason behind your decision to leave, whether budgetary constraints or missing deal-breaker functionality.","title":"How can I change or cancel my plan?"},{"location":"faq/general/how-can-i-change-or-cancel-my-plan/#if-youre-using-codacy-cloud","text":"If you're using Codacy Cloud see how to change the plan and billing of your Codacy organization . Alternatively, delete your organization to remove all its repositories from Codacy and cancel your existing plan. Note If you're using GitHub Marketplace, make changes to your billing details or cancel your plan directly on your GitHub Billing page . To upgrade to the Pro plan click Choose plan , choose between monthly or yearly billing, and provide your payment and invoice details To make changes to your Pro plan or invoice details click Edit plan details or click Edit invoice details If you have any questions or need help with your account, please contact support@codacy.com .","title":"If you're using Codacy Cloud"},{"location":"faq/general/how-can-i-change-or-cancel-my-plan/#accepting-new-people-to-your-organization","text":"On Codacy Cloud , organization owners control if team members need an approval before joining their organization. Codacy updates the billing automatically when new users join an organization. Note If you're using GitHub Marketplace, this configuration isn't available and team members must always wait for an organization owner to manually approve their requests to join the organization. Choose one of the following options in your organization Settings , page Plan and billing : Allow new people to join immediately: team members with access to the organization on the Git provider can join the organization on Codacy immediately. Review join requests from new people: when team members with access to the organization on the Git provider join the organization on Codacy, an organization owner must manually approve their requests to join on the page People . Team members that have already been invited to join the organization are automatically approved, and you can also skip the approval process for organization owners.","title":"Accepting new people to your organization"},{"location":"faq/general/how-can-i-change-or-cancel-my-plan/#if-youre-using-codacy-self-hosted","text":"To help you understand how you're consuming your licensed Codacy seats, use codacy-usage-report to obtain details about the activity of the users in your Codacy Self-hosted instance. If you decide to cancel your plan, please contact support@codacy.com and we'll swiftly process the cancellation.","title":"If you're using Codacy Self-hosted"},{"location":"faq/general/how-can-i-change-or-cancel-my-plan/#see-also","text":"Changing your plan and billing","title":"See also"},{"location":"faq/general/how-do-i-allowlist-codacy-cloud-on-my-git-provider/","text":"How do I allowlist Codacy Cloud on my Git provider? # This is a paid feature If you require an additional layer of security and control on your Git provider, you can configure an allowlist containing the specific IP addresses that are able to access your Git repositories and resources. To allowlist Codacy Cloud on your Git provider: Send an email to success@codacy.com or directly to your CSM asking us to enable static IP addresses for your organization. Note Enabling static IPs for an organization is a paid feature . After receiving a confirmation that static IP addresses are active for your Codacy Cloud organization, add the following IP addresses to the allowlist on your Git provider: 34.254.123.99 18.203.76.9 The following are the instructions on how to allow IP addresses to access resources on each Git provider: GitHub Cloud: Managing allowed IP addresses for your organization GitLab Cloud: Restrict group access by IP address Bitbucket Cloud: Allowlisting IP addresses","title":"How do I allowlist Codacy Cloud on my Git provider?"},{"location":"faq/general/how-do-i-allowlist-codacy-cloud-on-my-git-provider/#how-do-i-allowlist-codacy-cloud-on-my-git-provider","text":"This is a paid feature If you require an additional layer of security and control on your Git provider, you can configure an allowlist containing the specific IP addresses that are able to access your Git repositories and resources. To allowlist Codacy Cloud on your Git provider: Send an email to success@codacy.com or directly to your CSM asking us to enable static IP addresses for your organization. Note Enabling static IPs for an organization is a paid feature . After receiving a confirmation that static IP addresses are active for your Codacy Cloud organization, add the following IP addresses to the allowlist on your Git provider: 34.254.123.99 18.203.76.9 The following are the instructions on how to allow IP addresses to access resources on each Git provider: GitHub Cloud: Managing allowed IP addresses for your organization GitLab Cloud: Restrict group access by IP address Bitbucket Cloud: Allowlisting IP addresses","title":"How do I allowlist Codacy Cloud on my Git provider?"},{"location":"faq/general/how-do-i-change-my-email-address-on-codacy/","text":"How do I change my email address on Codacy? # Codacy will always pull email addresses from your current session in your Git provider. Your account email addresses are visible on your Emails page. If you need to make any changes to the emails showing on Codacy, you will need to change this directly in your Git provider. Once you have done that, please log out and back in to Codacy. If the changes are still not reflected on Codacy, go to your access management page and revoke the relevant Git provider or Google integration. After that, please log out and back in to Codacy with that provider. If you're still having trouble changing your email addresses or have any other questions regarding this, please contact us at support@codacy.com . See also # Managing your email notifications","title":"How do I change my email address on Codacy?"},{"location":"faq/general/how-do-i-change-my-email-address-on-codacy/#how-do-i-change-my-email-address-on-codacy","text":"Codacy will always pull email addresses from your current session in your Git provider. Your account email addresses are visible on your Emails page. If you need to make any changes to the emails showing on Codacy, you will need to change this directly in your Git provider. Once you have done that, please log out and back in to Codacy. If the changes are still not reflected on Codacy, go to your access management page and revoke the relevant Git provider or Google integration. After that, please log out and back in to Codacy with that provider. If you're still having trouble changing your email addresses or have any other questions regarding this, please contact us at support@codacy.com .","title":"How do I change my email address on Codacy?"},{"location":"faq/general/how-do-i-change-my-email-address-on-codacy/#see-also","text":"Managing your email notifications","title":"See also"},{"location":"faq/general/how-does-codacy-keep-my-data-secure/","text":"How does Codacy keep my data secure? # Keeping our customers' data protected at all times is our highest priority. This security overview provides a high-level overview of the security practices put in place to achieve that objective. Have questions or feedback? Feel free to reach out to us at security@codacy.com .","title":"How does Codacy keep my data secure?"},{"location":"faq/general/how-does-codacy-keep-my-data-secure/#how-does-codacy-keep-my-data-secure","text":"Keeping our customers' data protected at all times is our highest priority. This security overview provides a high-level overview of the security practices put in place to achieve that objective. Have questions or feedback? Feel free to reach out to us at security@codacy.com .","title":"How does Codacy keep my data secure?"},{"location":"faq/general/how-does-codacy-protect-my-privacy/","text":"How does Codacy protect my privacy? # On the 25th of May 2018, the new \"General Data Protection Regulation\" ( GDPR ) will come into effect. This regulation contains the most significant changes to European data privacy legislation in the last 20 years and gives you more control over your personal data and greater transparency on how it's used. At Codacy, keeping your personal data safe has always been a top priority and we look at GDPR as another opportunity for us to strengthen this commitment to you. We're changing our data processing policies, operations, activities, and documentation in anticipation of the upcoming GDPR and have updated our Privacy Policy to incorporate said changes and specifically reflect the new regulation. The updated policy takes effect immediately for all of Codacy's customers and users. Below are some change highlights: Transparency: We've reworded our privacy policy for better navigation and to make it easier to read. Our policy outlines the type of personal data we collect, how we collect and process the data, and for what purposes. It also explains how we store, transfer, and share personal data, and our data retention practices Control: Our policy now further explains the control you have over information about you and your online activities. At any time, you can request information, correction, deletion, or changes to your personal data or/and make changes yourself GDPR: We've included additional language to discuss rights for users located in the European Union (EU) If you have any questions on this, please email us at privacy@codacy.com or reach out through our live chat option.","title":"How does Codacy protect my privacy?"},{"location":"faq/general/how-does-codacy-protect-my-privacy/#how-does-codacy-protect-my-privacy","text":"On the 25th of May 2018, the new \"General Data Protection Regulation\" ( GDPR ) will come into effect. This regulation contains the most significant changes to European data privacy legislation in the last 20 years and gives you more control over your personal data and greater transparency on how it's used. At Codacy, keeping your personal data safe has always been a top priority and we look at GDPR as another opportunity for us to strengthen this commitment to you. We're changing our data processing policies, operations, activities, and documentation in anticipation of the upcoming GDPR and have updated our Privacy Policy to incorporate said changes and specifically reflect the new regulation. The updated policy takes effect immediately for all of Codacy's customers and users. Below are some change highlights: Transparency: We've reworded our privacy policy for better navigation and to make it easier to read. Our policy outlines the type of personal data we collect, how we collect and process the data, and for what purposes. It also explains how we store, transfer, and share personal data, and our data retention practices Control: Our policy now further explains the control you have over information about you and your online activities. At any time, you can request information, correction, deletion, or changes to your personal data or/and make changes yourself GDPR: We've included additional language to discuss rights for users located in the European Union (EU) If you have any questions on this, please email us at privacy@codacy.com or reach out through our live chat option.","title":"How does Codacy protect my privacy?"},{"location":"faq/general/how-does-codacy-support-bitbucket-cloud/","text":"How does Codacy support Bitbucket Cloud? # When you use Bitbucket Cloud to sign up or log into Codacy, the Bitbucket teams that you belong to will be available to be added as Organizations on Codacy. After adding a team: Codacy displays the list of all repositories in that team so that you can add them to Codacy as repositories to be analyzed The members of the team will be able to join or request to join Codacy If you have repositories that don't belong to any team, you can still add those on Codacy directly under My Repositories . Limitations # Currently, the integration between Codacy and Bitbucket Cloud has the following limitations: Users that are deleted from Bitbucket Cloud are not automatically removed from Codacy. These users must be manually removed from Codacy, namely to ensure that Codacy only bills seats corresponding to active users. Deleted teams and repositories are not automatically deleted from Codacy. However, you can manually delete the corresponding Organizations or repositories from Codacy. Renamed Team workspace IDs aren't automatically renamed on Codacy, causing Codacy to stop analyzing the repositories in those teams. You must click the button Synchronize in the settings of the corresponding Organization on Codacy to synchronize the workspace ID and resume the analysis of the repositories. Repositories that are moved between teams are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. Codacy only sends commit and pull request notification emails to the authors of the commits and pull requests. Codacy doesn't analyze pull requests submitted from forked repositories. See also # What are synced organizations","title":"How does Codacy support Bitbucket Cloud?"},{"location":"faq/general/how-does-codacy-support-bitbucket-cloud/#how-does-codacy-support-bitbucket-cloud","text":"When you use Bitbucket Cloud to sign up or log into Codacy, the Bitbucket teams that you belong to will be available to be added as Organizations on Codacy. After adding a team: Codacy displays the list of all repositories in that team so that you can add them to Codacy as repositories to be analyzed The members of the team will be able to join or request to join Codacy If you have repositories that don't belong to any team, you can still add those on Codacy directly under My Repositories .","title":"How does Codacy support Bitbucket Cloud?"},{"location":"faq/general/how-does-codacy-support-bitbucket-cloud/#limitations","text":"Currently, the integration between Codacy and Bitbucket Cloud has the following limitations: Users that are deleted from Bitbucket Cloud are not automatically removed from Codacy. These users must be manually removed from Codacy, namely to ensure that Codacy only bills seats corresponding to active users. Deleted teams and repositories are not automatically deleted from Codacy. However, you can manually delete the corresponding Organizations or repositories from Codacy. Renamed Team workspace IDs aren't automatically renamed on Codacy, causing Codacy to stop analyzing the repositories in those teams. You must click the button Synchronize in the settings of the corresponding Organization on Codacy to synchronize the workspace ID and resume the analysis of the repositories. Repositories that are moved between teams are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. Codacy only sends commit and pull request notification emails to the authors of the commits and pull requests. Codacy doesn't analyze pull requests submitted from forked repositories.","title":"Limitations"},{"location":"faq/general/how-does-codacy-support-bitbucket-cloud/#see-also","text":"What are synced organizations","title":"See also"},{"location":"faq/general/how-does-codacy-support-bitbucket-server/","text":"How does Codacy support Bitbucket Server? # When you use Bitbucket Server to sign up or log into Codacy, the Bitbucket projects that you belong to will be available to be added as Organizations on Codacy. After adding a project: Codacy displays the list of all repositories that you own in that project so that you can add them to Codacy as repositories to be analyzed The members of the project will be able to join or request to join Codacy Limitations # Currently, the integration between Codacy and Bitbucket Server has the following limitations: Users that are deleted from Bitbucket Server are not automatically removed from Codacy. These users must be manually removed from Codacy, namely to ensure that Codacy only bills seats corresponding to active users. Renamed project keys aren't automatically renamed on Codacy, causing Codacy to stop analyzing the repositories in those projects. You must click the button Synchronize in the settings of the corresponding Organization on Codacy to synchronize the project key and resume the analysis of the repositories. Deleted projects and repositories are not automatically deleted from Codacy. However, you can manually delete the corresponding Organizations or repositories from Codacy. Repositories that are moved between teams are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. Personal repositories are not supported. You can only add repositories to Codacy if they belong to a project. Codacy only sends commit and pull request notification emails to the authors of the commits and pull requests. The Repositories screen doesn't include the \"last updated\" timestamp for each repository. As such, the repositories are sorted alphabetically. Codacy doesn't analyze pull requests submitted from forked repositories. See also # What are synced organizations","title":"How does Codacy support Bitbucket Server?"},{"location":"faq/general/how-does-codacy-support-bitbucket-server/#how-does-codacy-support-bitbucket-server","text":"When you use Bitbucket Server to sign up or log into Codacy, the Bitbucket projects that you belong to will be available to be added as Organizations on Codacy. After adding a project: Codacy displays the list of all repositories that you own in that project so that you can add them to Codacy as repositories to be analyzed The members of the project will be able to join or request to join Codacy","title":"How does Codacy support Bitbucket Server?"},{"location":"faq/general/how-does-codacy-support-bitbucket-server/#limitations","text":"Currently, the integration between Codacy and Bitbucket Server has the following limitations: Users that are deleted from Bitbucket Server are not automatically removed from Codacy. These users must be manually removed from Codacy, namely to ensure that Codacy only bills seats corresponding to active users. Renamed project keys aren't automatically renamed on Codacy, causing Codacy to stop analyzing the repositories in those projects. You must click the button Synchronize in the settings of the corresponding Organization on Codacy to synchronize the project key and resume the analysis of the repositories. Deleted projects and repositories are not automatically deleted from Codacy. However, you can manually delete the corresponding Organizations or repositories from Codacy. Repositories that are moved between teams are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. Personal repositories are not supported. You can only add repositories to Codacy if they belong to a project. Codacy only sends commit and pull request notification emails to the authors of the commits and pull requests. The Repositories screen doesn't include the \"last updated\" timestamp for each repository. As such, the repositories are sorted alphabetically. Codacy doesn't analyze pull requests submitted from forked repositories.","title":"Limitations"},{"location":"faq/general/how-does-codacy-support-bitbucket-server/#see-also","text":"What are synced organizations","title":"See also"},{"location":"faq/general/how-does-codacy-support-gitlab-cloud/","text":"How does Codacy support GitLab Cloud? # When you use GitLab Cloud to sign up or log into Codacy, the GitLab Groups that you belong to will be available to be added as Organizations on Codacy. After adding a Group: Codacy displays the list of all repositories that you own in that Group and Subgroups so that you can add them to Codacy as repositories to be analyzed The members of the Group will be able to join or request to join Codacy If you have repositories that don't belong to any Group, you can still add those on Codacy by choosing your \"personal\" organization . Limitations # Currently, the integration between Codacy and GitLab Cloud has the following limitations: Users that are deleted from GitLab are not automatically removed from Codacy. These users must be manually removed from Codacy, namely to ensure that Codacy only bills seats corresponding to active users. Renamed Group paths aren't automatically renamed on Codacy, causing Codacy to stop analyzing the repositories in those groups. You must click the button Synchronize in the settings of the corresponding Organization on Codacy to synchronize the Group path and resume the analysis of the repositories. Deleted Groups are not automatically deleted from Codacy. However, you can manually delete the corresponding Organizations from Codacy. Repositories that are moved between Groups are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. It is not possible to add repositories with the same name to the Codacy organization. Repositories having the same name but belonging to different GitLab Subgroups would collide if they were added to the same Codacy organization. See also # What are synced organizations","title":"How does Codacy support GitLab Cloud?"},{"location":"faq/general/how-does-codacy-support-gitlab-cloud/#how-does-codacy-support-gitlab-cloud","text":"When you use GitLab Cloud to sign up or log into Codacy, the GitLab Groups that you belong to will be available to be added as Organizations on Codacy. After adding a Group: Codacy displays the list of all repositories that you own in that Group and Subgroups so that you can add them to Codacy as repositories to be analyzed The members of the Group will be able to join or request to join Codacy If you have repositories that don't belong to any Group, you can still add those on Codacy by choosing your \"personal\" organization .","title":"How does Codacy support GitLab Cloud?"},{"location":"faq/general/how-does-codacy-support-gitlab-cloud/#limitations","text":"Currently, the integration between Codacy and GitLab Cloud has the following limitations: Users that are deleted from GitLab are not automatically removed from Codacy. These users must be manually removed from Codacy, namely to ensure that Codacy only bills seats corresponding to active users. Renamed Group paths aren't automatically renamed on Codacy, causing Codacy to stop analyzing the repositories in those groups. You must click the button Synchronize in the settings of the corresponding Organization on Codacy to synchronize the Group path and resume the analysis of the repositories. Deleted Groups are not automatically deleted from Codacy. However, you can manually delete the corresponding Organizations from Codacy. Repositories that are moved between Groups are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. It is not possible to add repositories with the same name to the Codacy organization. Repositories having the same name but belonging to different GitLab Subgroups would collide if they were added to the same Codacy organization.","title":"Limitations"},{"location":"faq/general/how-does-codacy-support-gitlab-cloud/#see-also","text":"What are synced organizations","title":"See also"},{"location":"faq/general/how-does-codacy-support-gitlab-enterprise/","text":"How does Codacy support GitLab Enterprise? # When you use GitLab Enterprise to sign up or log into Codacy, the GitLab Groups that you belong to will be available to be added as Organizations on Codacy. After adding a Group: Codacy displays the list of all repositories that you own in that Group and Subgroups so that you can add them to Codacy as repositories to be analyzed The members of the Group will be able to join or request to join Codacy If you have repositories that don't belong to any Group, you can still add those on Codacy by choosing your \"personal\" organization . Limitations # Currently, the integration between Codacy and GitLab Enterprise has the following limitations: Repositories that are moved between Groups are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. It is not possible to add repositories with the same name to the Codacy organization. Repositories having the same name but belonging to different GitLab Subgroups would collide if they were added to the same Codacy organization. See also # What are synced organizations","title":"How does Codacy support GitLab Enterprise?"},{"location":"faq/general/how-does-codacy-support-gitlab-enterprise/#how-does-codacy-support-gitlab-enterprise","text":"When you use GitLab Enterprise to sign up or log into Codacy, the GitLab Groups that you belong to will be available to be added as Organizations on Codacy. After adding a Group: Codacy displays the list of all repositories that you own in that Group and Subgroups so that you can add them to Codacy as repositories to be analyzed The members of the Group will be able to join or request to join Codacy If you have repositories that don't belong to any Group, you can still add those on Codacy by choosing your \"personal\" organization .","title":"How does Codacy support GitLab Enterprise?"},{"location":"faq/general/how-does-codacy-support-gitlab-enterprise/#limitations","text":"Currently, the integration between Codacy and GitLab Enterprise has the following limitations: Repositories that are moved between Groups are not automatically transferred between Organizations on Codacy. You must manually delete these repositories from their source Organization and add them to their new Organization. It is not possible to add repositories with the same name to the Codacy organization. Repositories having the same name but belonging to different GitLab Subgroups would collide if they were added to the same Codacy organization.","title":"Limitations"},{"location":"faq/general/how-does-codacy-support-gitlab-enterprise/#see-also","text":"What are synced organizations","title":"See also"},{"location":"faq/general/which-browsers-does-codacy-support/","text":"Which browsers does Codacy support? # Codacy runs on every modern browser supporting HTML5 and CSS3: Chrome 67+ Firefox 45+ Internet Explorer 11+ Microsoft Edge 13+","title":"Which browsers does Codacy support?"},{"location":"faq/general/which-browsers-does-codacy-support/#which-browsers-does-codacy-support","text":"Codacy runs on every modern browser supporting HTML5 and CSS3: Chrome 67+ Firefox 45+ Internet Explorer 11+ Microsoft Edge 13+","title":"Which browsers does Codacy support?"},{"location":"faq/general/which-version-control-systems-does-codacy-support/","text":"Which version control systems does Codacy support? # Codacy supports repositories from the following Git providers: Hosting model Name used on Codacy Required Codacy version GitHub GitHub.com GitHub Cloud Codacy Cloud or Codacy Self-hosted GitHub Enterprise Server version 2.20.3 or later GitHub Enterprise Codacy Self-hosted GitLab GitLab SaaS GitLab Cloud Codacy Cloud or Codacy Self-hosted GitLab Self-managed version 12.6.2-ee or later GitLab Enterprise Codacy Self-hosted Bitbucket Bitbucket Cloud Bitbucket Cloud Codacy Cloud or Codacy Self-hosted Bitbucket Data Center Bitbucket Server version 6.6.0 or later Bitbucket Server Codacy Self-hosted Note Although older versions of the self-hosted Git providers may work with Codacy without loss of functionality, Codacy will only fix issues and ensure compatibility with the versions listed above.","title":"Which version control systems does Codacy support?"},{"location":"faq/general/which-version-control-systems-does-codacy-support/#which-version-control-systems-does-codacy-support","text":"Codacy supports repositories from the following Git providers: Hosting model Name used on Codacy Required Codacy version GitHub GitHub.com GitHub Cloud Codacy Cloud or Codacy Self-hosted GitHub Enterprise Server version 2.20.3 or later GitHub Enterprise Codacy Self-hosted GitLab GitLab SaaS GitLab Cloud Codacy Cloud or Codacy Self-hosted GitLab Self-managed version 12.6.2-ee or later GitLab Enterprise Codacy Self-hosted Bitbucket Bitbucket Cloud Bitbucket Cloud Codacy Cloud or Codacy Self-hosted Bitbucket Data Center Bitbucket Server version 6.6.0 or later Bitbucket Server Codacy Self-hosted Note Although older versions of the self-hosted Git providers may work with Codacy without loss of functionality, Codacy will only fix issues and ensure compatibility with the versions listed above.","title":"Which version control systems does Codacy support?"},{"location":"faq/general/why-cant-i-see-my-organization/","text":"Why can't I see my organization? # If you don't see your organization when adding your organization on Codacy , try the following steps: Make sure you have access to the organization with the account you're logged in. If you're using GitHub Apps, install and authorize Codacy on your organization . Refresh the list of organizations on Codacy by clicking refresh this list on the Organizations page: Revoke Codacy's OAuth application on the Git provider website and log in again to Codacy. If these steps don't solve the issue, please contact us at support@codacy.com .","title":"Why can't I see my organization?"},{"location":"faq/general/why-cant-i-see-my-organization/#why-cant-i-see-my-organization","text":"If you don't see your organization when adding your organization on Codacy , try the following steps: Make sure you have access to the organization with the account you're logged in. If you're using GitHub Apps, install and authorize Codacy on your organization . Refresh the list of organizations on Codacy by clicking refresh this list on the Organizations page: Revoke Codacy's OAuth application on the Git provider website and log in again to Codacy. If these steps don't solve the issue, please contact us at support@codacy.com .","title":"Why can't I see my organization?"},{"location":"faq/repositories/how-do-i-reanalyze-my-repository/","text":"How do I reanalyze my repository? # To reflect the most recent configurations for your repository on the Codacy analysis results without waiting for a new commit to trigger the analysis, reanalyze the last commit in your branch or pull request. Important If you have the setting Run analysis on your build server enabled in your repository Settings page so that you can run client-side tools you can't trigger a new analysis from the Codacy UI. Instead, you must manually run the client-side tools or wait for them to report the results for a new commit. Reanalyzing a branch # To reanalyze a branch in your repository: Open the Commits page for your repository and select the correct branch at the top of the page if you configured Codacy to analyze multiple branches . Then, select the most recent commit for that branch at the top of the list: Click the icon next to the Current status of the commit to trigger a reanalysis. Codacy will display a message when the analysis is complete. Reanalyzing a pull request # To reanalyze a pull request in your repository: Open the Pull Requests page for your repository and select the pull request that you want to reanalyze. Click the icon next to the Current status of the pull request to trigger a reanalysis. Codacy will display a message when the analysis is complete.","title":"How do I reanalyze my repository?"},{"location":"faq/repositories/how-do-i-reanalyze-my-repository/#how-do-i-reanalyze-my-repository","text":"To reflect the most recent configurations for your repository on the Codacy analysis results without waiting for a new commit to trigger the analysis, reanalyze the last commit in your branch or pull request. Important If you have the setting Run analysis on your build server enabled in your repository Settings page so that you can run client-side tools you can't trigger a new analysis from the Codacy UI. Instead, you must manually run the client-side tools or wait for them to report the results for a new commit.","title":"How do I reanalyze my repository?"},{"location":"faq/repositories/how-do-i-reanalyze-my-repository/#reanalyzing-a-branch","text":"To reanalyze a branch in your repository: Open the Commits page for your repository and select the correct branch at the top of the page if you configured Codacy to analyze multiple branches . Then, select the most recent commit for that branch at the top of the list: Click the icon next to the Current status of the commit to trigger a reanalysis. Codacy will display a message when the analysis is complete.","title":"Reanalyzing a branch"},{"location":"faq/repositories/how-do-i-reanalyze-my-repository/#reanalyzing-a-pull-request","text":"To reanalyze a pull request in your repository: Open the Pull Requests page for your repository and select the pull request that you want to reanalyze. Click the icon next to the Current status of the pull request to trigger a reanalysis. Codacy will display a message when the analysis is complete.","title":"Reanalyzing a pull request"},{"location":"faq/repositories/how-do-i-set-codacy-as-a-required-check-to-merge-prs/","text":"How do I set Codacy as a required check to merge pull requests? # Codacy checks each pull request using your quality settings and sends a notification to the Git provider informing if the pull request is up to standards or not. Each Git provider has different options to set up notifications or block merging pull requests until they pass the Codacy check: GitHub # GitHub allows setting a status check as mandatory before merging pull requests. Important Make sure that you enable the option Pull Request Status on the GitHub integration. GitLab # GitLab allows setting that all pipelines must succeed before merging merge requests. Important Make sure that you enable the option Pull Request Status on the GitLab integration. Bitbucket # Bitbucket allows setting a minimum number of merge checks that must pass before merging pull requests. Important Make sure that you enable the option Pull Request Status on the Bitbucket integration.","title":"How do I set Codacy as a required check to merge pull requests?"},{"location":"faq/repositories/how-do-i-set-codacy-as-a-required-check-to-merge-prs/#how-do-i-set-codacy-as-a-required-check-to-merge-pull-requests","text":"Codacy checks each pull request using your quality settings and sends a notification to the Git provider informing if the pull request is up to standards or not. Each Git provider has different options to set up notifications or block merging pull requests until they pass the Codacy check:","title":"How do I set Codacy as a required check to merge pull requests?"},{"location":"faq/repositories/how-do-i-set-codacy-as-a-required-check-to-merge-prs/#github","text":"GitHub allows setting a status check as mandatory before merging pull requests. Important Make sure that you enable the option Pull Request Status on the GitHub integration.","title":"GitHub"},{"location":"faq/repositories/how-do-i-set-codacy-as-a-required-check-to-merge-prs/#gitlab","text":"GitLab allows setting that all pipelines must succeed before merging merge requests. Important Make sure that you enable the option Pull Request Status on the GitLab integration.","title":"GitLab"},{"location":"faq/repositories/how-do-i-set-codacy-as-a-required-check-to-merge-prs/#bitbucket","text":"Bitbucket allows setting a minimum number of merge checks that must pass before merging pull requests. Important Make sure that you enable the option Pull Request Status on the Bitbucket integration.","title":"Bitbucket"},{"location":"faq/repositories/i-moved-my-repository-on-the-git-provider/","text":"I moved my repository on the Git provider # Currently, Codacy doesn't automatically detect moves of repositories between two organizations. To ensure that Codacy continues to analyze a repository that was moved to another organization on your Git provider: Delete the repository from the original organization on Codacy, taking note of the settings for this repository Add the repository to the new organization on Codacy and reconfigure the repository with the same settings as the original one If you can't find your repository in the original Codacy organization or if you need more help with this process, please contact us at support@codacy.com .","title":"I moved my repository on the Git provider"},{"location":"faq/repositories/i-moved-my-repository-on-the-git-provider/#i-moved-my-repository-on-the-git-provider","text":"Currently, Codacy doesn't automatically detect moves of repositories between two organizations. To ensure that Codacy continues to analyze a repository that was moved to another organization on your Git provider: Delete the repository from the original organization on Codacy, taking note of the settings for this repository Add the repository to the new organization on Codacy and reconfigure the repository with the same settings as the original one If you can't find your repository in the original Codacy organization or if you need more help with this process, please contact us at support@codacy.com .","title":"I moved my repository on the Git provider"},{"location":"faq/repositories/i-renamed-my-repository-on-the-git-provider/","text":"I renamed my repository on the Git provider # If you changed the name or URL of your repository on your Git provider, you can update the name and URL of the repository on Codacy to point to the new location. This ensures that you won't lose historical data about your repository on Codacy. To rename your repository on Codacy, open the page Settings and click the button Update name .","title":"I renamed my repository on the Git provider"},{"location":"faq/repositories/i-renamed-my-repository-on-the-git-provider/#i-renamed-my-repository-on-the-git-provider","text":"If you changed the name or URL of your repository on your Git provider, you can update the name and URL of the repository on Codacy to point to the new location. This ensures that you won't lose historical data about your repository on Codacy. To rename your repository on Codacy, open the page Settings and click the button Update name .","title":"I renamed my repository on the Git provider"},{"location":"faq/repositories/what-are-the-different-grades-and-how-are-they-calculated/","text":"What are the different grades and how are they calculated? # 1. Overall Grade # Codacy gives an overall grade to help you better understand the quality of your repository. Grades range from A to F , A being the highest grade. Note the grading is performed on a branch level, to give a better understanding of the code quality on a branch basis. 2. Category Grades # Issue classification is as follows: Code Style Compatibility Error Prone Performance Security Unused Code Every issue impacts the grade of its category. Category grading ranges from 0% - 100%, 100% being the highest grade. 3. File Grades # File grades range from A to F , A being the highest grade. Grading every file occurs according to the weighted average of the following categories: issues clones complexity coverage (optional) 4. Grade Calculation # Codacy calculates grades based on the number of issues for every thousand lines of code (KLOC). Steve McConnell, in his book 'Code Complete,' wrote about average bugs per LOC: (a) Industry Average: \"about 15\u201350 errors per 1000 lines of delivered code.\" He further states this is usually representative of code that has some level of structured programming behind it but probably includes a mix of coding techniques.","title":"What are the different grades and how are they calculated?"},{"location":"faq/repositories/what-are-the-different-grades-and-how-are-they-calculated/#what-are-the-different-grades-and-how-are-they-calculated","text":"","title":"What are the different grades and how are they calculated?"},{"location":"faq/repositories/what-are-the-different-grades-and-how-are-they-calculated/#1-overall-grade","text":"Codacy gives an overall grade to help you better understand the quality of your repository. Grades range from A to F , A being the highest grade. Note the grading is performed on a branch level, to give a better understanding of the code quality on a branch basis.","title":"1. Overall Grade"},{"location":"faq/repositories/what-are-the-different-grades-and-how-are-they-calculated/#2-category-grades","text":"Issue classification is as follows: Code Style Compatibility Error Prone Performance Security Unused Code Every issue impacts the grade of its category. Category grading ranges from 0% - 100%, 100% being the highest grade.","title":"2. Category Grades"},{"location":"faq/repositories/what-are-the-different-grades-and-how-are-they-calculated/#3-file-grades","text":"File grades range from A to F , A being the highest grade. Grading every file occurs according to the weighted average of the following categories: issues clones complexity coverage (optional)","title":"3. File Grades"},{"location":"faq/repositories/what-are-the-different-grades-and-how-are-they-calculated/#4-grade-calculation","text":"Codacy calculates grades based on the number of issues for every thousand lines of code (KLOC). Steve McConnell, in his book 'Code Complete,' wrote about average bugs per LOC: (a) Industry Average: \"about 15\u201350 errors per 1000 lines of delivered code.\" He further states this is usually representative of code that has some level of structured programming behind it but probably includes a mix of coding techniques.","title":"4. Grade Calculation"},{"location":"faq/repositories/why-cant-i-see-or-add-my-organizations-repositories/","text":"Why can't I see or add my organization's repositories? # If you can't see or add your organization's repositories, or have any problems regarding metrics (for example, you can't see any issues and your pull requests aren't analyzed), please check if your user account has a duplicated copy of the repository on the organization. The ideal scenario for your organization's repositories is to have a unique copy of it added to your Codacy organization, by someone with write permissions on the repository. In case you have a duplicated repository on your account, please delete it and use only the one available in your organization. In the unlikely event of not seeing repositories for one or multiple organizations, please go to your GitHub settings and revoke the Codacy OAuth application. After revoking Codacy from the GitHub Authorized OAuth Apps, go back to Codacy and add a repository to see the Authorize Codacy menu. You may have to click GitHub on the sidebar to request Codacys's permission on GitHub's side. Click \"Grant\" on each organization, to see their repositories on Codacy. If this didn't solve your issue, be sure to also check out the following pages: I renamed my repository on the Git provider I moved my repository on the Git provider","title":"Why can't I see or add my organization's repositories?"},{"location":"faq/repositories/why-cant-i-see-or-add-my-organizations-repositories/#why-cant-i-see-or-add-my-organizations-repositories","text":"If you can't see or add your organization's repositories, or have any problems regarding metrics (for example, you can't see any issues and your pull requests aren't analyzed), please check if your user account has a duplicated copy of the repository on the organization. The ideal scenario for your organization's repositories is to have a unique copy of it added to your Codacy organization, by someone with write permissions on the repository. In case you have a duplicated repository on your account, please delete it and use only the one available in your organization. In the unlikely event of not seeing repositories for one or multiple organizations, please go to your GitHub settings and revoke the Codacy OAuth application. After revoking Codacy from the GitHub Authorized OAuth Apps, go back to Codacy and add a repository to see the Authorize Codacy menu. You may have to click GitHub on the sidebar to request Codacys's permission on GitHub's side. Click \"Grant\" on each organization, to see their repositories on Codacy. If this didn't solve your issue, be sure to also check out the following pages: I renamed my repository on the Git provider I moved my repository on the Git provider","title":"Why can't I see or add my organization's repositories?"},{"location":"faq/troubleshooting/error-line-endings/","text":"Error caused by incompatible line endings # Codacy executes the git diff command when analyzing new commits and pull requests to identify the lines of code that were changed. Codacy then uses this information to display the issues that were caused by the changes introduced by the commits or pull requests. If you have files in your repository that use the carriage return (CR) as the line end control character, the command git diff doesn't correctly identify line endings in the changed files. Because of this, Codacy is unable to use the output of the command and you'll see an error in the Diff step of your commit or pull request analysis logs: The CR line end control character was used by older Classic Mac OS systems, and for the sake of interoperability it's recommended that you: Find the files in your repository that include CR line endings. Tip On *nix operating systems including macOS, you can use the command file to detect files in your repository that use CR line endings. For example, run the following command on the root of your repository: find . -type f -exec file {} \\; | grep \"CR line\" Update the line endings in your source code files to use either the control characters: LF, if primarily using Unix-like systems such as Linux or the newer macOS operating system CRLF, if primarily using the Microsoft Windows operating system Tip This article on Wikipedia includes examples on how to convert the line endings in your files. After converting the line endings in your source code files, you may also want to check the following resources for help on standardizing the line endings on your repositories and how to configure Git to correctly handle line endings: What's the recommended way to store files in Git? Customizing Git - Formatting and Whitespace Configuring Git to handle line endings Mind the End of Your Line","title":"Error caused by incompatible line endings"},{"location":"faq/troubleshooting/error-line-endings/#error-caused-by-incompatible-line-endings","text":"Codacy executes the git diff command when analyzing new commits and pull requests to identify the lines of code that were changed. Codacy then uses this information to display the issues that were caused by the changes introduced by the commits or pull requests. If you have files in your repository that use the carriage return (CR) as the line end control character, the command git diff doesn't correctly identify line endings in the changed files. Because of this, Codacy is unable to use the output of the command and you'll see an error in the Diff step of your commit or pull request analysis logs: The CR line end control character was used by older Classic Mac OS systems, and for the sake of interoperability it's recommended that you: Find the files in your repository that include CR line endings. Tip On *nix operating systems including macOS, you can use the command file to detect files in your repository that use CR line endings. For example, run the following command on the root of your repository: find . -type f -exec file {} \\; | grep \"CR line\" Update the line endings in your source code files to use either the control characters: LF, if primarily using Unix-like systems such as Linux or the newer macOS operating system CRLF, if primarily using the Microsoft Windows operating system Tip This article on Wikipedia includes examples on how to convert the line endings in your files. After converting the line endings in your source code files, you may also want to check the following resources for help on standardizing the line endings on your repositories and how to configure Git to correctly handle line endings: What's the recommended way to store files in Git? Customizing Git - Formatting and Whitespace Configuring Git to handle line endings Mind the End of Your Line","title":"Error caused by incompatible line endings"},{"location":"faq/troubleshooting/not-a-member-of-the-organization/","text":"Not a member of the organization # This page applies only to Codacy Cloud When you see the message Not a member of the organization it means that Codacy Cloud can't analyze a commit because the associated email address doesn't belong to any Codacy user. You can check which email address is associated with a commit by hovering the cursor on the name of the contributor on the page for the commit: To verify which email addresses are associated with the Codacy Cloud account, the user must click on their avatar on the top right-hand corner, select Your account , and open the page Emails : There may be different reasons for this issue to happen: The user making the commit hasn't signed in to Codacy Cloud and joined the organization yet The user must join the organization or, if you're the organization owner, you can add the user instead. The commit email address isn't associated with the account of a Codacy Cloud user Codacy automatically associates the email addresses from the Git provider accounts to the Codacy accounts when users sign in to Codacy. Make sure that the user configures the missing email address on their Git provider account, and that the user logs in again on Codacy for the change to take effect. Git isn't configured with your correct email address Unless you explicitly configure your email address , Git automatically uses an email address based on the username and hostname of your workstation, and associates this email address with your commits. To check which email address your local Git installation is using, run the following command on your workstation: git config user.email If the returned email address isn't one of the email addresses associated with your Git provider account, configure Git to use one of those email addresses instead: git config --global user.email you@example.com Important Make sure that your email address doesn't include any extra characters such as quotes ( \"\" or '' ). See also # How do I change my email address on Codacy?","title":"Not a member of the organization"},{"location":"faq/troubleshooting/not-a-member-of-the-organization/#not-a-member-of-the-organization","text":"This page applies only to Codacy Cloud When you see the message Not a member of the organization it means that Codacy Cloud can't analyze a commit because the associated email address doesn't belong to any Codacy user. You can check which email address is associated with a commit by hovering the cursor on the name of the contributor on the page for the commit: To verify which email addresses are associated with the Codacy Cloud account, the user must click on their avatar on the top right-hand corner, select Your account , and open the page Emails : There may be different reasons for this issue to happen: The user making the commit hasn't signed in to Codacy Cloud and joined the organization yet The user must join the organization or, if you're the organization owner, you can add the user instead. The commit email address isn't associated with the account of a Codacy Cloud user Codacy automatically associates the email addresses from the Git provider accounts to the Codacy accounts when users sign in to Codacy. Make sure that the user configures the missing email address on their Git provider account, and that the user logs in again on Codacy for the change to take effect. Git isn't configured with your correct email address Unless you explicitly configure your email address , Git automatically uses an email address based on the username and hostname of your workstation, and associates this email address with your commits. To check which email address your local Git installation is using, run the following command on your workstation: git config user.email If the returned email address isn't one of the email addresses associated with your Git provider account, configure Git to use one of those email addresses instead: git config --global user.email you@example.com Important Make sure that your email address doesn't include any extra characters such as quotes ( \"\" or '' ).","title":"Not a member of the organization"},{"location":"faq/troubleshooting/not-a-member-of-the-organization/#see-also","text":"How do I change my email address on Codacy?","title":"See also"},{"location":"faq/troubleshooting/we-no-longer-have-access-to-this-repository/","text":"We no longer have access to this repository, check your SSH keys # Codacy uses SSH keys to clone your private repositories. Depending on the level of access that the user configuring the repository on Codacy has on the remote Git provider, an SSH key can be added either: Directly to the repository itself, if the user has permissions to add SSH keys to the repository To the user account, if the user only has read or commit permissions on the repository For this reason, some changes on your Git provider can prevent Codacy from cloning your private repository. When this happens, Codacy displays the error message \"We no longer have access to this repository\" on the Repository Dashboard page. The repository was renamed or moved # If you renamed the repository or moved it to a different account on the Git provider: On Codacy, open your Repository Settings , tab General . Click the button Update name . The user that configured the repository no longer has access # If the user that initially configured the repository on Codacy was using a user account SSH key but no longer has access to the repository on the Git provider: On Codacy, open your Repository Settings , tab General . Click the button Generate New Repository Key (recommended) or Generate New User Key : Generate New Repository Key is the recommended option. It will add a new SSH key to your repository deployment keys. However, this is only possible if the user configuring the integration with the remote Git provider has permissions to add keys to the repository. Otherwise, this operation will fail. Alternatively, you can also do this process manually by copying the SSH key. Generate New User Key should only be used if your repository is using submodules on Codacy . When you're using submodules, Codacy needs to clone additional repositories it has no access to. Since there is no way of identifying the submodules of a repository before cloning the repository, Codacy adds the SSH keys to the user account so that it has access to the same repositories as the user. Important If you're using Bitbucket Cloud , you must manually add the SSH key on your user account . Open the tab Integrations . If you have an integration with your Git provider enabled, remove and re-create the integration .","title":"We no longer have access to this repository, check your SSH keys"},{"location":"faq/troubleshooting/we-no-longer-have-access-to-this-repository/#we-no-longer-have-access-to-this-repository-check-your-ssh-keys","text":"Codacy uses SSH keys to clone your private repositories. Depending on the level of access that the user configuring the repository on Codacy has on the remote Git provider, an SSH key can be added either: Directly to the repository itself, if the user has permissions to add SSH keys to the repository To the user account, if the user only has read or commit permissions on the repository For this reason, some changes on your Git provider can prevent Codacy from cloning your private repository. When this happens, Codacy displays the error message \"We no longer have access to this repository\" on the Repository Dashboard page.","title":"We no longer have access to this repository, check your SSH keys"},{"location":"faq/troubleshooting/we-no-longer-have-access-to-this-repository/#the-repository-was-renamed-or-moved","text":"If you renamed the repository or moved it to a different account on the Git provider: On Codacy, open your Repository Settings , tab General . Click the button Update name .","title":"The repository was renamed or moved"},{"location":"faq/troubleshooting/we-no-longer-have-access-to-this-repository/#the-user-that-configured-the-repository-no-longer-has-access","text":"If the user that initially configured the repository on Codacy was using a user account SSH key but no longer has access to the repository on the Git provider: On Codacy, open your Repository Settings , tab General . Click the button Generate New Repository Key (recommended) or Generate New User Key : Generate New Repository Key is the recommended option. It will add a new SSH key to your repository deployment keys. However, this is only possible if the user configuring the integration with the remote Git provider has permissions to add keys to the repository. Otherwise, this operation will fail. Alternatively, you can also do this process manually by copying the SSH key. Generate New User Key should only be used if your repository is using submodules on Codacy . When you're using submodules, Codacy needs to clone additional repositories it has no access to. Since there is no way of identifying the submodules of a repository before cloning the repository, Codacy adds the SSH keys to the user account so that it has access to the same repositories as the user. Important If you're using Bitbucket Cloud , you must manually add the SSH key on your user account . Open the tab Integrations . If you have an integration with your Git provider enabled, remove and re-create the integration .","title":"The user that configured the repository no longer has access"},{"location":"faq/troubleshooting/why-arent-duplication-metrics-being-calculated/","text":"Why aren't duplication metrics being calculated? # For performance reasons, Codacy skips the calculation of code duplication for programming languages that have more than 5000 source code files in a repository. Besides this, if Codacy fails to calculate code duplication for a specific programming language in a repository three times in a row (for example, because the tool calculating the analysis runs out of memory or times out), Codacy stops trying to analyze the metric for that language and repository. When this happens, Codacy doesn't display code duplication metrics for the affected language: The Files page on your repository displays a blank duplication value for files of the affected language. The Commits and Pull Request pages display an empty New Duplication tab. The analysis logs for commits won't display a duplication analysis task for the tool corresponding to the affected language. As a workaround, if you're exceeding the maximum number of source code files: We recommend that you use a Codacy configuration file to exclude source code files of the affected language from your project to decrease the number of files to be analyzed. For example, you may be able to exclude files that are automatically generated from your test suite or files belonging to dependencies that aren't maintained by your team, such as the node_modules folder for JavaScript projects. Reanalyze the last commit in the repository so that Codacy runs the code duplication analysis. If the analysis finishes but the code duplication metric wasn't calculated, follow the next steps: If you're using Codacy Self-hosted , open the Admin panel , Repositories , select the repository, tab Settings , and reset the code duplication analysis in Duplication settings . Then, reanalyze the last commit in the repository so that Codacy runs the code duplication analysis. If you're analyzing your repository locally with the Codacy Analysis CLI, consider using the flag --tool-timeout to specify a larger timeout for the execution of the tool. If you're using Codacy Cloud or if the steps above didn't solve the issue, please contact us at support@codacy.com .","title":"Why aren't duplication metrics being calculated?"},{"location":"faq/troubleshooting/why-arent-duplication-metrics-being-calculated/#why-arent-duplication-metrics-being-calculated","text":"For performance reasons, Codacy skips the calculation of code duplication for programming languages that have more than 5000 source code files in a repository. Besides this, if Codacy fails to calculate code duplication for a specific programming language in a repository three times in a row (for example, because the tool calculating the analysis runs out of memory or times out), Codacy stops trying to analyze the metric for that language and repository. When this happens, Codacy doesn't display code duplication metrics for the affected language: The Files page on your repository displays a blank duplication value for files of the affected language. The Commits and Pull Request pages display an empty New Duplication tab. The analysis logs for commits won't display a duplication analysis task for the tool corresponding to the affected language. As a workaround, if you're exceeding the maximum number of source code files: We recommend that you use a Codacy configuration file to exclude source code files of the affected language from your project to decrease the number of files to be analyzed. For example, you may be able to exclude files that are automatically generated from your test suite or files belonging to dependencies that aren't maintained by your team, such as the node_modules folder for JavaScript projects. Reanalyze the last commit in the repository so that Codacy runs the code duplication analysis. If the analysis finishes but the code duplication metric wasn't calculated, follow the next steps: If you're using Codacy Self-hosted , open the Admin panel , Repositories , select the repository, tab Settings , and reset the code duplication analysis in Duplication settings . Then, reanalyze the last commit in the repository so that Codacy runs the code duplication analysis. If you're analyzing your repository locally with the Codacy Analysis CLI, consider using the flag --tool-timeout to specify a larger timeout for the execution of the tool. If you're using Codacy Cloud or if the steps above didn't solve the issue, please contact us at support@codacy.com .","title":"Why aren't duplication metrics being calculated?"},{"location":"faq/troubleshooting/why-did-codacy-stop-commenting-on-pull-requests/","text":"Why did Codacy stop commenting on pull requests? # Different reasons can cause Codacy to stop analyzing and commenting on pull requests, but the most common is that the user who initially enabled the Git provider integration no longer has permissions on the repository or that the SSH key is no longer valid. To fix this issue and also avoid future disruptions, Codacy recommends that you re-enable the Git provider integration on Codacy using a dedicated service account on your Git provider: Create a service account on your Git provider exclusively dedicated to integrating Codacy with your repositories. Note The service account must have administrator permissions on the repositories to integrate with Codacy and must not be shared by other systems to ensure that Codacy doesn't hit the API rate limits of the Git provider when using this account. Tip Using a dedicated service account also has the advantage of any pull request comments made by Codacy appearing as authored by the service account instead of by a regular organization member. You can name this account \"Codacy\" and use this Codacy logo as the account picture so that your pull request comments look like the following example: Log out of both your Git provider and of Codacy. Log in to Codacy using the new service account. Open your repository Settings , tab Integrations , and click the trash can icon to remove the existing Git provider integration: Re-enable the integration by following the instructions for your Git provider: Enabling the GitHub integration Enabling the GitLab integration Enabling the Bitbucket integration See also # We no longer have access to this repository, check your SSH keys","title":"Why did Codacy stop commenting on pull requests?"},{"location":"faq/troubleshooting/why-did-codacy-stop-commenting-on-pull-requests/#why-did-codacy-stop-commenting-on-pull-requests","text":"Different reasons can cause Codacy to stop analyzing and commenting on pull requests, but the most common is that the user who initially enabled the Git provider integration no longer has permissions on the repository or that the SSH key is no longer valid. To fix this issue and also avoid future disruptions, Codacy recommends that you re-enable the Git provider integration on Codacy using a dedicated service account on your Git provider: Create a service account on your Git provider exclusively dedicated to integrating Codacy with your repositories. Note The service account must have administrator permissions on the repositories to integrate with Codacy and must not be shared by other systems to ensure that Codacy doesn't hit the API rate limits of the Git provider when using this account. Tip Using a dedicated service account also has the advantage of any pull request comments made by Codacy appearing as authored by the service account instead of by a regular organization member. You can name this account \"Codacy\" and use this Codacy logo as the account picture so that your pull request comments look like the following example: Log out of both your Git provider and of Codacy. Log in to Codacy using the new service account. Open your repository Settings , tab Integrations , and click the trash can icon to remove the existing Git provider integration: Re-enable the integration by following the instructions for your Git provider: Enabling the GitHub integration Enabling the GitLab integration Enabling the Bitbucket integration","title":"Why did Codacy stop commenting on pull requests?"},{"location":"faq/troubleshooting/why-did-codacy-stop-commenting-on-pull-requests/#see-also","text":"We no longer have access to this repository, check your SSH keys","title":"See also"},{"location":"faq/troubleshooting/why-is-my-file-over-150-kb-missing/","text":"Why is my file over 150 KB missing? # Codacy Cloud currently doesn't analyze files that are larger than 150 KB. Codacy doesn't display these files on the Files page , and doesn't take them into account when grading your repository. Why is there a limit? # As part of our performance improvement measures, we spent time breaking down the total time it takes to analyze a repository and found that a large percentage of time was spent on files that didn't add value to our users. Those files tend to be the biggest in the repository and are typically generated by or dependent on a third-party. It increased analysis time significantly due to the file size and even resulted in time-outs at some point, preventing the flagging of real issues. As a solution to this problem, we placed a size limit to the files that Codacy would analyze. This decreased the average analysis time and the number of timeouts, thus improving the overall performance for our users. What if I need to analyze a file that exceeds this limit? # While Codacy will ignore your file by default, you can still analyze it by running the analysis locally using the Codacy Analysis CLI . The Codacy Analysis CLI doesn't have any limitation on file size. What about Codacy Self-hosted? # By default, Codacy Self-hosted has the same limit of 150 KB as Codacy Cloud. However, in this case the limit is configurable because the resource allocation for on-premise instances is decided by each organization. To update the file size limit: Edit the value of global.workerManager.workers.config.analysis.maxFileSizeBytes in the values-production.yaml file that you used to install Codacy: global : workerManager : workers : config : analysis : maxFileSizeBytes : 150000 Apply the new configuration by performing a Helm upgrade and specifying the Codacy Self-hosted version currently installed. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version <current Codacy Self-hosted version> \\ --values values-production.yaml \\ # --values values-microk8s.yaml","title":"Why is my file over 150 KB missing?"},{"location":"faq/troubleshooting/why-is-my-file-over-150-kb-missing/#why-is-my-file-over-150-kb-missing","text":"Codacy Cloud currently doesn't analyze files that are larger than 150 KB. Codacy doesn't display these files on the Files page , and doesn't take them into account when grading your repository.","title":"Why is my file over 150 KB missing?"},{"location":"faq/troubleshooting/why-is-my-file-over-150-kb-missing/#why-is-there-a-limit","text":"As part of our performance improvement measures, we spent time breaking down the total time it takes to analyze a repository and found that a large percentage of time was spent on files that didn't add value to our users. Those files tend to be the biggest in the repository and are typically generated by or dependent on a third-party. It increased analysis time significantly due to the file size and even resulted in time-outs at some point, preventing the flagging of real issues. As a solution to this problem, we placed a size limit to the files that Codacy would analyze. This decreased the average analysis time and the number of timeouts, thus improving the overall performance for our users.","title":"Why is there a limit?"},{"location":"faq/troubleshooting/why-is-my-file-over-150-kb-missing/#what-if-i-need-to-analyze-a-file-that-exceeds-this-limit","text":"While Codacy will ignore your file by default, you can still analyze it by running the analysis locally using the Codacy Analysis CLI . The Codacy Analysis CLI doesn't have any limitation on file size.","title":"What if I need to analyze a file that exceeds this limit?"},{"location":"faq/troubleshooting/why-is-my-file-over-150-kb-missing/#what-about-codacy-self-hosted","text":"By default, Codacy Self-hosted has the same limit of 150 KB as Codacy Cloud. However, in this case the limit is configurable because the resource allocation for on-premise instances is decided by each organization. To update the file size limit: Edit the value of global.workerManager.workers.config.analysis.maxFileSizeBytes in the values-production.yaml file that you used to install Codacy: global : workerManager : workers : config : analysis : maxFileSizeBytes : 150000 Apply the new configuration by performing a Helm upgrade and specifying the Codacy Self-hosted version currently installed. To do so execute the command used to install Codacy : Important If you're using MicroK8s you must use the file values-microk8s.yaml together with the file values-production.yaml . To do this, uncomment the last line before running the helm upgrade command below. helm upgrade ( ...options used to install Codacy... ) \\ --version <current Codacy Self-hosted version> \\ --values values-production.yaml \\ # --values values-microk8s.yaml","title":"What about Codacy Self-hosted?"},{"location":"faq/troubleshooting/why-isnt-my-public-repository-being-analyzed/","text":"Why isn't my public repository being analyzed? # Codacy only analyzes open source repositories if the owner of the repository is a committer to that repository.","title":"Why isn't my public repository being analyzed?"},{"location":"faq/troubleshooting/why-isnt-my-public-repository-being-analyzed/#why-isnt-my-public-repository-being-analyzed","text":"Codacy only analyzes open source repositories if the owner of the repository is a committer to that repository.","title":"Why isn't my public repository being analyzed?"},{"location":"getting-started/adding-a-codacy-badge/","text":"Adding a Codacy badge # Add a Codacy badge to the README of your repository to display the current code quality grade or code coverage of your code. To obtain your Codacy badge, open your repository Settings , tab General , select the markup language, and copy the generated code to your README file. You can also add a badge for your coverage if you have set up code coverage for your repository. To display the grade or code coverage information of a different branch analyzed by Codacy, append ?branch=<branch_name> to the URL of the badge. For example: https://app.codacy.com/project/badge/Grade/cba8fd0874ac4f569f4f880e473cbac9?branch=dev Fixing your Codacy badge # The Codacy badges for your repository may become unavailable or grayed out if the analysis or code coverage information for the last commit isn't available, or if you renamed or re-added your repository on Codacy: To fix each badge: Reanalyze the branch associated with the code quality badge Make sure that you're generating and uploading code coverage reports for all the commits in the branch associated with the coverage badge If these steps don't fix your Codacy badges it can mean that the badges are no longer valid. In this case, repeat the steps above to replace the existing badges with new ones.","title":"Adding a Codacy badge"},{"location":"getting-started/adding-a-codacy-badge/#adding-a-codacy-badge","text":"Add a Codacy badge to the README of your repository to display the current code quality grade or code coverage of your code. To obtain your Codacy badge, open your repository Settings , tab General , select the markup language, and copy the generated code to your README file. You can also add a badge for your coverage if you have set up code coverage for your repository. To display the grade or code coverage information of a different branch analyzed by Codacy, append ?branch=<branch_name> to the URL of the badge. For example: https://app.codacy.com/project/badge/Grade/cba8fd0874ac4f569f4f880e473cbac9?branch=dev","title":"Adding a Codacy badge"},{"location":"getting-started/adding-a-codacy-badge/#fixing-your-codacy-badge","text":"The Codacy badges for your repository may become unavailable or grayed out if the analysis or code coverage information for the last commit isn't available, or if you renamed or re-added your repository on Codacy: To fix each badge: Reanalyze the branch associated with the code quality badge Make sure that you're generating and uploading code coverage reports for all the commits in the branch associated with the coverage badge If these steps don't fix your Codacy badges it can mean that the badges are no longer valid. In this case, repeat the steps above to replace the existing badges with new ones.","title":"Fixing your Codacy badge"},{"location":"getting-started/codacy-quickstart/","text":"Codacy quickstart (5 min) # Codacy automatically analyzes your source code and identifies issues as you go, helping you develop software more efficiently with fewer issues down the line. Through static code review analysis, Codacy notifies you of security issues, code coverage, code duplication, and code complexity in every commit and pull request. To get started, head to codacy.com and click Get started . 1. Sign up # Sign up with a Git provider such as GitHub, GitLab, or Bitbucket. This links your Codacy user with your Git provider user, making it easier to add repositories to Codacy and invite your teammates. Codacy will request access to your Git provider during the authorization flow. Check the permissions that Codacy requires and why . Codacy will also ask you to fill in a few details about your company so we know a bit more about your use case. 2. Choose an organization # Now, you'll need to add or join the organizations that contain your repositories. The organization with the same name as your Git provider username contains your personal repositories. Read more about organizations on Codacy . To start adding your repositories, select one of the organizations. Note If you can't see the organization you're looking for, follow these troubleshooting instructions . 3. Add repositories # Next, add the repositories that you wish to analyze. Codacy begins an initial analysis as soon as you add a repository and sets everything up to ensure your next commits on that repository are analyzed. Note You can only add repositories on Codacy if you have the necessary permissions on your Git provider . Click the link Go to repository to see the code quality overview of your repository as soon as the initial analysis is complete: 4. Tweak your repository settings # Check the static analysis results on the Issues page to explore the initial analysis results . The first analysis is based on Codacy default configurations , so you should tweak and adapt the following configurations to match your preferences and specific scenario: Ignore files that you want to exclude from the Codacy analysis Configure the code patterns that Codacy uses to analyze your repository Adjust the quality settings to control quality gate that Codacy applies to your commits and pull requests You're all set! \ud83c\udf89 # Congratulations, your new repository is ready! Optionally, you can also: Add coverage reports to Codacy Add a Codacy badge to your repository displaying the current code quality grade or code coverage","title":"Codacy quickstart (5 min)"},{"location":"getting-started/codacy-quickstart/#codacy-quickstart-5-min","text":"Codacy automatically analyzes your source code and identifies issues as you go, helping you develop software more efficiently with fewer issues down the line. Through static code review analysis, Codacy notifies you of security issues, code coverage, code duplication, and code complexity in every commit and pull request. To get started, head to codacy.com and click Get started .","title":"Codacy quickstart (5 min)"},{"location":"getting-started/codacy-quickstart/#sign-up","text":"Sign up with a Git provider such as GitHub, GitLab, or Bitbucket. This links your Codacy user with your Git provider user, making it easier to add repositories to Codacy and invite your teammates. Codacy will request access to your Git provider during the authorization flow. Check the permissions that Codacy requires and why . Codacy will also ask you to fill in a few details about your company so we know a bit more about your use case.","title":"1. Sign up"},{"location":"getting-started/codacy-quickstart/#choose-organization","text":"Now, you'll need to add or join the organizations that contain your repositories. The organization with the same name as your Git provider username contains your personal repositories. Read more about organizations on Codacy . To start adding your repositories, select one of the organizations. Note If you can't see the organization you're looking for, follow these troubleshooting instructions .","title":"2. Choose an organization"},{"location":"getting-started/codacy-quickstart/#add-repositories","text":"Next, add the repositories that you wish to analyze. Codacy begins an initial analysis as soon as you add a repository and sets everything up to ensure your next commits on that repository are analyzed. Note You can only add repositories on Codacy if you have the necessary permissions on your Git provider . Click the link Go to repository to see the code quality overview of your repository as soon as the initial analysis is complete:","title":"3. Add repositories"},{"location":"getting-started/codacy-quickstart/#tweak-settings","text":"Check the static analysis results on the Issues page to explore the initial analysis results . The first analysis is based on Codacy default configurations , so you should tweak and adapt the following configurations to match your preferences and specific scenario: Ignore files that you want to exclude from the Codacy analysis Configure the code patterns that Codacy uses to analyze your repository Adjust the quality settings to control quality gate that Codacy applies to your commits and pull requests","title":"4. Tweak your repository settings"},{"location":"getting-started/codacy-quickstart/#all-set","text":"Congratulations, your new repository is ready! Optionally, you can also: Add coverage reports to Codacy Add a Codacy badge to your repository displaying the current code quality grade or code coverage","title":"You're all set! \ud83c\udf89"},{"location":"getting-started/supported-languages-and-tools/","text":"Supported languages and tools # Codacy uses industry-leading tools to perform automatic static code analysis over 40 supported languages and frameworks: For programming languages Codacy provides static analysis as well as code duplication, code complexity, and test coverage metrics for key languages. For cloud infrastructure-as-code frameworks Codacy provides static analysis to enforce security and compliance best practices. The table below lists all languages and frameworks that Codacy supports and the corresponding tools that Codacy uses to analyze your source code. Besides this, Codacy uses cloc to calculate the source lines of code for all supported languages and supports multiple test coverage report formats . Language or framework Static analysis Suggested fixes Duplication Complexity Apex PMD - - AsyncAPI Spectral - - AWS Cloud\u200bFormation Checkov - - Azure Resource Manager Templates Checkov - - C Clang-Tidy 1 , Cppcheck , Flawfinder PMD CPD - C# Sonar C# PMD CPD SonarC# C++ Clang-Tidy 1 , Cppcheck , Flawfinder PMD CPD - CoffeeScript CoffeeLint - - Crystal Ameba - - CSS CSSLint , Stylelint - - Dockerfile Hadolint - - Elixir Credo - - Go aligncheck 1 , deadcode 1 , Gosec 1 , Revive , Staticcheck 1 PMD CPD Gocyclo Groovy CodeNarc - - Java Checkstyle , PMD , SpotBugs 1 PMD CPD PMD JavaScript ESLint , JSHint , PMD ESLint \ud83d\udd27 PMD CPD ESLint JSON Jackson Linter - - JSP PMD - - Kotlin detekt jscpd detekt Kubernetes Checkov - - Less Stylelint - - Markdown remark-lint , markdownlint markdownlint \ud83d\udd27 - - Objective-C Clang-Tidy 1 , Faux Pas 1 - - OpenAPI Spectral - - PHP PHP_CodeSniffer , PHP Mess Detector PHPCPD PHP Depend PL/SQL PMD - - PostgreSQL SQLint - - PowerShell PSScriptAnalyser - - Python Bandit , Prospector , Pylint PMD CPD Radon Ruby Brakeman , bundler-audit , RuboCop Flay RuboCop Sass Stylelint - - Scala Scalameta , Scalastyle , SpotBugs 1 PMD CPD Scalastyle , Scala 2 compiler and standard library Serverless Framework Checkov - - Shell ShellCheck - - Swift SwiftLint , Tailor PMD CPD SwiftLint 2 Terraform Checkov - - Transact-SQL TSQLLint - - TypeScript ESLint , TSLint ESLint \ud83d\udd27 jscpd ESLint Velocity PMD - - Visual Basic SonarVB - - Visualforce PMD - - XML PMD - - XSL PMD - - 1 : Supported as a client-side tool . 2 : Supports reporting warnings or errors on functions above specific complexity thresholds. Enable the rule Cyclomatic Complexity on the Code patterns page , or use a configuration file to customize the thresholds. \ud83d\udd27 : Supports suggesting fixes for identified issues. See also # Codacy quickstart (5 min) Client-side tools Codacy plugin tools","title":"Supported languages and tools"},{"location":"getting-started/supported-languages-and-tools/#supported-languages-and-tools","text":"Codacy uses industry-leading tools to perform automatic static code analysis over 40 supported languages and frameworks: For programming languages Codacy provides static analysis as well as code duplication, code complexity, and test coverage metrics for key languages. For cloud infrastructure-as-code frameworks Codacy provides static analysis to enforce security and compliance best practices. The table below lists all languages and frameworks that Codacy supports and the corresponding tools that Codacy uses to analyze your source code. Besides this, Codacy uses cloc to calculate the source lines of code for all supported languages and supports multiple test coverage report formats . Language or framework Static analysis Suggested fixes Duplication Complexity Apex PMD - - AsyncAPI Spectral - - AWS Cloud\u200bFormation Checkov - - Azure Resource Manager Templates Checkov - - C Clang-Tidy 1 , Cppcheck , Flawfinder PMD CPD - C# Sonar C# PMD CPD SonarC# C++ Clang-Tidy 1 , Cppcheck , Flawfinder PMD CPD - CoffeeScript CoffeeLint - - Crystal Ameba - - CSS CSSLint , Stylelint - - Dockerfile Hadolint - - Elixir Credo - - Go aligncheck 1 , deadcode 1 , Gosec 1 , Revive , Staticcheck 1 PMD CPD Gocyclo Groovy CodeNarc - - Java Checkstyle , PMD , SpotBugs 1 PMD CPD PMD JavaScript ESLint , JSHint , PMD ESLint \ud83d\udd27 PMD CPD ESLint JSON Jackson Linter - - JSP PMD - - Kotlin detekt jscpd detekt Kubernetes Checkov - - Less Stylelint - - Markdown remark-lint , markdownlint markdownlint \ud83d\udd27 - - Objective-C Clang-Tidy 1 , Faux Pas 1 - - OpenAPI Spectral - - PHP PHP_CodeSniffer , PHP Mess Detector PHPCPD PHP Depend PL/SQL PMD - - PostgreSQL SQLint - - PowerShell PSScriptAnalyser - - Python Bandit , Prospector , Pylint PMD CPD Radon Ruby Brakeman , bundler-audit , RuboCop Flay RuboCop Sass Stylelint - - Scala Scalameta , Scalastyle , SpotBugs 1 PMD CPD Scalastyle , Scala 2 compiler and standard library Serverless Framework Checkov - - Shell ShellCheck - - Swift SwiftLint , Tailor PMD CPD SwiftLint 2 Terraform Checkov - - Transact-SQL TSQLLint - - TypeScript ESLint , TSLint ESLint \ud83d\udd27 jscpd ESLint Velocity PMD - - Visual Basic SonarVB - - Visualforce PMD - - XML PMD - - XSL PMD - - 1 : Supported as a client-side tool . 2 : Supports reporting warnings or errors on functions above specific complexity thresholds. Enable the rule Cyclomatic Complexity on the Code patterns page , or use a configuration file to customize the thresholds. \ud83d\udd27 : Supports suggesting fixes for identified issues.","title":"Supported languages and tools"},{"location":"getting-started/supported-languages-and-tools/#see-also","text":"Codacy quickstart (5 min) Client-side tools Codacy plugin tools","title":"See also"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/","text":"Which permissions does Codacy need from my account? # Codacy Cloud uses the OAuth protocol to handle logins and supports the following providers: GitHub Cloud GitLab Cloud Bitbucket Cloud Google Sign-In Codacy requests only the necessary permissions from your Git provider to analyze your code and keeps your information secure . See the sections below for the detailed list of permissions that Codacy asks for depending on the provider. GitHub Cloud # If you log in with GitHub, Codacy requires the following app permissions : Scope Permissions Description Repository permissions: Checks Read & Write Codacy creates and updates check runs with the results of code analysis. Issues Read & Write Codacy can create GitHub issues from issues found during code analysis. Metadata Read Only Codacy retrieves repository metadata, such as name, languages, collaborators and commit information. Pull requests Read & Write Codacy retrieves pull request information to display on its side. Codacy might also create comments and suggestions on the pull request, according to the results of code analysis. Webhooks Read & Write Codacy creates webhooks for code pushes and pull request events (created, merged, etc.). These events might trigger code analysis. Commit statuses Read & Write Codacy sets the status of commits according to the result of code analysis. Administration Read & Write Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. Organization permissions: Webhooks Read & Write Codacy creates webhooks for organization and repository events (creation, deletion, member added, etc.) to enable synced organizations . Members Read Only Codacy retrieves information about organization members and teams to enforce permissions, enable synced organizations and user management. User permissions: These permissions are granted on an individual user basis as part of the user authorization flow. They will be also be displayed during account installation for transparency. Email addresses Read Only Codacy retrieves the user's email addresses to enforce which commits are eligible for analysis. Git SSH keys Read & Write Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. GitLab Cloud # If you sign up with GitLab Cloud, Codacy requires the following permissions/scopes : Scope Description api Codacy uses GitLab's API to read and update pull requests, create webhooks for code push events, list commits, repositories, groups, members and permissions. read_user Codacy retrieves the user's email addresses to enforce which commits are eligible for analysis. read_repository Codacy retrieves repository metadata, such as name, languages and collaborators. openid Codacy uses this permission for authentication using OpenID Connect . Bitbucket Cloud # If you log in with Bitbucket, Codacy requires the following permissions/scopes : Scope and permissions Description account:write Codacy retrieves the user's email addresses to enforce which commits are eligible for analysis. Furthermore, Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. repository:admin Codacy retrieves repository metadata, such as name, languages and collaborators, and commit information. Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. pullrequest:write Codacy retrieves pull request information to display on its side. Codacy might also create comments on the pull request, according to the results of code analysis. issue:write Codacy can create Bitbucket issues from issues found during code analysis. webhook Codacy creates webhooks for code pushes and pull request events (created, merged, etc.). These events might trigger code analysis. Codacy also creates repository webhooks to enable synced organizations . team Codacy uses your group/team membership information to enforce permissions. Read your workspace's project settings and read repositories contained within your workspace's projects. Google Sign-In # If you log in with Google, Codacy requires the email scope . Revoking access to integrations # To revoke the access from Codacy to one or more of the OAuth providers: Click on your avatar on the top right-hand corner and select Your Account , tab Access Management . The Access Management page lists all current integrations with Git providers or Google that you used to sign in or log in to Codacy. To revoke access to an integration, click the button Revoke access for the intended integration. To ensure that the integration is removed not only on Codacy but also on the integration side, we recommend that you follow the instructions on how to revoke the Codacy OAuth application on your provider: GitHub Cloud GitLab Cloud Bitbucket Cloud Google Sign-in After revoking an integration, Codacy will no longer be able to access or manipulate resources that require API calls, such as detecting new pull requests or adding comments to pull requests. However, Codacy will still be able to perform operations that only require using the Git protocol either via SSH or HTTPS, such as detecting new commits and calculating diffs. To remove your repositories from Codacy and stop the analysis you must delete them from your Codacy account . If you need to use an integration that you have previously revoked, log in again to Codacy with that integration so that Codacy can request the required permissions from the provider. Why does Codacy ask for permission to create SSH keys? # Codacy asks for permission to create SSH keys because it needs to create an SSH key in your account in the following situations: If your repository uses submodules, so that Codacy can clone the repositories for each submodule If Codacy fails to integrate with a repository using the repository key, so that Codacy can continue to perform analysis Codacy only adds read-only SSH keys to be able to clone repositories and won't have access to any of your existing SSH keys. You have full control over which organizations and repositories Codacy is authorized to access, and you can also revoke the keys created by Codacy at any time . Codacy doesn't change the contents or member privileges of any repository you authorize it to analyze. We understand the desire for security and privacy and find that the SSH protocol is preferable to HTTPS as it separates Codacy's access rights from the one of the users.","title":"Which permissions does Codacy need from my account?"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#which-permissions-does-codacy-need-from-my-account","text":"Codacy Cloud uses the OAuth protocol to handle logins and supports the following providers: GitHub Cloud GitLab Cloud Bitbucket Cloud Google Sign-In Codacy requests only the necessary permissions from your Git provider to analyze your code and keeps your information secure . See the sections below for the detailed list of permissions that Codacy asks for depending on the provider.","title":"Which permissions does Codacy need from my account?"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#github-cloud","text":"If you log in with GitHub, Codacy requires the following app permissions : Scope Permissions Description Repository permissions: Checks Read & Write Codacy creates and updates check runs with the results of code analysis. Issues Read & Write Codacy can create GitHub issues from issues found during code analysis. Metadata Read Only Codacy retrieves repository metadata, such as name, languages, collaborators and commit information. Pull requests Read & Write Codacy retrieves pull request information to display on its side. Codacy might also create comments and suggestions on the pull request, according to the results of code analysis. Webhooks Read & Write Codacy creates webhooks for code pushes and pull request events (created, merged, etc.). These events might trigger code analysis. Commit statuses Read & Write Codacy sets the status of commits according to the result of code analysis. Administration Read & Write Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. Organization permissions: Webhooks Read & Write Codacy creates webhooks for organization and repository events (creation, deletion, member added, etc.) to enable synced organizations . Members Read Only Codacy retrieves information about organization members and teams to enforce permissions, enable synced organizations and user management. User permissions: These permissions are granted on an individual user basis as part of the user authorization flow. They will be also be displayed during account installation for transparency. Email addresses Read Only Codacy retrieves the user's email addresses to enforce which commits are eligible for analysis. Git SSH keys Read & Write Codacy creates an SSH key on the repository to allow cloning and integrating with your repository.","title":"GitHub Cloud"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#gitlab-cloud","text":"If you sign up with GitLab Cloud, Codacy requires the following permissions/scopes : Scope Description api Codacy uses GitLab's API to read and update pull requests, create webhooks for code push events, list commits, repositories, groups, members and permissions. read_user Codacy retrieves the user's email addresses to enforce which commits are eligible for analysis. read_repository Codacy retrieves repository metadata, such as name, languages and collaborators. openid Codacy uses this permission for authentication using OpenID Connect .","title":"GitLab Cloud"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#bitbucket-cloud","text":"If you log in with Bitbucket, Codacy requires the following permissions/scopes : Scope and permissions Description account:write Codacy retrieves the user's email addresses to enforce which commits are eligible for analysis. Furthermore, Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. repository:admin Codacy retrieves repository metadata, such as name, languages and collaborators, and commit information. Codacy creates an SSH key on the repository to allow cloning and integrating with your repository. pullrequest:write Codacy retrieves pull request information to display on its side. Codacy might also create comments on the pull request, according to the results of code analysis. issue:write Codacy can create Bitbucket issues from issues found during code analysis. webhook Codacy creates webhooks for code pushes and pull request events (created, merged, etc.). These events might trigger code analysis. Codacy also creates repository webhooks to enable synced organizations . team Codacy uses your group/team membership information to enforce permissions. Read your workspace's project settings and read repositories contained within your workspace's projects.","title":"Bitbucket Cloud"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#google-sign-in","text":"If you log in with Google, Codacy requires the email scope .","title":"Google Sign-In"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#revoking-access-to-integrations","text":"To revoke the access from Codacy to one or more of the OAuth providers: Click on your avatar on the top right-hand corner and select Your Account , tab Access Management . The Access Management page lists all current integrations with Git providers or Google that you used to sign in or log in to Codacy. To revoke access to an integration, click the button Revoke access for the intended integration. To ensure that the integration is removed not only on Codacy but also on the integration side, we recommend that you follow the instructions on how to revoke the Codacy OAuth application on your provider: GitHub Cloud GitLab Cloud Bitbucket Cloud Google Sign-in After revoking an integration, Codacy will no longer be able to access or manipulate resources that require API calls, such as detecting new pull requests or adding comments to pull requests. However, Codacy will still be able to perform operations that only require using the Git protocol either via SSH or HTTPS, such as detecting new commits and calculating diffs. To remove your repositories from Codacy and stop the analysis you must delete them from your Codacy account . If you need to use an integration that you have previously revoked, log in again to Codacy with that integration so that Codacy can request the required permissions from the provider.","title":"Revoking access to integrations"},{"location":"getting-started/which-permissions-does-codacy-need-from-my-account/#why-does-codacy-ask-for-permission-to-create-ssh-keys","text":"Codacy asks for permission to create SSH keys because it needs to create an SSH key in your account in the following situations: If your repository uses submodules, so that Codacy can clone the repositories for each submodule If Codacy fails to integrate with a repository using the repository key, so that Codacy can continue to perform analysis Codacy only adds read-only SSH keys to be able to clone repositories and won't have access to any of your existing SSH keys. You have full control over which organizations and repositories Codacy is authorized to access, and you can also revoke the keys created by Codacy at any time . Codacy doesn't change the contents or member privileges of any repository you authorize it to analyze. We understand the desire for security and privacy and find that the SSH protocol is preferable to HTTPS as it separates Codacy's access rights from the one of the users.","title":"Why does Codacy ask for permission to create SSH keys?"},{"location":"organizations/changing-your-plan-and-billing/","text":"Changing your plan and billing # Each organization on Codacy has a dedicated plan and associated billing. To make changes to the plan and billing of an organization, open your organization Settings , page Plan and billing . Note If you're using GitHub Marketplace, make changes to your billing details or cancel your plan directly on your GitHub Billing page . To upgrade to the Pro plan click Choose plan , choose between monthly or yearly billing, and provide your payment and invoice details To make changes to your Pro plan or invoice details click Edit plan details or click Edit invoice details If you have any questions or need help with your account, please contact support@codacy.com . Accepting new people to your organization # On Codacy Cloud , organization owners control if team members need an approval before joining their organization. Codacy updates the billing automatically when new users join an organization. Note If you're using GitHub Marketplace, this configuration isn't available and team members must always wait for an organization owner to manually approve their requests to join the organization. Choose one of the following options in your organization Settings , page Plan and billing : Allow new people to join immediately: team members with access to the organization on the Git provider can join the organization on Codacy immediately. Review join requests from new people: when team members with access to the organization on the Git provider join the organization on Codacy, an organization owner must manually approve their requests to join on the page People . Team members that have already been invited to join the organization are automatically approved, and you can also skip the approval process for organization owners.","title":"Changing your plan and billing"},{"location":"organizations/changing-your-plan-and-billing/#changing-your-plan-and-billing","text":"Each organization on Codacy has a dedicated plan and associated billing. To make changes to the plan and billing of an organization, open your organization Settings , page Plan and billing . Note If you're using GitHub Marketplace, make changes to your billing details or cancel your plan directly on your GitHub Billing page . To upgrade to the Pro plan click Choose plan , choose between monthly or yearly billing, and provide your payment and invoice details To make changes to your Pro plan or invoice details click Edit plan details or click Edit invoice details If you have any questions or need help with your account, please contact support@codacy.com .","title":"Changing your plan and billing"},{"location":"organizations/changing-your-plan-and-billing/#accepting-new-people-to-your-organization","text":"On Codacy Cloud , organization owners control if team members need an approval before joining their organization. Codacy updates the billing automatically when new users join an organization. Note If you're using GitHub Marketplace, this configuration isn't available and team members must always wait for an organization owner to manually approve their requests to join the organization. Choose one of the following options in your organization Settings , page Plan and billing : Allow new people to join immediately: team members with access to the organization on the Git provider can join the organization on Codacy immediately. Review join requests from new people: when team members with access to the organization on the Git provider join the organization on Codacy, an organization owner must manually approve their requests to join on the page People . Team members that have already been invited to join the organization are automatically approved, and you can also skip the approval process for organization owners.","title":"Accepting new people to your organization"},{"location":"organizations/copying-code-patterns-between-repositories/","text":"Copying code patterns between repositories # Copy tool and pattern configurations in bulk between your repositories to help you bootstrap and standardize the coding standards in your organization. For example, when adding new repositories on Codacy you can copy the tool and pattern configurations from an existing repository that's already configured, and then tweak and adapt the settings for your new repositories. Tip To ensure that multiple repositories consistently follow the same tool and code pattern configurations throughout your organization, use a coding standard instead. Important Consider the following when using this feature: Tool matching: Codacy only copies settings for tools that are available on both the source and target repositories, and overwrites the existing settings for these tools on the target repository. Toggle status: Codacy copies the enabled or disabled status of the matching tools from the source to the target repository. Configuration files: Codacy copies the UI configuration of all matching tools, even those set to use configuration files. However, the import doesn't include the configuration mode itself. The following example illustrates the points above: Source repository Target repository Target repository after import To copy the tool and pattern configurations from one repository to other repositories: Open your organization Coding standards page, tab Bulk copy code patterns . Follow the instructions to select: The source repository from where to copy the configurations One or more target repositories to apply the configurations You can use the language filter to help you find target repositories that use the same language as the source repository that you selected. Use the Operation summary to review the changes that will be applied and click Apply changes . Codacy will use the updated configurations on the next analysis in each target repository. See also # Applying a coding standard across multiple repositories Configuring code patterns on each repository Importing pattern configurations from another repository","title":"Copying code patterns between repositories"},{"location":"organizations/copying-code-patterns-between-repositories/#copying-code-patterns-between-repositories","text":"Copy tool and pattern configurations in bulk between your repositories to help you bootstrap and standardize the coding standards in your organization. For example, when adding new repositories on Codacy you can copy the tool and pattern configurations from an existing repository that's already configured, and then tweak and adapt the settings for your new repositories. Tip To ensure that multiple repositories consistently follow the same tool and code pattern configurations throughout your organization, use a coding standard instead. Important Consider the following when using this feature: Tool matching: Codacy only copies settings for tools that are available on both the source and target repositories, and overwrites the existing settings for these tools on the target repository. Toggle status: Codacy copies the enabled or disabled status of the matching tools from the source to the target repository. Configuration files: Codacy copies the UI configuration of all matching tools, even those set to use configuration files. However, the import doesn't include the configuration mode itself. The following example illustrates the points above: Source repository Target repository Target repository after import To copy the tool and pattern configurations from one repository to other repositories: Open your organization Coding standards page, tab Bulk copy code patterns . Follow the instructions to select: The source repository from where to copy the configurations One or more target repositories to apply the configurations You can use the language filter to help you find target repositories that use the same language as the source repository that you selected. Use the Operation summary to review the changes that will be applied and click Apply changes . Codacy will use the updated configurations on the next analysis in each target repository.","title":"Copying code patterns between repositories"},{"location":"organizations/copying-code-patterns-between-repositories/#see-also","text":"Applying a coding standard across multiple repositories Configuring code patterns on each repository Importing pattern configurations from another repository","title":"See also"},{"location":"organizations/managing-people/","text":"Managing people # Members of an organization can see the details of the repositories in that organization and add new repositories to be analyzed by Codacy. Besides this, Codacy only analyzes commits to private repositories from contributors who are members of the corresponding organization on Codacy. Important Make sure that you invite or ask your team members to join your organization on Codacy so that Codacy analyzes their commits on private repositories. To list and manage the members of your organization, open your organization Settings , page People . This page also shows when the organization members last logged in to Codacy: Joining an organization # To become a member of an organization on Codacy you must sign up to Codacy using your Git provider and follow the instructions to either join an existing organization or add a new one. To join or add an organization after having complete the signup process, click Organizations on the top right-hand menu under your avatar: Note On Codacy Cloud , organization owners control if team members need an approval before joining their organizations. Adding people to your organization # On Codacy Cloud , organization owners can also invite team members to their organization on Codacy. This is useful to allow Codacy to analyze commits in private repositories by contributors who haven't signed up to Codacy or joined the organization yet. To add members to your organization: Open your organization Settings , page People , and click the button Add people . Select people from the list displaying pending requests to join the organization, as well as recent contributors to the private repositories in your organization. Alternatively, click Add people using email addresses to manually enter the list of email addresses of the people you wish to add. Confirm the updated billing details displayed at the bottom of the window and click the button Add people . Removing people from your organization # Members of an organization on Codacy can remove themselves from the organization, and organization owners can also remove other members. When a member leaves an organization: Codacy stops analyzing commits to private repositories in the organization from contributors who are no longer members of the organization on Codacy Codacy stops analyzing repositories that were added by the member Organizations must have at least one owner, so when the last organization owner leaves the organization they must either add someone else as owner or delete the organization To remove members from your organization open your organization Settings , page People , and click the icon next to the members you wish to remove:","title":"Managing people"},{"location":"organizations/managing-people/#managing-people","text":"Members of an organization can see the details of the repositories in that organization and add new repositories to be analyzed by Codacy. Besides this, Codacy only analyzes commits to private repositories from contributors who are members of the corresponding organization on Codacy. Important Make sure that you invite or ask your team members to join your organization on Codacy so that Codacy analyzes their commits on private repositories. To list and manage the members of your organization, open your organization Settings , page People . This page also shows when the organization members last logged in to Codacy:","title":"Managing people"},{"location":"organizations/managing-people/#joining","text":"To become a member of an organization on Codacy you must sign up to Codacy using your Git provider and follow the instructions to either join an existing organization or add a new one. To join or add an organization after having complete the signup process, click Organizations on the top right-hand menu under your avatar: Note On Codacy Cloud , organization owners control if team members need an approval before joining their organizations.","title":"Joining an organization"},{"location":"organizations/managing-people/#adding-people","text":"On Codacy Cloud , organization owners can also invite team members to their organization on Codacy. This is useful to allow Codacy to analyze commits in private repositories by contributors who haven't signed up to Codacy or joined the organization yet. To add members to your organization: Open your organization Settings , page People , and click the button Add people . Select people from the list displaying pending requests to join the organization, as well as recent contributors to the private repositories in your organization. Alternatively, click Add people using email addresses to manually enter the list of email addresses of the people you wish to add. Confirm the updated billing details displayed at the bottom of the window and click the button Add people .","title":"Adding people to your organization"},{"location":"organizations/managing-people/#removing-people","text":"Members of an organization on Codacy can remove themselves from the organization, and organization owners can also remove other members. When a member leaves an organization: Codacy stops analyzing commits to private repositories in the organization from contributors who are no longer members of the organization on Codacy Codacy stops analyzing repositories that were added by the member Organizations must have at least one owner, so when the last organization owner leaves the organization they must either add someone else as owner or delete the organization To remove members from your organization open your organization Settings , page People , and click the icon next to the members you wish to remove:","title":"Removing people from your organization"},{"location":"organizations/managing-repositories/","text":"Managing repositories # To see a list of the repositories that Codacy is monitoring, open the page Repositories under your organization. This page lists the repositories that already belong to your organization on Codacy, and provides additional information that allows you to compare the repositories in the list: Grade Issues metric Complexity metric Duplication metric Coverage metric Last updated time The list also displays error messages and troubleshooting guidance for repositories that have an issue, such as when there are no committers added to the organization or when Codacy stopped having access to the repository. If you have many repositories, you can use the search field above the list to quickly find a specific repository. Adding a repository # Analyzing private repositories is only available on paid plans To add a new repository to Codacy, click the button Add repository at the top right-hand corner of the page. This opens a window listing the repositories in your Git provider organization that don't belong to your organization on Codacy yet. Important To see your repositories in this list, make sure that you have admin permissions over the repositories on the Git provider and that Codacy has permissions to access the repositories . Add one or multiple repositories to your organization by clicking Add next to the repositories. If you have many repositories, you can use the search field above the list to quickly find a specific repository. After adding repositories, close the window to return to the list of repositories in your organization. Although Codacy will immediately start analyzing the new repositories, they will display empty metrics until the first analysis returns results.","title":"Managing repositories"},{"location":"organizations/managing-repositories/#managing-repositories","text":"To see a list of the repositories that Codacy is monitoring, open the page Repositories under your organization. This page lists the repositories that already belong to your organization on Codacy, and provides additional information that allows you to compare the repositories in the list: Grade Issues metric Complexity metric Duplication metric Coverage metric Last updated time The list also displays error messages and troubleshooting guidance for repositories that have an issue, such as when there are no committers added to the organization or when Codacy stopped having access to the repository. If you have many repositories, you can use the search field above the list to quickly find a specific repository.","title":"Managing repositories"},{"location":"organizations/managing-repositories/#adding-a-repository","text":"Analyzing private repositories is only available on paid plans To add a new repository to Codacy, click the button Add repository at the top right-hand corner of the page. This opens a window listing the repositories in your Git provider organization that don't belong to your organization on Codacy yet. Important To see your repositories in this list, make sure that you have admin permissions over the repositories on the Git provider and that Codacy has permissions to access the repositories . Add one or multiple repositories to your organization by clicking Add next to the repositories. If you have many repositories, you can use the search field above the list to quickly find a specific repository. After adding repositories, close the window to return to the list of repositories in your organization. Although Codacy will immediately start analyzing the new repositories, they will display empty metrics until the first analysis returns results.","title":"Adding a repository"},{"location":"organizations/organization-overview/","text":"Organization Overview # This feature is only available on paid plans The Organization Overview provides an overview of repositories that belong to the same Git provider organization. Here you can compare their statuses and check for items that require your attention. Note The Organization Overview calculates metrics and displays data only for the repositories that you have access to. This means that depending on their permissions, two users could see different results on their Organization Overview. To access your Organization Overview, select an organization from the top navigation bar and select Overview on the left navigation sidebar. On the Organization Overview you have three areas to help you monitor your repositories: Overall quality chart Open pull requests Last updated repositories The following sections provide a detailed description of each dashboard area. Overall quality chart # The Overall quality chart compares the repositories in your organization regarding grade, issues, complex files, duplication, and coverage. Each tab displays the average value for the corresponding metric across your repositories. Hover the mouse pointer over the bars to see the metrics for the corresponding repositories. Click the bars to navigate directly to the corresponding repository. If you have over 8 repositories, the chart displays your repositories grouped by grade or percentage intervals: Tip If you don't have coverage set up for any of your repositories yet, the coverage tab provides you with instructions on how to add coverage for your repositories . Open pull requests # The Most problematic tab displays a short list of the open pull requests that aren't up to standards and have the most potential to negatively affect your code quality. Click directly on each pull request to see more details. The Last updated tab displays open pull requests sorted by the date of update with one of the following status: Not up to standards Up to standards Analysis failed (something went wrong during the analysis) Analyzing (intermediate status while Codacy is analyzing the pull request) Last updated repositories # The Last updated repositories list displays the last updated repositories, sorted by reverse date of the last update. Each card displays the date of the last update and the current grade of the repository. Click See all to see all repositories in your organization. Important If you're using Bitbucket Server the list displays the repositories in alphabetical order because Codacy can't obtain the information on when the repositories were last updated from this Git provider.","title":"Organization Overview"},{"location":"organizations/organization-overview/#organization-overview","text":"This feature is only available on paid plans The Organization Overview provides an overview of repositories that belong to the same Git provider organization. Here you can compare their statuses and check for items that require your attention. Note The Organization Overview calculates metrics and displays data only for the repositories that you have access to. This means that depending on their permissions, two users could see different results on their Organization Overview. To access your Organization Overview, select an organization from the top navigation bar and select Overview on the left navigation sidebar. On the Organization Overview you have three areas to help you monitor your repositories: Overall quality chart Open pull requests Last updated repositories The following sections provide a detailed description of each dashboard area.","title":"Organization Overview"},{"location":"organizations/organization-overview/#overall-quality-chart","text":"The Overall quality chart compares the repositories in your organization regarding grade, issues, complex files, duplication, and coverage. Each tab displays the average value for the corresponding metric across your repositories. Hover the mouse pointer over the bars to see the metrics for the corresponding repositories. Click the bars to navigate directly to the corresponding repository. If you have over 8 repositories, the chart displays your repositories grouped by grade or percentage intervals: Tip If you don't have coverage set up for any of your repositories yet, the coverage tab provides you with instructions on how to add coverage for your repositories .","title":"Overall quality chart"},{"location":"organizations/organization-overview/#open-pull-requests","text":"The Most problematic tab displays a short list of the open pull requests that aren't up to standards and have the most potential to negatively affect your code quality. Click directly on each pull request to see more details. The Last updated tab displays open pull requests sorted by the date of update with one of the following status: Not up to standards Up to standards Analysis failed (something went wrong during the analysis) Analyzing (intermediate status while Codacy is analyzing the pull request)","title":"Open pull requests"},{"location":"organizations/organization-overview/#last-updated-repositories","text":"The Last updated repositories list displays the last updated repositories, sorted by reverse date of the last update. Each card displays the date of the last update and the current grade of the repository. Click See all to see all repositories in your organization. Important If you're using Bitbucket Server the list displays the repositories in alphabetical order because Codacy can't obtain the information on when the repositories were last updated from this Git provider.","title":"Last updated repositories"},{"location":"organizations/roles-and-permissions-for-synced-organizations/","text":"Roles and permissions for synced organizations # Depending on your role on the Git provider you will have different permissions on Codacy: Provider Role Join organization View private repository Ignore issues and files, configure code patterns and file extensions, manage branches Configure repository Add repository Manage coding standards, Bulk copy patterns Invite and accept members, modify billing GitHub Cloud and GitHub Enterprise Outside Collaborator 1 No No No No No No No Repository Read Yes 2 Yes Configurable No No No No Repository Triage Yes 2 Yes Configurable No No No No Repository Write Yes 2 Yes Configurable Yes No No No Repository Maintain Yes 2 Yes Configurable Yes No No No Repository Admin Yes 2 Yes Yes Yes Yes No No Organization Owner Yes 2 Yes Yes Yes Yes Yes Yes GitLab Cloud and GitLab Enterprise External User 1 No No No No No No No Guest Yes 2 Yes Configurable No No No No Reporter Yes 2 Yes Configurable No No No No Developer Yes 2 Yes Configurable No No No No Maintainer Yes 2 Yes Configurable No No No No Owner Yes 2 Yes Yes Yes Yes Yes Yes Administrator Yes 2 Yes Yes Yes Yes Yes Yes Bitbucket Cloud and Bitbucket Server Read, Write 3 Yes 2 Yes Configurable No No No No Admin Yes 2 Yes Yes Yes Yes Yes Yes 1 : Outside Collaborators and External Users aren't supported as Members of organizations on Codacy. However, you can add them so that Codacy analyzes their commits to private repositories. 2 : Joining an organization may need an approval depending on your setting for accepting new people . 3 : Codacy can't distinguish the Bitbucket roles Read and Write because of a limitation on the Bitbucket API. See managing people to list and manage the members of your organization. Configuring who can change analysis configurations # By default, only users with Write permission on a repository can change analysis configurations. To change this, open your organization Settings , page Member privileges , and define the lowest permission required to perform the following operations on the repositories of your organization: Ignore issues Ignore files Configure code patterns Configure file extensions Manage branches Codacy doesn't allow changing the role of a user, as the roles on Codacy are mirrored from your Git provider and applied to each repository.","title":"Roles and permissions for synced organizations"},{"location":"organizations/roles-and-permissions-for-synced-organizations/#roles-and-permissions-for-synced-organizations","text":"Depending on your role on the Git provider you will have different permissions on Codacy: Provider Role Join organization View private repository Ignore issues and files, configure code patterns and file extensions, manage branches Configure repository Add repository Manage coding standards, Bulk copy patterns Invite and accept members, modify billing GitHub Cloud and GitHub Enterprise Outside Collaborator 1 No No No No No No No Repository Read Yes 2 Yes Configurable No No No No Repository Triage Yes 2 Yes Configurable No No No No Repository Write Yes 2 Yes Configurable Yes No No No Repository Maintain Yes 2 Yes Configurable Yes No No No Repository Admin Yes 2 Yes Yes Yes Yes No No Organization Owner Yes 2 Yes Yes Yes Yes Yes Yes GitLab Cloud and GitLab Enterprise External User 1 No No No No No No No Guest Yes 2 Yes Configurable No No No No Reporter Yes 2 Yes Configurable No No No No Developer Yes 2 Yes Configurable No No No No Maintainer Yes 2 Yes Configurable No No No No Owner Yes 2 Yes Yes Yes Yes Yes Yes Administrator Yes 2 Yes Yes Yes Yes Yes Yes Bitbucket Cloud and Bitbucket Server Read, Write 3 Yes 2 Yes Configurable No No No No Admin Yes 2 Yes Yes Yes Yes Yes Yes 1 : Outside Collaborators and External Users aren't supported as Members of organizations on Codacy. However, you can add them so that Codacy analyzes their commits to private repositories. 2 : Joining an organization may need an approval depending on your setting for accepting new people . 3 : Codacy can't distinguish the Bitbucket roles Read and Write because of a limitation on the Bitbucket API. See managing people to list and manage the members of your organization.","title":"Roles and permissions for synced organizations"},{"location":"organizations/roles-and-permissions-for-synced-organizations/#change-analysis-configuration","text":"By default, only users with Write permission on a repository can change analysis configurations. To change this, open your organization Settings , page Member privileges , and define the lowest permission required to perform the following operations on the repositories of your organization: Ignore issues Ignore files Configure code patterns Configure file extensions Manage branches Codacy doesn't allow changing the role of a user, as the roles on Codacy are mirrored from your Git provider and applied to each repository.","title":"Configuring who can change analysis configurations"},{"location":"organizations/using-a-coding-standard/","text":"Using a coding standard # This is a beta feature This is a new Codacy feature and we're continuing to improve it. For more information read the release announcement or watch a demo (3 min) to learn how to create a coding standard for your organization. Create a coding standard on your organization to define and apply shared tool and code pattern configurations consistently across your repositories. You can also apply the coding standard to new repositories automatically by defining the coding standard as default. The organization coding standard helps you ensure that Codacy analyzes multiple repositories with the same tool and code pattern settings. For example, you can use the organization coding standard to ensure that all your repositories and teams are following the same security rules or coding conventions. When you customize the tools or code patterns of a repository that follows the coding standard, Codacy warns you that the repository will stop following the coding standard and asks for your confirmation. Creating a coding standard # To create a coding standard for your organization: Open your organization Coding standards page, tab Coding standards . Name your coding standard and click Create standard . Optionally, select a repository that Codacy will use as a baseline to bootstrap the tool and pattern configurations for the new coding standard. This is useful if you already have a repository with code patterns configured that you wish to use as a template for creating the coding standard. Select all the programming languages that the new coding standard will cover and click Next: Tools and patterns . The coding standard will only include configurations for the tools that support at least one of the selected languages. Configure the tools and patterns of the coding standard and click Next: Select and apply to repositories . Toggle the tools that Codacy will run when analyzing your code For each enabled tool, configure the code patterns that the tool will use You can use the filters to help you find the relevant tools and code patterns. The recommended configurations are manually curated by Codacy or based on the default code patterns of the tools and are marked with the icon . Select existing repositories that should follow the new coding standard and click Save and apply standard . Important Saving and applying a coding standard overwrites the existing tool and code pattern configurations on the selected repositories for all tools included in the coding standard. Codacy will start using the new coding standard on the next analysis of each selected repository. Setting a coding standard as default # New repositories in your organization will automatically follow the default coding standard. To set a coding standard as default: Open your organization Coding standards page, tab Coding standards . Toggle Make default on the coding standard card. Editing a coding standard # To edit an existing coding standard or change the repositories that follow that coding standard: Open your organization Coding standards page, tab Coding standards . Click the edit icon on the coding standard card or, if you only want to apply an existing coding standard to a different set of repositories, click the link Apply coding standard to your repositories to navigate directly to the repository selection step. Make your changes to the current coding standard configurations and click the button Next to advance between the following pages: The programming languages that the coding standard applies to The tool and code pattern configurations of the coding standard The repositories that follow the coding standard You can also rename the coding standard using the input at the bottom of the first page of the wizard: Click the button Save and apply standard on the repository selection page to save your changes to the coding standard. Important Saving and applying a coding standard overwrites the existing tool and code pattern configurations on the selected repositories for all tools included in the coding standard. Codacy will start using the updated coding standard on the next analysis of each selected repository. Tip To ensure that all new repositories automatically follow the coding standard, set the coding standard as default . See also # Copying code patterns between repositories Configuring code patterns on each repository Importing pattern configurations from another repository","title":"Using a coding standard"},{"location":"organizations/using-a-coding-standard/#using-a-coding-standard","text":"This is a beta feature This is a new Codacy feature and we're continuing to improve it. For more information read the release announcement or watch a demo (3 min) to learn how to create a coding standard for your organization. Create a coding standard on your organization to define and apply shared tool and code pattern configurations consistently across your repositories. You can also apply the coding standard to new repositories automatically by defining the coding standard as default. The organization coding standard helps you ensure that Codacy analyzes multiple repositories with the same tool and code pattern settings. For example, you can use the organization coding standard to ensure that all your repositories and teams are following the same security rules or coding conventions. When you customize the tools or code patterns of a repository that follows the coding standard, Codacy warns you that the repository will stop following the coding standard and asks for your confirmation.","title":"Using a coding standard"},{"location":"organizations/using-a-coding-standard/#creating","text":"To create a coding standard for your organization: Open your organization Coding standards page, tab Coding standards . Name your coding standard and click Create standard . Optionally, select a repository that Codacy will use as a baseline to bootstrap the tool and pattern configurations for the new coding standard. This is useful if you already have a repository with code patterns configured that you wish to use as a template for creating the coding standard. Select all the programming languages that the new coding standard will cover and click Next: Tools and patterns . The coding standard will only include configurations for the tools that support at least one of the selected languages. Configure the tools and patterns of the coding standard and click Next: Select and apply to repositories . Toggle the tools that Codacy will run when analyzing your code For each enabled tool, configure the code patterns that the tool will use You can use the filters to help you find the relevant tools and code patterns. The recommended configurations are manually curated by Codacy or based on the default code patterns of the tools and are marked with the icon . Select existing repositories that should follow the new coding standard and click Save and apply standard . Important Saving and applying a coding standard overwrites the existing tool and code pattern configurations on the selected repositories for all tools included in the coding standard. Codacy will start using the new coding standard on the next analysis of each selected repository.","title":"Creating a coding standard"},{"location":"organizations/using-a-coding-standard/#set-default","text":"New repositories in your organization will automatically follow the default coding standard. To set a coding standard as default: Open your organization Coding standards page, tab Coding standards . Toggle Make default on the coding standard card.","title":"Setting a coding standard as default"},{"location":"organizations/using-a-coding-standard/#editing","text":"To edit an existing coding standard or change the repositories that follow that coding standard: Open your organization Coding standards page, tab Coding standards . Click the edit icon on the coding standard card or, if you only want to apply an existing coding standard to a different set of repositories, click the link Apply coding standard to your repositories to navigate directly to the repository selection step. Make your changes to the current coding standard configurations and click the button Next to advance between the following pages: The programming languages that the coding standard applies to The tool and code pattern configurations of the coding standard The repositories that follow the coding standard You can also rename the coding standard using the input at the bottom of the first page of the wizard: Click the button Save and apply standard on the repository selection page to save your changes to the coding standard. Important Saving and applying a coding standard overwrites the existing tool and code pattern configurations on the selected repositories for all tools included in the coding standard. Codacy will start using the updated coding standard on the next analysis of each selected repository. Tip To ensure that all new repositories automatically follow the coding standard, set the coding standard as default .","title":"Editing a coding standard"},{"location":"organizations/using-a-coding-standard/#see-also","text":"Copying code patterns between repositories Configuring code patterns on each repository Importing pattern configurations from another repository","title":"See also"},{"location":"organizations/what-are-synced-organizations/","text":"What are synced organizations # Synced organizations let you automatically import your Git provider organizations, repositories (including your personal repositories that don't belong to a Git provider organization), and team members into Codacy with a few clicks. Changes to the organizations, repositories, and team members are synchronized with Codacy in real-time, avoiding the manual management of repositories and teams. Adding an organization # To add a new organization to Codacy, select Add organization on the navigation menu. This opens the list of organizations on your Git providers. The organization with the same name as your Git provider username contains your personal repositories. To add a new organization to Codacy, click the link Add for that organization. To join an organization that's already on Codacy, click the link Join for that organization. To add organizations from a Git provider not yet listed on this page, click Add provider and give the necessary permissions for Codacy to sync with the new Git provider and display your organizations. Note If you can't see the organization you're looking for, follow the instructions in the card Adding new organizations or these troubleshooting instructions . Updates on the Git provider # In case you change your organization or repository on the Git provider, some changes will be reflected on Codacy. The following cases are supported: Provider Rename repository Change repository visibility Delete repository Rename organization or group Remove member from organization or group Delete organization or group GitHub Cloud Yes Yes Yes Yes Yes Yes GitHub Enterprise Yes Yes Yes Yes Yes Yes GitLab Cloud No No No No No No GitLab Enterprise Yes Yes Yes Yes Yes Yes Bitbucket Cloud Yes Yes No No No No Bitbucket Server Yes Yes No No No No Check out the roles and permission mapping from the Git providers . Deleting an organization # Delete an organization to remove that organization and all its repositories from Codacy. To delete an organization, open the Profile page and click the button Delete organization . Note If you're using Codacy Cloud we will ask for your feedback on why you're deleting your organization. See also # How does Codacy support GitLab Cloud? How does Codacy support GitLab Enterprise? How does Codacy support Bitbucket Cloud? How does Codacy support Bitbucket Server?","title":"What are synced organizations"},{"location":"organizations/what-are-synced-organizations/#what-are-synced-organizations","text":"Synced organizations let you automatically import your Git provider organizations, repositories (including your personal repositories that don't belong to a Git provider organization), and team members into Codacy with a few clicks. Changes to the organizations, repositories, and team members are synchronized with Codacy in real-time, avoiding the manual management of repositories and teams.","title":"What are synced organizations"},{"location":"organizations/what-are-synced-organizations/#adding-an-organization","text":"To add a new organization to Codacy, select Add organization on the navigation menu. This opens the list of organizations on your Git providers. The organization with the same name as your Git provider username contains your personal repositories. To add a new organization to Codacy, click the link Add for that organization. To join an organization that's already on Codacy, click the link Join for that organization. To add organizations from a Git provider not yet listed on this page, click Add provider and give the necessary permissions for Codacy to sync with the new Git provider and display your organizations. Note If you can't see the organization you're looking for, follow the instructions in the card Adding new organizations or these troubleshooting instructions .","title":"Adding an organization"},{"location":"organizations/what-are-synced-organizations/#updates-on-the-git-provider","text":"In case you change your organization or repository on the Git provider, some changes will be reflected on Codacy. The following cases are supported: Provider Rename repository Change repository visibility Delete repository Rename organization or group Remove member from organization or group Delete organization or group GitHub Cloud Yes Yes Yes Yes Yes Yes GitHub Enterprise Yes Yes Yes Yes Yes Yes GitLab Cloud No No No No No No GitLab Enterprise Yes Yes Yes Yes Yes Yes Bitbucket Cloud Yes Yes No No No No Bitbucket Server Yes Yes No No No No Check out the roles and permission mapping from the Git providers .","title":"Updates on the Git provider"},{"location":"organizations/what-are-synced-organizations/#deleting-an-organization","text":"Delete an organization to remove that organization and all its repositories from Codacy. To delete an organization, open the Profile page and click the button Delete organization . Note If you're using Codacy Cloud we will ask for your feedback on why you're deleting your organization.","title":"Deleting an organization"},{"location":"organizations/what-are-synced-organizations/#see-also","text":"How does Codacy support GitLab Cloud? How does Codacy support GitLab Enterprise? How does Codacy support Bitbucket Cloud? How does Codacy support Bitbucket Server?","title":"See also"},{"location":"related-tools/codacy-plugin-tools/","text":"Codacy plugin tools # Codacy uses a system of plugin tools to extend the scope of analyses on your repositories, allowing support for new languages and tools every day. The Codacy GitHub repositories list the version and extra plugins supported by each plugin tool. You can also submit GitHub issues on these repositories. Tool name Codacy GitHub repository aligncheck codacy/codacy-aligncheck Ameba codacy/codacy-ameba Bandit codacy/codacy-bandit Brakeman codacy/codacy-brakeman bundler-audit codacy/codacy-bundler-audit Checkstyle codacy/codacy-checkstyle Checkov codacy/codacy-checkov Clang-Tidy codacy/codacy-clang-tidy Codacy Scalameta Pro codacy/codacy-scalameta Faux Pas codacy/codacy-faux-pas Gosec codacy/codacy-gosec deadcode codacy/codacy-deadcode CodeNarc codacy/codacy-codenarc CoffeeLint codacy/codacy-coffeelint Cppcheck codacy/codacy-cppcheck Credo codacy/codacy-credo CSSLint codacy/codacy-csslint detekt codacy/codacy-detekt ESLint codacy/codacy-eslint Flawfinder codacy/codacy-flawfinder Revive codacy/codacy-gorevive Hadolint codacy/codacy-hadolint Jackson Linter codacy/codacy-jackson-linter JSHint codacy/codacy-jshint PHP_CodeSniffer codacy/codacy-codesniffer PHP Mess Detector codacy/codacy-phpmd PMD codacy/codacy-pmd Prospector codacy/codacy-prospector PSScriptAnalyser codacy/codacy-psscriptanalyzer Pylint codacy/codacy-pylint markdownlint codacy/codacy-markdownlint remark-lint codacy/codacy-remark-lint RuboCop codacy/codacy-rubocop Scalastyle codacy/codacy-scalastyle ShellCheck codacy/codacy-shellcheck SonarC# codacy/codacy-sonar-csharp SonarVB codacy/codacy-sonar-visual-basic Spectral codacy/codacy-spectral SpotBugs codacy/codacy-spotbugs SQLint codacy/codacy-sqlint Staticcheck codacy/codacy-staticcheck Stylelint codacy/codacy-stylelint SwiftLint codacy/codacy-swiftlint Tailor codacy/codacy-tailor TSLint codacy/codacy-tslint TSQLLint codacy/codacy-tsqllint","title":"Codacy plugin tools"},{"location":"related-tools/codacy-plugin-tools/#codacy-plugin-tools","text":"Codacy uses a system of plugin tools to extend the scope of analyses on your repositories, allowing support for new languages and tools every day. The Codacy GitHub repositories list the version and extra plugins supported by each plugin tool. You can also submit GitHub issues on these repositories. Tool name Codacy GitHub repository aligncheck codacy/codacy-aligncheck Ameba codacy/codacy-ameba Bandit codacy/codacy-bandit Brakeman codacy/codacy-brakeman bundler-audit codacy/codacy-bundler-audit Checkstyle codacy/codacy-checkstyle Checkov codacy/codacy-checkov Clang-Tidy codacy/codacy-clang-tidy Codacy Scalameta Pro codacy/codacy-scalameta Faux Pas codacy/codacy-faux-pas Gosec codacy/codacy-gosec deadcode codacy/codacy-deadcode CodeNarc codacy/codacy-codenarc CoffeeLint codacy/codacy-coffeelint Cppcheck codacy/codacy-cppcheck Credo codacy/codacy-credo CSSLint codacy/codacy-csslint detekt codacy/codacy-detekt ESLint codacy/codacy-eslint Flawfinder codacy/codacy-flawfinder Revive codacy/codacy-gorevive Hadolint codacy/codacy-hadolint Jackson Linter codacy/codacy-jackson-linter JSHint codacy/codacy-jshint PHP_CodeSniffer codacy/codacy-codesniffer PHP Mess Detector codacy/codacy-phpmd PMD codacy/codacy-pmd Prospector codacy/codacy-prospector PSScriptAnalyser codacy/codacy-psscriptanalyzer Pylint codacy/codacy-pylint markdownlint codacy/codacy-markdownlint remark-lint codacy/codacy-remark-lint RuboCop codacy/codacy-rubocop Scalastyle codacy/codacy-scalastyle ShellCheck codacy/codacy-shellcheck SonarC# codacy/codacy-sonar-csharp SonarVB codacy/codacy-sonar-visual-basic Spectral codacy/codacy-spectral SpotBugs codacy/codacy-spotbugs SQLint codacy/codacy-sqlint Staticcheck codacy/codacy-staticcheck Stylelint codacy/codacy-stylelint SwiftLint codacy/codacy-swiftlint Tailor codacy/codacy-tailor TSLint codacy/codacy-tslint TSQLLint codacy/codacy-tsqllint","title":"Codacy plugin tools"},{"location":"related-tools/local-analysis/client-side-tools/","text":"Client-side tools # Client-side tools enable you to run analysis either locally or as part of your CI process and integrating the results into your Codacy workflow. This way, Codacy presents the analysis information reported by your local tools alongside all other code quality information on the Codacy dashboards. Codacy supports client-side tools in two ways: Standalone tools Codacy provides auxiliary converters that parse the output of third-party tools and convert to a format that you then upload to Codacy using the API. You must download, configure, and run the third-party tools yourself. You can't configure these tools on the Codacy UI, since you manage their configuration locally. Containerized tools Codacy provides a Docker image for the tools, and you run the images using the Codacy Analysis CLI . The Codacy Analysis CLI automatically fetches the code pattern settings that you define on the Codacy UI and applies them when running these tools. Running the client-side tools # Tip If you're using GitHub we recommend that you use the Codacy Analysis CLI GitHub Action to run the client-side tools and upload the results to Codacy. Follow the instructions on how to run the supported client-side tools: aligncheck (Containerized) Clang-Tidy (Standalone) deadcode (Containerized) Faux Pas (Standalone) Gosec (Standalone) SpotBugs (Containerized) Staticcheck (Standalone) See also # See the full list of supported languages and tools to check the programming languages that the client-side tools can analyze.","title":"Client-side tools"},{"location":"related-tools/local-analysis/client-side-tools/#client-side-tools","text":"Client-side tools enable you to run analysis either locally or as part of your CI process and integrating the results into your Codacy workflow. This way, Codacy presents the analysis information reported by your local tools alongside all other code quality information on the Codacy dashboards. Codacy supports client-side tools in two ways: Standalone tools Codacy provides auxiliary converters that parse the output of third-party tools and convert to a format that you then upload to Codacy using the API. You must download, configure, and run the third-party tools yourself. You can't configure these tools on the Codacy UI, since you manage their configuration locally. Containerized tools Codacy provides a Docker image for the tools, and you run the images using the Codacy Analysis CLI . The Codacy Analysis CLI automatically fetches the code pattern settings that you define on the Codacy UI and applies them when running these tools.","title":"Client-side tools"},{"location":"related-tools/local-analysis/client-side-tools/#running-the-client-side-tools","text":"Tip If you're using GitHub we recommend that you use the Codacy Analysis CLI GitHub Action to run the client-side tools and upload the results to Codacy. Follow the instructions on how to run the supported client-side tools: aligncheck (Containerized) Clang-Tidy (Standalone) deadcode (Containerized) Faux Pas (Standalone) Gosec (Standalone) SpotBugs (Containerized) Staticcheck (Standalone)","title":"Running the client-side tools"},{"location":"related-tools/local-analysis/client-side-tools/#see-also","text":"See the full list of supported languages and tools to check the programming languages that the client-side tools can analyze.","title":"See also"},{"location":"related-tools/local-analysis/running-aligncheck/","text":"Running aligncheck # To run aligncheck as a client-side tool : Enable Run analysis on your build server in your repository Settings , tab General , Repository analysis . This setting enables Codacy to wait for the results of the local analysis before resuming the analysis of your commits. Set up an API token to authenticate on Codacy: If you're setting up one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up multiple repositories , obtain an account API Token and set the following environment variable to specify the account API token: export CODACY_API_TOKEN = <your account API token> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Download and run the Codacy Analysis CLI on the root of the repository, specifying the tool aligncheck. codacy-analysis-cli analyze --tool aligncheck \\ --allow-network \\ --upload \\ --verbose If you're using an account API token , you must also provide the flags --provider , --username , and --project . You can obtain the values for these flags from the URL of your repository dashboard on Codacy: codacy-analysis-cli analyze --provider <gh, ghe, gl, gle, bb, or bbe> \\ --username <name of your Codacy organization> \\ --project <name of your repository> \\ --tool aligncheck \\ --allow-network \\ --upload \\ --verbose The Codacy Analysis CLI runs aligncheck on your repository and uploads the results to Codacy so you can use them in your workflow.","title":"Running aligncheck"},{"location":"related-tools/local-analysis/running-aligncheck/#running-aligncheck","text":"To run aligncheck as a client-side tool : Enable Run analysis on your build server in your repository Settings , tab General , Repository analysis . This setting enables Codacy to wait for the results of the local analysis before resuming the analysis of your commits. Set up an API token to authenticate on Codacy: If you're setting up one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up multiple repositories , obtain an account API Token and set the following environment variable to specify the account API token: export CODACY_API_TOKEN = <your account API token> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Download and run the Codacy Analysis CLI on the root of the repository, specifying the tool aligncheck. codacy-analysis-cli analyze --tool aligncheck \\ --allow-network \\ --upload \\ --verbose If you're using an account API token , you must also provide the flags --provider , --username , and --project . You can obtain the values for these flags from the URL of your repository dashboard on Codacy: codacy-analysis-cli analyze --provider <gh, ghe, gl, gle, bb, or bbe> \\ --username <name of your Codacy organization> \\ --project <name of your repository> \\ --tool aligncheck \\ --allow-network \\ --upload \\ --verbose The Codacy Analysis CLI runs aligncheck on your repository and uploads the results to Codacy so you can use them in your workflow.","title":"Running aligncheck"},{"location":"related-tools/local-analysis/running-deadcode/","text":"Running deadcode # To run deadcode as a client-side tool : Enable Run analysis on your build server in your repository Settings , tab General , Repository analysis . This setting enables Codacy to wait for the results of the local analysis before resuming the analysis of your commits. Set up an API token to authenticate on Codacy: If you're setting up one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up multiple repositories , obtain an account API Token and set the following environment variable to specify the account API token: export CODACY_API_TOKEN = <your account API token> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Download and run the Codacy Analysis CLI on the root of the repository, specifying the tool deadcode. codacy-analysis-cli analyze --tool deadcode \\ --allow-network \\ --upload \\ --verbose If you're using an account API token , you must also provide the flags --provider , --username , and --project . You can obtain the values for these flags from the URL of your repository dashboard on Codacy: codacy-analysis-cli analyze --provider <gh, ghe, gl, gle, bb, or bbe> \\ --username <name of your Codacy organization> \\ --project <name of your repository> \\ --tool deadcode \\ --allow-network \\ --upload \\ --verbose The Codacy Analysis CLI runs deadcode on your repository and uploads the results to Codacy so you can use them in your workflow.","title":"Running deadcode"},{"location":"related-tools/local-analysis/running-deadcode/#running-deadcode","text":"To run deadcode as a client-side tool : Enable Run analysis on your build server in your repository Settings , tab General , Repository analysis . This setting enables Codacy to wait for the results of the local analysis before resuming the analysis of your commits. Set up an API token to authenticate on Codacy: If you're setting up one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up multiple repositories , obtain an account API Token and set the following environment variable to specify the account API token: export CODACY_API_TOKEN = <your account API token> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Download and run the Codacy Analysis CLI on the root of the repository, specifying the tool deadcode. codacy-analysis-cli analyze --tool deadcode \\ --allow-network \\ --upload \\ --verbose If you're using an account API token , you must also provide the flags --provider , --username , and --project . You can obtain the values for these flags from the URL of your repository dashboard on Codacy: codacy-analysis-cli analyze --provider <gh, ghe, gl, gle, bb, or bbe> \\ --username <name of your Codacy organization> \\ --project <name of your repository> \\ --tool deadcode \\ --allow-network \\ --upload \\ --verbose The Codacy Analysis CLI runs deadcode on your repository and uploads the results to Codacy so you can use them in your workflow.","title":"Running deadcode"},{"location":"related-tools/local-analysis/running-local-analysis/","text":"Running local analysis # Set up the Codacy Analysis CLI # Follow the installation guide to get the codacy-analysis-cli executable running on your build server. Running an analysis with the CLI # At the moment, the CLI still requires to retrieve the configuration from Codacy to perform an analysis. In order to access the repository, you will have to obtain a Project Token as explained in the CLI documentation . Then, you can invoke the CLI to get a report with all the issues: Important If you're using Codacy Self-hosted you must also specify the endpoint where the Codacy instance is running either by using the flag --codacy-api-base-url or the environment variable CODACY_API_BASE_URL . codacy-analysis-cli analyze --directory <SOURCE-CODE-PATH> \\ --project-token <PROJECT-TOKEN> \\ --allow-network \\ --verbose \\ --upload If you don't specify the tool, the analysis will run as Codacy does in the backend. To obtain results for a particular tool , specify the tool with --tool . Advanced configuration # For advanced configuration details, check all the CLI flags in the CLI documentation . Some flags you might be interested in: --allow-network - to run the tools that require compilation like SpotBugs, FindBugs, FindSecBugs --max-allowed-issues - returns a non-zero exit code when a certain number of issues is exceeded --fail-if-incomplete - to return a non-zero exit code when any tool fails to run successfully Notes on ignored issues # If you have ignored issues on Codacy be aware that the CLI won't respect those ignored issues when printing the results locally. However, if you upload the results, the ignored issues will be reflected on the Codacy UI after the analysis is complete.","title":"Running local analysis"},{"location":"related-tools/local-analysis/running-local-analysis/#running-local-analysis","text":"","title":"Running local analysis"},{"location":"related-tools/local-analysis/running-local-analysis/#set-up-the-codacy-analysis-cli","text":"Follow the installation guide to get the codacy-analysis-cli executable running on your build server.","title":"Set up the Codacy Analysis CLI"},{"location":"related-tools/local-analysis/running-local-analysis/#running-an-analysis-with-the-cli","text":"At the moment, the CLI still requires to retrieve the configuration from Codacy to perform an analysis. In order to access the repository, you will have to obtain a Project Token as explained in the CLI documentation . Then, you can invoke the CLI to get a report with all the issues: Important If you're using Codacy Self-hosted you must also specify the endpoint where the Codacy instance is running either by using the flag --codacy-api-base-url or the environment variable CODACY_API_BASE_URL . codacy-analysis-cli analyze --directory <SOURCE-CODE-PATH> \\ --project-token <PROJECT-TOKEN> \\ --allow-network \\ --verbose \\ --upload If you don't specify the tool, the analysis will run as Codacy does in the backend. To obtain results for a particular tool , specify the tool with --tool .","title":"Running an analysis with the CLI"},{"location":"related-tools/local-analysis/running-local-analysis/#notes-on-ignored-issues","text":"If you have ignored issues on Codacy be aware that the CLI won't respect those ignored issues when printing the results locally. However, if you upload the results, the ignored issues will be reflected on the Codacy UI after the analysis is complete.","title":"Notes on ignored issues"},{"location":"related-tools/local-analysis/running-spotbugs/","text":"Running SpotBugs # To run SpotBugs as a client-side tool : Enable Run analysis on your build server in your repository Settings , tab General , Repository analysis . This setting enables Codacy to wait for the results of the local analysis before resuming the analysis of your commits. Set up an API token to authenticate on Codacy: If you're setting up one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up multiple repositories , obtain an account API Token and set the following environment variable to specify the account API token: export CODACY_API_TOKEN = <your account API token> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Compile your Java or Scala repository on your build server, as you would normally do. Download and run the Codacy Analysis CLI on the root of the repository, specifying the tool SpotBugs. codacy-analysis-cli analyze --tool spotbugs \\ --allow-network \\ --upload \\ --verbose If you're using an account API token , you must also provide the flags --provider , --username , and --project . You can obtain the values for these flags from the URL of your repository dashboard on Codacy: codacy-analysis-cli analyze --provider <gh, ghe, gl, gle, bb, or bbe> \\ --username <name of your Codacy organization> \\ --project <name of your repository> \\ --tool spotbugs \\ --allow-network \\ --upload \\ --verbose The Codacy Analysis CLI runs SpotBugs on the compiled classes of your repository and uploads the results to Codacy so you can use them in your workflow. Detecting sources and compiled classes # The Codacy Analysis CLI tries to find the compiled classes and map results to the source files automatically. If you use Maven, Gradle, or sbt the Codacy Analysis CLI also detects the default layouts automatically. If there is an issue with detection, you can configure these paths manually by adding a .codacy.yml Codacy configuration file to the root of the repository: --- engines: spotbugs: modules: - classesDirectories: [ \"core/target/classes\" ] sourceDirectories: [ \"core/src/main\" ] - classesDirectories: [ \"api/target/classes\" ] sourceDirectories: [ \"api/src/main\" ] Increasing the timeout to run SpotBugs # When running SpotBugs on the compiled classes of larger projects, the default execution timeout of 15 minutes may not be enough for SpotBugs to complete the analysis. To increase the timeout that SpotBugs has to execute, use the option --tool-timeout when running the Codacy Analysis CLI. For example, use --tool-timeout 1hour to set the timeout to one hour.","title":"Running SpotBugs"},{"location":"related-tools/local-analysis/running-spotbugs/#running-spotbugs","text":"To run SpotBugs as a client-side tool : Enable Run analysis on your build server in your repository Settings , tab General , Repository analysis . This setting enables Codacy to wait for the results of the local analysis before resuming the analysis of your commits. Set up an API token to authenticate on Codacy: If you're setting up one repository , obtain a project API token and set the following environment variable to specify your project API token: export CODACY_PROJECT_TOKEN = <your project API token> If you're setting up multiple repositories , obtain an account API Token and set the following environment variable to specify the account API token: export CODACY_API_TOKEN = <your account API token> Warning Never write API tokens on your configuration files and keep your API tokens well protected, as they grant owner permissions to your projects on Codacy. We recommend that you set API tokens as environment variables. Check the documentation of your CI/CD platform on how to do this. If you're using Codacy Self-hosted set the following environment variable to specify your Codacy instance URL: export CODACY_API_BASE_URL = <your Codacy instance URL> Compile your Java or Scala repository on your build server, as you would normally do. Download and run the Codacy Analysis CLI on the root of the repository, specifying the tool SpotBugs. codacy-analysis-cli analyze --tool spotbugs \\ --allow-network \\ --upload \\ --verbose If you're using an account API token , you must also provide the flags --provider , --username , and --project . You can obtain the values for these flags from the URL of your repository dashboard on Codacy: codacy-analysis-cli analyze --provider <gh, ghe, gl, gle, bb, or bbe> \\ --username <name of your Codacy organization> \\ --project <name of your repository> \\ --tool spotbugs \\ --allow-network \\ --upload \\ --verbose The Codacy Analysis CLI runs SpotBugs on the compiled classes of your repository and uploads the results to Codacy so you can use them in your workflow.","title":"Running SpotBugs"},{"location":"related-tools/local-analysis/running-spotbugs/#detecting-sources-and-compiled-classes","text":"The Codacy Analysis CLI tries to find the compiled classes and map results to the source files automatically. If you use Maven, Gradle, or sbt the Codacy Analysis CLI also detects the default layouts automatically. If there is an issue with detection, you can configure these paths manually by adding a .codacy.yml Codacy configuration file to the root of the repository: --- engines: spotbugs: modules: - classesDirectories: [ \"core/target/classes\" ] sourceDirectories: [ \"core/src/main\" ] - classesDirectories: [ \"api/target/classes\" ] sourceDirectories: [ \"api/src/main\" ]","title":"Detecting sources and compiled classes"},{"location":"related-tools/local-analysis/running-spotbugs/#increasing-the-timeout-to-run-spotbugs","text":"When running SpotBugs on the compiled classes of larger projects, the default execution timeout of 15 minutes may not be enough for SpotBugs to complete the analysis. To increase the timeout that SpotBugs has to execute, use the option --tool-timeout when running the Codacy Analysis CLI. For example, use --tool-timeout 1hour to set the timeout to one hour.","title":"Increasing the timeout to run SpotBugs"},{"location":"repositories/commits/","text":"Commits page # The Commits page displays an overview of the commits in your repository, such as the analysis status and the number of new and fixed issues for each commit. This allows you to monitor the evolution of the code quality in your repository per commit. By default, the page lists the commits on the main branch of your repository but if you have more than one branch enabled you can use the drop-down list at the top of the page to display issues on other branches. Commit detail # Click a specific commit to see detailed information about the quality changes in that commit. The commit detail displays: The status and logs of the analysis of the commit An overview of the code quality changes introduced by the commit The list of issues and duplication blocks that the commit created or fixed The list of files and the lines of code changed in the commit Note The changes in the number of issues and code quality metrics introduced by the commit are displayed either as a positive or negative variation , or no variation (represented by = ). Depending on the languages being analyzed or if you haven't set up coverage for your repository , some metrics may be missing (represented by - ). Click the title of an issue to see the following information: The contributor and date of the commit that introduced the issue The tool that reported the issue and the estimated time to fix it What's the issue and how to solve it The programming language and category of the issue Use the options in the cogwheel menu of each issue to ignore and manage issues . The commit differences view allows you to review the lines of code changed in the commit. Possible issues # In some situations, Codacy may report either new or fixed possible issues on a commit or pull request, which means that the code analysis detected these issues in lines of code that weren't changed by that commit or pull request. This gives you awareness to how your changes may be affecting other parts of your code. The following are example situations that can lead to possible issues: The issue was either created or fixed in the current commit, but the static code analysis tools reported the issue on a line that didn't change in the commit. For example, if you remove the line containing the declaration of a variable you may get an \"undeclared variable\" issue in other lines that use that variable. If a file had more than 50 issues reported by the same tool and you push a new commit that fixes some of these issues, Codacy will report more issues until the limit of 50 issues. These issues will be possible issues if they're outside the lines of code changed in the current commit.","title":"Commits page"},{"location":"repositories/commits/#commits-page","text":"The Commits page displays an overview of the commits in your repository, such as the analysis status and the number of new and fixed issues for each commit. This allows you to monitor the evolution of the code quality in your repository per commit. By default, the page lists the commits on the main branch of your repository but if you have more than one branch enabled you can use the drop-down list at the top of the page to display issues on other branches.","title":"Commits page"},{"location":"repositories/commits/#commit-detail","text":"Click a specific commit to see detailed information about the quality changes in that commit. The commit detail displays: The status and logs of the analysis of the commit An overview of the code quality changes introduced by the commit The list of issues and duplication blocks that the commit created or fixed The list of files and the lines of code changed in the commit Note The changes in the number of issues and code quality metrics introduced by the commit are displayed either as a positive or negative variation , or no variation (represented by = ). Depending on the languages being analyzed or if you haven't set up coverage for your repository , some metrics may be missing (represented by - ). Click the title of an issue to see the following information: The contributor and date of the commit that introduced the issue The tool that reported the issue and the estimated time to fix it What's the issue and how to solve it The programming language and category of the issue Use the options in the cogwheel menu of each issue to ignore and manage issues . The commit differences view allows you to review the lines of code changed in the commit.","title":"Commit detail"},{"location":"repositories/commits/#possible-issues","text":"In some situations, Codacy may report either new or fixed possible issues on a commit or pull request, which means that the code analysis detected these issues in lines of code that weren't changed by that commit or pull request. This gives you awareness to how your changes may be affecting other parts of your code. The following are example situations that can lead to possible issues: The issue was either created or fixed in the current commit, but the static code analysis tools reported the issue on a line that didn't change in the commit. For example, if you remove the line containing the declaration of a variable you may get an \"undeclared variable\" issue in other lines that use that variable. If a file had more than 50 issues reported by the same tool and you push a new commit that fixes some of these issues, Codacy will report more issues until the limit of 50 issues. These issues will be possible issues if they're outside the lines of code changed in the current commit.","title":"Possible issues"},{"location":"repositories/files/","text":"Files page # The Files page displays the current code quality information for each analyzed file in your active repository branches . Codacy displays the following information for each file, if available: Grade Number of issues Complexity Duplication Code coverage By default, Codacy displays the files in alphabetical order but you can sort the list by each column to help you identify which files you should improve or refactor next. If you have more than one branch enabled on Codacy, use the drop-down list next to the page title to select the branch that contains the files to display on the list. Use the search box to filter the list and find specific files. File details # Click on a file to see more detailed analysis information for that file, including statistics on: Size: Lines of code, source lines of code, and commented lines of code Structure: Number of methods and ratio of source lines of code per number of methods Complexity: Complexity and complexity per method Duplication: Number of clones and duplicated lines of code The button Ignore File allows you to ignore the selected file on future Codacy analysis. Depending on the available analysis information for the file, Codacy displays one or more of the following tabs: Issues: Shows all issues in the file. Toggle between the list and annotated source code views using the icon on the right-hand side. When using the list view, you can use filters to help you find specific issues in the file. Select an issue to see more information about the issue. For more information about the available information and filters and for each issue see the Issues page . Duplication: Shows all duplicated blocks in the file with links to the clones of each block. Toggle between the list and annotated source code views using the icon on the right-hand side. Coverage: Shows which lines of code are covered by tests or not. Why are some files missing? # The Files page only displays files in your repository that were analyzed by Codacy. This means that some of your files may be missing from the list, for example: You're viewing the incorrect branch Not all files may exist in all branches of your repositories. Make sure that you're displaying files for the correct branch. The file might be ignored The Files page doesn't display ignored files that aren't meant to be analyzed, including the files that Codacy ignores by default . The file has an extension that is not on the list of supported extensions Codacy has a list of file extensions associated with each language. Codacy doesn't analyze or display files with extensions that aren't associated with a language. The file might be too big Codacy doesn't analyze or display files that are over a certain size. Read more details for information on how to overcome this limit.","title":"Files page"},{"location":"repositories/files/#files-page","text":"The Files page displays the current code quality information for each analyzed file in your active repository branches . Codacy displays the following information for each file, if available: Grade Number of issues Complexity Duplication Code coverage By default, Codacy displays the files in alphabetical order but you can sort the list by each column to help you identify which files you should improve or refactor next. If you have more than one branch enabled on Codacy, use the drop-down list next to the page title to select the branch that contains the files to display on the list. Use the search box to filter the list and find specific files.","title":"Files page"},{"location":"repositories/files/#file-details","text":"Click on a file to see more detailed analysis information for that file, including statistics on: Size: Lines of code, source lines of code, and commented lines of code Structure: Number of methods and ratio of source lines of code per number of methods Complexity: Complexity and complexity per method Duplication: Number of clones and duplicated lines of code The button Ignore File allows you to ignore the selected file on future Codacy analysis. Depending on the available analysis information for the file, Codacy displays one or more of the following tabs: Issues: Shows all issues in the file. Toggle between the list and annotated source code views using the icon on the right-hand side. When using the list view, you can use filters to help you find specific issues in the file. Select an issue to see more information about the issue. For more information about the available information and filters and for each issue see the Issues page . Duplication: Shows all duplicated blocks in the file with links to the clones of each block. Toggle between the list and annotated source code views using the icon on the right-hand side. Coverage: Shows which lines of code are covered by tests or not.","title":"File details"},{"location":"repositories/files/#missing-files","text":"The Files page only displays files in your repository that were analyzed by Codacy. This means that some of your files may be missing from the list, for example: You're viewing the incorrect branch Not all files may exist in all branches of your repositories. Make sure that you're displaying files for the correct branch. The file might be ignored The Files page doesn't display ignored files that aren't meant to be analyzed, including the files that Codacy ignores by default . The file has an extension that is not on the list of supported extensions Codacy has a list of file extensions associated with each language. Codacy doesn't analyze or display files with extensions that aren't associated with a language. The file might be too big Codacy doesn't analyze or display files that are over a certain size. Read more details for information on how to overcome this limit.","title":"Why are some files missing?"},{"location":"repositories/issues/","text":"Issues page # The Issues page lists all the issues that Codacy detected in your repository, including the severity level and category of each issue. By default, the page lists the issues on the main branch of your repository but if you have more than one branch enabled you can use the drop-down list at the top of the page to display issues on other branches. Click the title of an issue to see the following information: The contributor and date of the commit that introduced the issue The tool that reported the issue and the estimated time to fix it What's the issue and how to solve it The programming language and category of the issue Filtering issues # Filter the list of issues to find specific issues, such as the issues with the highest severity or security issues: You can define one or more of the following filters: Language: Programming language of the file where the issues were detected Issue category: One of the following types of issue: Code Style: Code formatting and syntax problems, such as variable names style and enforcing the use of brackets and quotation marks Error Prone: Code that may hide bugs and language keywords that should be used with caution, such as the operator == in JavaScript or Option.get in Scala Code Complexity: High complexity methods and classes that should be refactored Performance: Code that can have performance problems Compatibility: Mainly for frontend code, compatibility problems across different browser versions Unused Code: Unused variables and methods, code that can't be reached Security: All security problems Documentation: Methods and classes that don't have the correct comment annotations Severity level: Potential impact of the issues: Critical (red): The most dangerous issues that you should prioritize fixing since they identify code that's susceptible to serious problems regarding security and compatibility Medium (yellow): You should check out these issues, as they're based on coding standards and conventions Minor (blue): The least critical issues, such as code style issues Pattern: Code pattern that detected the issue Author: Commit author that introduced the issue on the code Note Each code pattern has a pre-defined severity level and at the moment Codacy doesn't support customizing that information. Ignoring and managing issues # Use the options in the cogwheel menu of each issue to: Ignore the issue and hide it from the list. Codacy will no longer report the issue after the next analysis of your repository. For example, you can ignore issues that you disagree with because: Your team won't tackle the issues in the immediate future The issue isn't relevant in the specific context of your code The issue is a false positive See how to restore ignored issues . Tip Organization owners can configure who is allowed to ignore issues . Disable the code pattern that detected the issue. Codacy will stop using that pattern after the next analysis of your repository, so be sure that you're no longer interested in identifying similar issues. To re-enable patterns use the Code patterns page . Note If you're using a custom configuration file , you must manage patterns manually on your configuration file. Ignore the file where the issue was detected. Codacy will no longer analyze that file on your repository, so be sure that you're no longer interested in identifying any type of issues on that file. To remove an ignored file use the Ignored Files tab in your repository settings. The menu can include more options depending on the features that you enable on your GitHub or Bitbucket integration: GitHub integration Bitbucket integration Restoring ignored issues # To see the list of ignored issues, click Current Issues and select Ignored Issues . To restore an ignored issue, click the button Unignore next to the issue title:","title":"Issues page"},{"location":"repositories/issues/#issues-page","text":"The Issues page lists all the issues that Codacy detected in your repository, including the severity level and category of each issue. By default, the page lists the issues on the main branch of your repository but if you have more than one branch enabled you can use the drop-down list at the top of the page to display issues on other branches. Click the title of an issue to see the following information: The contributor and date of the commit that introduced the issue The tool that reported the issue and the estimated time to fix it What's the issue and how to solve it The programming language and category of the issue","title":"Issues page"},{"location":"repositories/issues/#filtering-issues","text":"Filter the list of issues to find specific issues, such as the issues with the highest severity or security issues: You can define one or more of the following filters: Language: Programming language of the file where the issues were detected Issue category: One of the following types of issue: Code Style: Code formatting and syntax problems, such as variable names style and enforcing the use of brackets and quotation marks Error Prone: Code that may hide bugs and language keywords that should be used with caution, such as the operator == in JavaScript or Option.get in Scala Code Complexity: High complexity methods and classes that should be refactored Performance: Code that can have performance problems Compatibility: Mainly for frontend code, compatibility problems across different browser versions Unused Code: Unused variables and methods, code that can't be reached Security: All security problems Documentation: Methods and classes that don't have the correct comment annotations Severity level: Potential impact of the issues: Critical (red): The most dangerous issues that you should prioritize fixing since they identify code that's susceptible to serious problems regarding security and compatibility Medium (yellow): You should check out these issues, as they're based on coding standards and conventions Minor (blue): The least critical issues, such as code style issues Pattern: Code pattern that detected the issue Author: Commit author that introduced the issue on the code Note Each code pattern has a pre-defined severity level and at the moment Codacy doesn't support customizing that information.","title":"Filtering issues"},{"location":"repositories/issues/#ignoring-and-managing-issues","text":"Use the options in the cogwheel menu of each issue to: Ignore the issue and hide it from the list. Codacy will no longer report the issue after the next analysis of your repository. For example, you can ignore issues that you disagree with because: Your team won't tackle the issues in the immediate future The issue isn't relevant in the specific context of your code The issue is a false positive See how to restore ignored issues . Tip Organization owners can configure who is allowed to ignore issues . Disable the code pattern that detected the issue. Codacy will stop using that pattern after the next analysis of your repository, so be sure that you're no longer interested in identifying similar issues. To re-enable patterns use the Code patterns page . Note If you're using a custom configuration file , you must manage patterns manually on your configuration file. Ignore the file where the issue was detected. Codacy will no longer analyze that file on your repository, so be sure that you're no longer interested in identifying any type of issues on that file. To remove an ignored file use the Ignored Files tab in your repository settings. The menu can include more options depending on the features that you enable on your GitHub or Bitbucket integration: GitHub integration Bitbucket integration","title":"Ignoring and managing issues"},{"location":"repositories/issues/#restoring-ignored-issues","text":"To see the list of ignored issues, click Current Issues and select Ignored Issues . To restore an ignored issue, click the button Unignore next to the issue title:","title":"Restoring ignored issues"},{"location":"repositories/repository-dashboard/","text":"Repository Dashboard # The Repository Dashboard provides an overview of the repository code quality and items that require your attention. To access your Repository Dashboard, select a repository from the Organization Dashboard or open a repository on any other page and select Dashboard on the left navigation sidebar. Tip You can share the URL of the Repository Dashboard for your public repositories to allow other people to see your repository code quality metrics, even if they aren't registered on Codacy. The top of the Repository Dashboard displays: The name and code quality grade of the repository A drop-down list that selects which branch of your repository to display on the dashboard On the Repository Dashboard you have four areas to help you monitor your repository: Quality evolution chart Issues breakdown Coverage Open pull requests The following sections provide a detailed overview of each dashboard area. Quality evolution chart # The Quality evolution chart displays the evolution of the repository code quality regarding issues, complex files, duplication, and coverage. Click on Last 3 months , Last 31 days , or Last 7 days to select the time interval of the historical data to display on the chart. Each tab displays the following information for the corresponding metric: A green or red indicator depending if the metric is within the acceptable quality level or not The current value The variation of the value introduced by the last commit Note The coverage tab only displays a value if Codacy received coverage data for the most recent commit. This is because one commit can easily change the size or number of files on the repository, or even remove some of the files that had coverage information. The chart also displays the trendline based on the past behavior and the quality goal defined on the repository quality settings . Issues breakdown # The Issues breakdown area displays the total number of issues found on the selected branch, as well as the distribution of issues across each code quality issue category. Click See all issues to see the full list of issues found, or click a category to see the issues in that category. Coverage # The Coverage area displays the percentage of lines of code on the selected branch that are covered by tests versus the quality settings defined for the repository, as well as the number of files: Without coverage With coverage not up to standards (based on your repository quality settings) With coverage up to standards (based on your repository quality settings) Click See all files to open the list of files in the repository. Tip If you don't have coverage set up for your repository yet, the Coverage area provides you with instructions on how to add coverage for your repository . Open pull requests # The Open pull requests area displays the number of open pull requests in the repository and the split between the following status: Not up to standards Up to standards Analyzing (intermediate status while Codacy is analyzing the pull request) Click See all pull requests to open the list of pull requests in the repository.","title":"Repository Dashboard"},{"location":"repositories/repository-dashboard/#repository-dashboard","text":"The Repository Dashboard provides an overview of the repository code quality and items that require your attention. To access your Repository Dashboard, select a repository from the Organization Dashboard or open a repository on any other page and select Dashboard on the left navigation sidebar. Tip You can share the URL of the Repository Dashboard for your public repositories to allow other people to see your repository code quality metrics, even if they aren't registered on Codacy. The top of the Repository Dashboard displays: The name and code quality grade of the repository A drop-down list that selects which branch of your repository to display on the dashboard On the Repository Dashboard you have four areas to help you monitor your repository: Quality evolution chart Issues breakdown Coverage Open pull requests The following sections provide a detailed overview of each dashboard area.","title":"Repository Dashboard"},{"location":"repositories/repository-dashboard/#quality-evolution-chart","text":"The Quality evolution chart displays the evolution of the repository code quality regarding issues, complex files, duplication, and coverage. Click on Last 3 months , Last 31 days , or Last 7 days to select the time interval of the historical data to display on the chart. Each tab displays the following information for the corresponding metric: A green or red indicator depending if the metric is within the acceptable quality level or not The current value The variation of the value introduced by the last commit Note The coverage tab only displays a value if Codacy received coverage data for the most recent commit. This is because one commit can easily change the size or number of files on the repository, or even remove some of the files that had coverage information. The chart also displays the trendline based on the past behavior and the quality goal defined on the repository quality settings .","title":"Quality evolution chart"},{"location":"repositories/repository-dashboard/#issues-breakdown","text":"The Issues breakdown area displays the total number of issues found on the selected branch, as well as the distribution of issues across each code quality issue category. Click See all issues to see the full list of issues found, or click a category to see the issues in that category.","title":"Issues breakdown"},{"location":"repositories/repository-dashboard/#coverage","text":"The Coverage area displays the percentage of lines of code on the selected branch that are covered by tests versus the quality settings defined for the repository, as well as the number of files: Without coverage With coverage not up to standards (based on your repository quality settings) With coverage up to standards (based on your repository quality settings) Click See all files to open the list of files in the repository. Tip If you don't have coverage set up for your repository yet, the Coverage area provides you with instructions on how to add coverage for your repository .","title":"Coverage"},{"location":"repositories/repository-dashboard/#open-pull-requests","text":"The Open pull requests area displays the number of open pull requests in the repository and the split between the following status: Not up to standards Up to standards Analyzing (intermediate status while Codacy is analyzing the pull request) Click See all pull requests to open the list of pull requests in the repository.","title":"Open pull requests"},{"location":"repositories/security-monitor/","text":"Security Monitor # This feature is only available on paid plans The Security Monitor provides an overview of all current security issues. Supported languages # The Security Monitor is available for the following languages: Apex C# Java JavaScript Python Ruby Scala PHP C C++ Shell script Dockerfile Visual Basic Elixir PowerShell TSQL Groovy Tools # The Security Monitor displays issues using security patterns from: Bandit Brakeman Codacy Scalameta Pro ESLint (also: 1 , 2 , 3 and 4 ) SpotBugs (includes the plugin Find Security Bugs ) Sonar C# Sonar VB.NET PMD PHP Mess Detector Pylint (Python 2) Pylint (Python 3) RuboCop Cppcheck ShellCheck PHP_CodeSniffer Hadolint Prospector bundler-audit Credo Flawfinder PSScriptAnalyzer TSQLLint CodeNarc Supported categories # XSS: XSS enables attackers to inject client-side scripts into web pages viewed by other users. Input validation: Input not validated may originate SQL Injection attacks for instance. File access: An attacker may use special paths to access files that shouldn't be accessible. HTTP: HTTP headers are a common attack vector for malign users. Cookies: An HTTP cookie is a small piece of data sent from a website and stored on the user's computer by the browser while the user is browsing. Unexpected behaviour: Assigning values to private APIs might lead to unexpected behavior. Mass assignment: Mass assignment is a feature of Rails which allows an application to create a record from the values of a hash. Insecure storage: Storing sensitive data using these APIs isn't safe. Insecure modules/libraries: Consider possible security implications associated with some modules. Visibility: Fields shouldn't have public accessibility. CSRF: Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. Android: Android-specific issues. Malicious code: Exposed internal APIs can be accessed or changed by malicious code or by accident from another package. Cryptography: Cryptography is a security technique widely used and there are several cryptographic functions, but not all of them are secure. Command injection: Command injection is an attack in which the goal is the execution of arbitrary commands on the host operating system. Firefox OS: Sensitive APIs of Firefox OS. Auth: Authentication is present in almost all web applications nowadays. DoS: The Denial of Service (DoS) attack is focused on making a resource (site, application, server) unavailable for the purpose it was designed. SQL injection: A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. Routes: Badly configured routes can give unintended access to an attacker. Regex: Regex can be used in a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach heavy computation situations that cause them to work very slowly (exponentially related to input size). SSL: Simply using SSL isn't enough to ensure the data you're sending is secure. Man in the middle attacks are well known and widely used. Other: Other language-specific security issues. Category states # Each security category listed on the left-hand side of the dashboard has one of four states: State Description Everything is OK for this category All the security patterns in this category are enabled, and no security issues have been found. There are security patterns in this category that are disabled You should enable the patterns in this category so it's verified. To enable all security patterns on the repository, click the button More and select Turn on all security patterns . There are security issues identified for this category Codacy can't determine if all the security patterns in this category are enabled or not This happens when you're using configuration files to control which patterns are enabled. Ensure that you manually enable the listed patterns on your configuration files.","title":"Security Monitor"},{"location":"repositories/security-monitor/#security-monitor","text":"This feature is only available on paid plans The Security Monitor provides an overview of all current security issues.","title":"Security Monitor"},{"location":"repositories/security-monitor/#supported-languages","text":"The Security Monitor is available for the following languages: Apex C# Java JavaScript Python Ruby Scala PHP C C++ Shell script Dockerfile Visual Basic Elixir PowerShell TSQL Groovy","title":"Supported languages"},{"location":"repositories/security-monitor/#tools","text":"The Security Monitor displays issues using security patterns from: Bandit Brakeman Codacy Scalameta Pro ESLint (also: 1 , 2 , 3 and 4 ) SpotBugs (includes the plugin Find Security Bugs ) Sonar C# Sonar VB.NET PMD PHP Mess Detector Pylint (Python 2) Pylint (Python 3) RuboCop Cppcheck ShellCheck PHP_CodeSniffer Hadolint Prospector bundler-audit Credo Flawfinder PSScriptAnalyzer TSQLLint CodeNarc","title":"Tools"},{"location":"repositories/security-monitor/#supported-categories","text":"XSS: XSS enables attackers to inject client-side scripts into web pages viewed by other users. Input validation: Input not validated may originate SQL Injection attacks for instance. File access: An attacker may use special paths to access files that shouldn't be accessible. HTTP: HTTP headers are a common attack vector for malign users. Cookies: An HTTP cookie is a small piece of data sent from a website and stored on the user's computer by the browser while the user is browsing. Unexpected behaviour: Assigning values to private APIs might lead to unexpected behavior. Mass assignment: Mass assignment is a feature of Rails which allows an application to create a record from the values of a hash. Insecure storage: Storing sensitive data using these APIs isn't safe. Insecure modules/libraries: Consider possible security implications associated with some modules. Visibility: Fields shouldn't have public accessibility. CSRF: Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. Android: Android-specific issues. Malicious code: Exposed internal APIs can be accessed or changed by malicious code or by accident from another package. Cryptography: Cryptography is a security technique widely used and there are several cryptographic functions, but not all of them are secure. Command injection: Command injection is an attack in which the goal is the execution of arbitrary commands on the host operating system. Firefox OS: Sensitive APIs of Firefox OS. Auth: Authentication is present in almost all web applications nowadays. DoS: The Denial of Service (DoS) attack is focused on making a resource (site, application, server) unavailable for the purpose it was designed. SQL injection: A SQL injection attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. Routes: Badly configured routes can give unintended access to an attacker. Regex: Regex can be used in a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach heavy computation situations that cause them to work very slowly (exponentially related to input size). SSL: Simply using SSL isn't enough to ensure the data you're sending is secure. Man in the middle attacks are well known and widely used. Other: Other language-specific security issues.","title":"Supported categories"},{"location":"repositories/security-monitor/#category-states","text":"Each security category listed on the left-hand side of the dashboard has one of four states: State Description Everything is OK for this category All the security patterns in this category are enabled, and no security issues have been found. There are security patterns in this category that are disabled You should enable the patterns in this category so it's verified. To enable all security patterns on the repository, click the button More and select Turn on all security patterns . There are security issues identified for this category Codacy can't determine if all the security patterns in this category are enabled or not This happens when you're using configuration files to control which patterns are enabled. Ensure that you manually enable the listed patterns on your configuration files.","title":"Category states"},{"location":"repositories-configure/adjusting-quality-settings/","text":"Adjusting quality settings # The Quality settings allow you to configure quality gates for your pull requests and commits, and define quality goals that help you monitor the progress of the code quality in your repository dashboard. To access the quality settings, open your repository Settings , tab Quality Settings : The following sections explain the settings in detail. Gates # These settings configure when Codacy reports pull requests and commits as not up to standards. Tip After enabling these settings you can set Codacy as a required check before merging your pull requests. New issues are over: Pull requests or commits are marked not up to standards if the number of issues introduced that have at least the specified severity level is higher than the set value. The default value is 0. New security issues are over: Pull requests or commits are marked not up to standards if the number of security issues introduced is higher than the set value. By default, this setting is off. Complexity is over: Pull requests or commits are marked not up to standards if the introduced complexity is higher than the set value. By default, this setting is off. Duplication is over: Pull requests or commits are marked not up to standards if the number of clones introduced is higher than the set value. By default, this setting is off. Coverage variation is under: Pull requests or commits are marked not up to standards if the coverage introduced is smaller than the set value. This value refers to the variation of coverage on your pull requests or commits. For example, if your repository has 90% coverage and you want to make sure that this value doesn't decrease, set the value to 0%. By default, this setting is off. The maximum value is 1%. Goals # These settings configure the quality goals for your repository, and which files Codacy considers complex or duplicated. Codacy displays the quality goals as dashed lines on the quality evolution chart to help you monitor the progress and overall quality status of your repository. Issues are over: Defines the threshold displayed on the tab Issues of the quality evolution chart. Complexity of files is over: Defines the threshold displayed on the tab Complexity of the quality evolution chart. File is complex when over: A file is considered complex when its complexity is over this value. Duplication of files is over: Defines the threshold displayed on the tab Duplication of the quality evolution chart. File is duplicate when over: A file is considered duplicated when it has more clones than this value. Coverage is under: Defines the threshold displayed on the tab Coverage of the quality evolution chart.","title":"Adjusting quality settings"},{"location":"repositories-configure/adjusting-quality-settings/#adjusting-quality-settings","text":"The Quality settings allow you to configure quality gates for your pull requests and commits, and define quality goals that help you monitor the progress of the code quality in your repository dashboard. To access the quality settings, open your repository Settings , tab Quality Settings : The following sections explain the settings in detail.","title":"Adjusting quality settings"},{"location":"repositories-configure/adjusting-quality-settings/#gates","text":"These settings configure when Codacy reports pull requests and commits as not up to standards. Tip After enabling these settings you can set Codacy as a required check before merging your pull requests. New issues are over: Pull requests or commits are marked not up to standards if the number of issues introduced that have at least the specified severity level is higher than the set value. The default value is 0. New security issues are over: Pull requests or commits are marked not up to standards if the number of security issues introduced is higher than the set value. By default, this setting is off. Complexity is over: Pull requests or commits are marked not up to standards if the introduced complexity is higher than the set value. By default, this setting is off. Duplication is over: Pull requests or commits are marked not up to standards if the number of clones introduced is higher than the set value. By default, this setting is off. Coverage variation is under: Pull requests or commits are marked not up to standards if the coverage introduced is smaller than the set value. This value refers to the variation of coverage on your pull requests or commits. For example, if your repository has 90% coverage and you want to make sure that this value doesn't decrease, set the value to 0%. By default, this setting is off. The maximum value is 1%.","title":"Gates"},{"location":"repositories-configure/adjusting-quality-settings/#goals","text":"These settings configure the quality goals for your repository, and which files Codacy considers complex or duplicated. Codacy displays the quality goals as dashed lines on the quality evolution chart to help you monitor the progress and overall quality status of your repository. Issues are over: Defines the threshold displayed on the tab Issues of the quality evolution chart. Complexity of files is over: Defines the threshold displayed on the tab Complexity of the quality evolution chart. File is complex when over: A file is considered complex when its complexity is over this value. Duplication of files is over: Defines the threshold displayed on the tab Duplication of the quality evolution chart. File is duplicate when over: A file is considered duplicated when it has more clones than this value. Coverage is under: Defines the threshold displayed on the tab Coverage of the quality evolution chart.","title":"Goals"},{"location":"repositories-configure/codacy-configuration-file/","text":"Codacy configuration file # Codacy supports configuring certain advanced features through a configuration file: Ignoring files globally, for duplication, or a specific tool Configuring a specific repository directory on which to start the analysis Adding custom file extensions to languages, keeping in mind that some tools might not work out of the box with those extensions Note If a Codacy configuration file exists in your repository, the Ignored files settings defined on the Codacy UI don't apply and you must ignore files using the configuration file instead. To disable a tool you must use the Code patterns page instead. To use a Codacy configuration file: Create a text file with the name .codacy.yml or .codacy.yaml on the root of your repository. Add your settings to the configuration file based on the example template below. Important The configuration file must start with a line containing a triple dash ( --- ). --- engines : rubocop : exclude_paths : - \"config/test.yml\" base_sub_dir : \"test/baseDir\" duplication : exclude_paths : - \"config/test.yml\" config : languages : - \"ruby\" languages : css : extensions : - \"-css.resource\" exclude_paths : - \".bundle/**\" - \"spec/**/*\" - \"benchmarks/**/*\" - \"**.min.js\" - \"**/tests/**\" Optionally, validate the syntax of your configuration file with the Codacy Analysis CLI by running the following command in the same folder as the Codacy configuration file: codacy-analysis-cli validate-configuration --directory ` pwd ` Syntax for ignoring files # To ignore files, you must use the Java glob syntax to define one or more exclude_paths patterns. For example: Example pattern Ignored files test/README.md The file test/README.md test/* All files in the root of test test/** All files and directories inside test test/**/* All files inside sub-directories of test **.resource All .resource files across all your repository **/*.resource All .resource files in all directories and sub-directories Which tools can be configured and which name should I use? # You can use the Codacy configuration file to configure all tools supported by Codacy except the client-side tools . The following are the tool names that must be used in the Codacy configuration file: ameba bandit brakeman bundleraudit checkov checkstyle codacy-scalameta-pro codenarc coffeelint cppcheck credo csslint detekt eslint flawfinder hadolint jacksonlinter jshint markdownlint phpcs phpmd pmd pmd-legacy prospector psscriptanalyzer pylint pylintpython3 remark-lint revive rubocop scalastyle shellcheck sonarscharp sonarvb SQLint spectral stylelint swiftlint tailor tslint tsqllint Tool-specific configurations # Although Codacy tries to detect which language is used on each source code file, some false positives may occur. The tools below support specific configurations to specify the language or language version used in the source code files that you're analyzing. Cppcheck # If you're using Cppcheck to analyze C or C++ source code files, add the following configuration to your Codacy configuration file to define the programming language you're using. The supported languages are c and c++ : --- engines : cppcheck : language : c++ PHP_CodeSniffer # If you're using the PHP Compatibility coding standard for PHP_CodeSniffer, add the following configuration to your Codacy configuration file to define the PHP version you're using: --- engines : phpcs : php_version : 5.5 Legacy Pylint 1.9.* # If you're using the legacy Pylint 1.9.* to analyze Python source code files, add the following configuration to your Codacy configuration file to define the Python language version you're using. The supported versions are 2 and 3 : --- engines : pylint : python_version : 2 Tip If you're using Python 3.4.* or later as your programming language, we recommend that you disable the tool Pylint and enable the tool Pylint (Python 3) on your repository Code patterns page instead. For more information see What's New in Pylint 2.0 .","title":"Codacy configuration file"},{"location":"repositories-configure/codacy-configuration-file/#codacy-configuration-file","text":"Codacy supports configuring certain advanced features through a configuration file: Ignoring files globally, for duplication, or a specific tool Configuring a specific repository directory on which to start the analysis Adding custom file extensions to languages, keeping in mind that some tools might not work out of the box with those extensions Note If a Codacy configuration file exists in your repository, the Ignored files settings defined on the Codacy UI don't apply and you must ignore files using the configuration file instead. To disable a tool you must use the Code patterns page instead. To use a Codacy configuration file: Create a text file with the name .codacy.yml or .codacy.yaml on the root of your repository. Add your settings to the configuration file based on the example template below. Important The configuration file must start with a line containing a triple dash ( --- ). --- engines : rubocop : exclude_paths : - \"config/test.yml\" base_sub_dir : \"test/baseDir\" duplication : exclude_paths : - \"config/test.yml\" config : languages : - \"ruby\" languages : css : extensions : - \"-css.resource\" exclude_paths : - \".bundle/**\" - \"spec/**/*\" - \"benchmarks/**/*\" - \"**.min.js\" - \"**/tests/**\" Optionally, validate the syntax of your configuration file with the Codacy Analysis CLI by running the following command in the same folder as the Codacy configuration file: codacy-analysis-cli validate-configuration --directory ` pwd `","title":"Codacy configuration file"},{"location":"repositories-configure/codacy-configuration-file/#syntax-for-ignoring-files","text":"To ignore files, you must use the Java glob syntax to define one or more exclude_paths patterns. For example: Example pattern Ignored files test/README.md The file test/README.md test/* All files in the root of test test/** All files and directories inside test test/**/* All files inside sub-directories of test **.resource All .resource files across all your repository **/*.resource All .resource files in all directories and sub-directories","title":"Syntax for ignoring files"},{"location":"repositories-configure/codacy-configuration-file/#which-tools-can-be-configured-and-which-name-should-i-use","text":"You can use the Codacy configuration file to configure all tools supported by Codacy except the client-side tools . The following are the tool names that must be used in the Codacy configuration file: ameba bandit brakeman bundleraudit checkov checkstyle codacy-scalameta-pro codenarc coffeelint cppcheck credo csslint detekt eslint flawfinder hadolint jacksonlinter jshint markdownlint phpcs phpmd pmd pmd-legacy prospector psscriptanalyzer pylint pylintpython3 remark-lint revive rubocop scalastyle shellcheck sonarscharp sonarvb SQLint spectral stylelint swiftlint tailor tslint tsqllint","title":"Which tools can be configured and which name should I use?"},{"location":"repositories-configure/codacy-configuration-file/#tool-specific-configurations","text":"Although Codacy tries to detect which language is used on each source code file, some false positives may occur. The tools below support specific configurations to specify the language or language version used in the source code files that you're analyzing.","title":"Tool-specific configurations"},{"location":"repositories-configure/configuring-code-patterns/","text":"Configuring code patterns # By default, Codacy uses a subset of the supported static analysis tools and code patterns to analyze your repositories. These default settings result from community feedback or existing coding standards. However, you can adapt the default settings to your scenario by configuring the tools and code patterns that Codacy uses to analyze your repository. Note If your repository is following an organization coding standard , changes made to any tool or code pattern cause the repository to stop following the coding standard. In this case Codacy asks for your confirmation before accepting the changes. To configure the tools and code patterns for your repository: Open your repository Code patterns page. Toggle the tools that Codacy will use to analyze your repository. Select each tool to configure and enable or disable the corresponding code patterns using the checkbox next to each pattern. To see an explanation of the issues that a pattern detects and how to fix them, click Show details . Some patterns also allow you to configure the rules for detecting issues. Optionally, manually reanalyze your repository to immediately take the changes into account. Otherwise, Codacy will use the new configuration when it analyzes a new commit or pull request. Tip Organization owners can change who is allowed to configure code patterns . Pattern filters # To make it easier to find relevant code patterns, you can use the sidebar to filter the patterns by language (only for tools that support multiple languages), category, or status: Tip To enable all code patterns matching a specific category, use the filter to select the relevant patterns and click Enable all . For example, to enable all Security patterns of a tool, you can use the Security filter and click Enable all . Issues detected by Codacy belong to one of the following categories: Code Style: Code formatting and syntax problems, such as variable names style and enforcing the use of brackets and quotation marks Error Prone: Code that may hide bugs and language keywords that should be used with caution, such as the operator == in JavaScript or Option.get in Scala Code Complexity: High complexity methods and classes that should be refactored Performance: Code that can have performance problems Compatibility: Mainly for frontend code, compatibility problems across different browser versions Unused Code: Unused variables and methods, code that can't be reached Security: All security problems Documentation: Methods and classes that don't have the correct comment annotations Importing pattern configurations from another repository # Importing tool and code pattern configurations from another repository can help you bootstrap and standardize the tool and code pattern configurations across your repositories. For example, when adding a new repository on Codacy you can copy the tool and code pattern configurations from an existing repository that's already configured, and then tweak and adapt the settings for your new repository. Tip To ensure that multiple repositories consistently follow the same global tool and code pattern configurations, use an organization coding standard instead. Alternatively, you can also copy the tool and code pattern configurations from one repository to multiple target repositories . Important Consider the following when using this feature: Tool matching: Codacy only copies settings for tools that are available on both the source and target repositories, and overwrites the existing settings for these tools on the target repository. Toggle status: Codacy copies the enabled or disabled status of the matching tools from the source to the target repository. Configuration files: Codacy copies the UI configuration of all matching tools, even those set to use configuration files. However, the import doesn't include the configuration mode itself. The following example illustrates the points above: Source repository Target repository Target repository after import To import the tool and code pattern configurations from another repository: Open your repository Code patterns and click Import patterns . Follow the instructions to select the source repository and complete the import. Review and adjust your tool and code pattern configurations if necessary. Codacy will use the updated configurations on the next analysis. Using your own tool configuration files # Codacy supports configuration files for several tools. To use a configuration file for your static analysis tool: Push the configuration file to the root of the branch configured as the main branch on Codacy . Open your repository Code patterns page, select the tool that will use the configuration file, and select the option Configuration file . After activating the option to use the configuration file: Codacy will use the version of the configuration file in the branch being analyzed . For example, if you open a pull request that includes changes to the configuration file, the analysis results will take those changes into account. If Codacy analyzes a branch that doesn't include the configuration file, Codacy reverts to using the code patterns configured for the tool before you selected the option Configuration file on the Code patterns page. The table below lists the configuration file names that Codacy detects and supports for each tool: Tool name Language Files detected Other info Ameba Crystal .ameba.yml Bandit Python bandit.yml , .bandit To solve flagged valid Python \"assert\" statements, create a bandit.yml in the root of the repository containing: skips: \\['B101'\\] Brakeman Ruby config/brakeman.yml Checkstyle Java checkstyle.xml Supports configuration file in directories other than root and can search up to 5 directories into the repository. CodeNarc Groovy .codenarcrc Credo Elixir .credo.exs , config/.credo.exs CSSLint CSS .csslintrc detekt Kotlin default-detekt-config.yml , detekt.yml Supports configuration file in directories other than root and can search up to 5 directories into the repository. ESLint JavaScript, Typescript .eslintrc.js , .eslintrc.cjs , .eslintrc.yaml , .eslintrc.yml , .eslintrc.json , .eslintrc , .prettierrc , .prettierrc.yaml , .prettierrc.yml , .prettierrc.json , prettier.config.js , .prettierrc.js Plugins in the UI Other Plugins Hadolint Dockerfile .hadolint.yaml JSHint JavaScript .jshintrc markdownlint Markdown .markdownlint.yaml , .markdownlint.jsonc , .markdownlint.json PHP_CodeSniffer PHP phpcs.xml , phpcs.xml.dist PHP Mess Detector PHP codesize.xml , phpmd.xml , phpmd.xml.dist PMD Apex, Java, JavaScript, JSP, PL/SQL, XML, Velocity and Visualforce ruleset.xml , apex-ruleset.xml Supports configuration file in directories other than root and can search up to 5 directories into the repository. Prospector Python .prospector.yml , .prospector.yaml , prospector.yml , prospector.yaml , .landscape.yml , .landscape.yaml , landscape.yml , landscape.yaml Pylint Python pylintrc , .pylintrc Plugins remark-lint Markdown .remarkrc , .remarkrc.json , .remarkrc.yaml , .remarkrc.yml , .remarkrc.js Revive Go revive.toml RuboCop Ruby .rubocop.yml Scalastyle Scala scalastyle-config.xml , scalastyle_config.xml Sonar C# C# SonarLint.xml Sonar VB Visual Basic SonarLint.xml Spectral AsyncAPI, OpenAPI .spectral.yaml , .spectral.yml , .spectral.json SpotBugs Java, Scala findbugs.xml , findbugs-includes.xml , findbugs-excludes.xml , spotbugs.xml , spotbugs-includes.xml , spotbugs-excludes.xml Supports configuration file in directories other than root and can search up to 5 directories into the repository. Stylelint CSS, LESS, SASS .stylelintrc , stylelint.config.js , .stylelintrc.json , .stylelintrc.yaml , .stylelintrc.yml , .stylelintrc.js Supports configuration file in directories other than root and can search up to 5 directories into the repository. SwiftLint Swift .swiftlint.yml Tailor Swift .tailor.yml TSLint TypeScript tslint.json TSQLLint Transact-SQL .tsqllintrc Note Codacy doesn't support configuration files for the following tools: aligncheck bundler-audit Checkov Clang-Tidy Codacy ScalaMeta Pro CoffeeLint Cppcheck deadcode Faux Pas Flawfinder Gosec Jackson Linter PSScriptAnalyzer ShellCheck SQLint Staticcheck For performance reasons, if you make changes to pattern settings using configuration files, Codacy may display outdated messages for issues that have already been identified by those patterns. See also # Applying a coding standard across multiple repositories Copying code patterns between repositories","title":"Configuring code patterns"},{"location":"repositories-configure/configuring-code-patterns/#configuring-code-patterns","text":"By default, Codacy uses a subset of the supported static analysis tools and code patterns to analyze your repositories. These default settings result from community feedback or existing coding standards. However, you can adapt the default settings to your scenario by configuring the tools and code patterns that Codacy uses to analyze your repository. Note If your repository is following an organization coding standard , changes made to any tool or code pattern cause the repository to stop following the coding standard. In this case Codacy asks for your confirmation before accepting the changes. To configure the tools and code patterns for your repository: Open your repository Code patterns page. Toggle the tools that Codacy will use to analyze your repository. Select each tool to configure and enable or disable the corresponding code patterns using the checkbox next to each pattern. To see an explanation of the issues that a pattern detects and how to fix them, click Show details . Some patterns also allow you to configure the rules for detecting issues. Optionally, manually reanalyze your repository to immediately take the changes into account. Otherwise, Codacy will use the new configuration when it analyzes a new commit or pull request. Tip Organization owners can change who is allowed to configure code patterns .","title":"Configuring code patterns"},{"location":"repositories-configure/configuring-code-patterns/#pattern-filters","text":"To make it easier to find relevant code patterns, you can use the sidebar to filter the patterns by language (only for tools that support multiple languages), category, or status: Tip To enable all code patterns matching a specific category, use the filter to select the relevant patterns and click Enable all . For example, to enable all Security patterns of a tool, you can use the Security filter and click Enable all . Issues detected by Codacy belong to one of the following categories: Code Style: Code formatting and syntax problems, such as variable names style and enforcing the use of brackets and quotation marks Error Prone: Code that may hide bugs and language keywords that should be used with caution, such as the operator == in JavaScript or Option.get in Scala Code Complexity: High complexity methods and classes that should be refactored Performance: Code that can have performance problems Compatibility: Mainly for frontend code, compatibility problems across different browser versions Unused Code: Unused variables and methods, code that can't be reached Security: All security problems Documentation: Methods and classes that don't have the correct comment annotations","title":"Pattern filters"},{"location":"repositories-configure/configuring-code-patterns/#import-patterns","text":"Importing tool and code pattern configurations from another repository can help you bootstrap and standardize the tool and code pattern configurations across your repositories. For example, when adding a new repository on Codacy you can copy the tool and code pattern configurations from an existing repository that's already configured, and then tweak and adapt the settings for your new repository. Tip To ensure that multiple repositories consistently follow the same global tool and code pattern configurations, use an organization coding standard instead. Alternatively, you can also copy the tool and code pattern configurations from one repository to multiple target repositories . Important Consider the following when using this feature: Tool matching: Codacy only copies settings for tools that are available on both the source and target repositories, and overwrites the existing settings for these tools on the target repository. Toggle status: Codacy copies the enabled or disabled status of the matching tools from the source to the target repository. Configuration files: Codacy copies the UI configuration of all matching tools, even those set to use configuration files. However, the import doesn't include the configuration mode itself. The following example illustrates the points above: Source repository Target repository Target repository after import To import the tool and code pattern configurations from another repository: Open your repository Code patterns and click Import patterns . Follow the instructions to select the source repository and complete the import. Review and adjust your tool and code pattern configurations if necessary. Codacy will use the updated configurations on the next analysis.","title":"Importing pattern configurations from another repository"},{"location":"repositories-configure/configuring-code-patterns/#using-your-own-tool-configuration-files","text":"Codacy supports configuration files for several tools. To use a configuration file for your static analysis tool: Push the configuration file to the root of the branch configured as the main branch on Codacy . Open your repository Code patterns page, select the tool that will use the configuration file, and select the option Configuration file . After activating the option to use the configuration file: Codacy will use the version of the configuration file in the branch being analyzed . For example, if you open a pull request that includes changes to the configuration file, the analysis results will take those changes into account. If Codacy analyzes a branch that doesn't include the configuration file, Codacy reverts to using the code patterns configured for the tool before you selected the option Configuration file on the Code patterns page. The table below lists the configuration file names that Codacy detects and supports for each tool: Tool name Language Files detected Other info Ameba Crystal .ameba.yml Bandit Python bandit.yml , .bandit To solve flagged valid Python \"assert\" statements, create a bandit.yml in the root of the repository containing: skips: \\['B101'\\] Brakeman Ruby config/brakeman.yml Checkstyle Java checkstyle.xml Supports configuration file in directories other than root and can search up to 5 directories into the repository. CodeNarc Groovy .codenarcrc Credo Elixir .credo.exs , config/.credo.exs CSSLint CSS .csslintrc detekt Kotlin default-detekt-config.yml , detekt.yml Supports configuration file in directories other than root and can search up to 5 directories into the repository. ESLint JavaScript, Typescript .eslintrc.js , .eslintrc.cjs , .eslintrc.yaml , .eslintrc.yml , .eslintrc.json , .eslintrc , .prettierrc , .prettierrc.yaml , .prettierrc.yml , .prettierrc.json , prettier.config.js , .prettierrc.js Plugins in the UI Other Plugins Hadolint Dockerfile .hadolint.yaml JSHint JavaScript .jshintrc markdownlint Markdown .markdownlint.yaml , .markdownlint.jsonc , .markdownlint.json PHP_CodeSniffer PHP phpcs.xml , phpcs.xml.dist PHP Mess Detector PHP codesize.xml , phpmd.xml , phpmd.xml.dist PMD Apex, Java, JavaScript, JSP, PL/SQL, XML, Velocity and Visualforce ruleset.xml , apex-ruleset.xml Supports configuration file in directories other than root and can search up to 5 directories into the repository. Prospector Python .prospector.yml , .prospector.yaml , prospector.yml , prospector.yaml , .landscape.yml , .landscape.yaml , landscape.yml , landscape.yaml Pylint Python pylintrc , .pylintrc Plugins remark-lint Markdown .remarkrc , .remarkrc.json , .remarkrc.yaml , .remarkrc.yml , .remarkrc.js Revive Go revive.toml RuboCop Ruby .rubocop.yml Scalastyle Scala scalastyle-config.xml , scalastyle_config.xml Sonar C# C# SonarLint.xml Sonar VB Visual Basic SonarLint.xml Spectral AsyncAPI, OpenAPI .spectral.yaml , .spectral.yml , .spectral.json SpotBugs Java, Scala findbugs.xml , findbugs-includes.xml , findbugs-excludes.xml , spotbugs.xml , spotbugs-includes.xml , spotbugs-excludes.xml Supports configuration file in directories other than root and can search up to 5 directories into the repository. Stylelint CSS, LESS, SASS .stylelintrc , stylelint.config.js , .stylelintrc.json , .stylelintrc.yaml , .stylelintrc.yml , .stylelintrc.js Supports configuration file in directories other than root and can search up to 5 directories into the repository. SwiftLint Swift .swiftlint.yml Tailor Swift .tailor.yml TSLint TypeScript tslint.json TSQLLint Transact-SQL .tsqllintrc Note Codacy doesn't support configuration files for the following tools: aligncheck bundler-audit Checkov Clang-Tidy Codacy ScalaMeta Pro CoffeeLint Cppcheck deadcode Faux Pas Flawfinder Gosec Jackson Linter PSScriptAnalyzer ShellCheck SQLint Staticcheck For performance reasons, if you make changes to pattern settings using configuration files, Codacy may display outdated messages for issues that have already been identified by those patterns.","title":"Using your own tool configuration files"},{"location":"repositories-configure/configuring-code-patterns/#see-also","text":"Applying a coding standard across multiple repositories Copying code patterns between repositories","title":"See also"},{"location":"repositories-configure/file-extensions/","text":"Configuring file extensions # If your repository has source files with unrecognized extensions, you can configure Codacy to include them in the next analysis: Go to your repository's Settings , File Extensions . Add the extensions you want to be recognized for each language. After clicking Save , you will be given the opportunity to retry the most recent commit with the new settings by clicking Analyze now! on the message that appears near the footer of the page.","title":"Configuring file extensions"},{"location":"repositories-configure/file-extensions/#configuring-file-extensions","text":"If your repository has source files with unrecognized extensions, you can configure Codacy to include them in the next analysis: Go to your repository's Settings , File Extensions . Add the extensions you want to be recognized for each language. After clicking Save , you will be given the opportunity to retry the most recent commit with the new settings by clicking Analyze now! on the message that appears near the footer of the page.","title":"Configuring file extensions"},{"location":"repositories-configure/ignoring-files/","text":"Ignoring files # In some situations, you may want to ignore or exclude files from the Codacy analysis. To exclude files from your repository analysis open your repository Settings , tab Ignored Files , and select the files you want to ignore. This view only shows the files on your main branch. You can also ignore files using your own tool configuration files, although this depends on the option being supported by each tool. If you need more flexibility in ignoring files, such as selecting only specific analysis categories (duplication, metrics, or coverage) or specific tools, use a Codacy configuration file instead. Default ignored files # By default, Codacy ignores all files that match the following regular expressions: .*[\\.-]min\\.css .*[\\.-]min\\.js .*node_modules/.* .*bower_components .*vendor/.* .*third[_-]?[Pp]arty .*docs?/.* .*samples .*releases?/.* .*builds .*dist/.* .*external .*libs/.* .*d3\\.js .*angular(-resource|)?\\.js .*select2(-resource|)?\\.js .*-ace\\.js .*typeahead\\.js .*jquery-ui\\.js .*reveal\\.js .*three\\.js .*chart\\.js .*jquery\\.js .*underscore\\.js .*lodash\\.js .*bootstrap\\.js .*bootstrap\\.css .*font-awesome\\.css","title":"Ignoring files"},{"location":"repositories-configure/ignoring-files/#ignoring-files","text":"In some situations, you may want to ignore or exclude files from the Codacy analysis. To exclude files from your repository analysis open your repository Settings , tab Ignored Files , and select the files you want to ignore. This view only shows the files on your main branch. You can also ignore files using your own tool configuration files, although this depends on the option being supported by each tool. If you need more flexibility in ignoring files, such as selecting only specific analysis categories (duplication, metrics, or coverage) or specific tools, use a Codacy configuration file instead.","title":"Ignoring files"},{"location":"repositories-configure/ignoring-files/#default-ignored-files","text":"By default, Codacy ignores all files that match the following regular expressions: .*[\\.-]min\\.css .*[\\.-]min\\.js .*node_modules/.* .*bower_components .*vendor/.* .*third[_-]?[Pp]arty .*docs?/.* .*samples .*releases?/.* .*builds .*dist/.* .*external .*libs/.* .*d3\\.js .*angular(-resource|)?\\.js .*select2(-resource|)?\\.js .*-ace\\.js .*typeahead\\.js .*jquery-ui\\.js .*reveal\\.js .*three\\.js .*chart\\.js .*jquery\\.js .*underscore\\.js .*lodash\\.js .*bootstrap\\.js .*bootstrap\\.css .*font-awesome\\.css","title":"Default ignored files"},{"location":"repositories-configure/managing-branches/","text":"Managing branches # Codacy automatically triggers analysis on the main branch of your repository (typically master or main ), and also supports analyzing multiple branches. To change the main branch of your repository or enable analysis on other branches, open your repository Settings , tab Branches : Codacy manages pull request branches and inactive branches as follows: Pull request branches Codacy automatically analyzes branches corresponding to new pull requests, as long as the target branches of the pull requests are enabled . Codacy stops analyzing these branches when the pull requests are merged or closed. Inactive branches Codacy automatically disables analysis for branches that don't have any commits for more than 2 weeks, except for the main branch and pull request branches that are analyzed automatically.","title":"Managing branches"},{"location":"repositories-configure/managing-branches/#managing-branches","text":"Codacy automatically triggers analysis on the main branch of your repository (typically master or main ), and also supports analyzing multiple branches. To change the main branch of your repository or enable analysis on other branches, open your repository Settings , tab Branches : Codacy manages pull request branches and inactive branches as follows: Pull request branches Codacy automatically analyzes branches corresponding to new pull requests, as long as the target branches of the pull requests are enabled . Codacy stops analyzing these branches when the pull requests are merged or closed. Inactive branches Codacy automatically disables analysis for branches that don't have any commits for more than 2 weeks, except for the main branch and pull request branches that are analyzed automatically.","title":"Managing branches"},{"location":"repositories-configure/removing-your-repository/","text":"Removing your repository # To stop Codacy from analyzing your repository, you must remove the repository from Codacy. This operation deletes the configurations and data related to your repository on Codacy but doesn't remove the repository from your Git provider. Important To remove a repository from Codacy you must have administrator permissions for that repository on the Git provider. To delete your repository from Codacy: Open your repository Settings , tab General . Click the button Remove repository and confirm that you want to remove the repository.","title":"Removing your repository"},{"location":"repositories-configure/removing-your-repository/#removing-your-repository","text":"To stop Codacy from analyzing your repository, you must remove the repository from Codacy. This operation deletes the configurations and data related to your repository on Codacy but doesn't remove the repository from your Git provider. Important To remove a repository from Codacy you must have administrator permissions for that repository on the Git provider. To delete your repository from Codacy: Open your repository Settings , tab General . Click the button Remove repository and confirm that you want to remove the repository.","title":"Removing your repository"},{"location":"repositories-configure/using-submodules/","text":"Using submodules # Git submodules allow you to keep a Git repository as a subdirectory within another Git repository. Git submodules are helpful in maintaining a shared configuration file for your team, and then applying it to multiple Git repositories. Enabling submodules # By default, Codacy does normal Git clones that don't include submodules to ensure that we only clone necessary repositories. However, if your organization needs to use submodules, please contact us at support@codacy.com asking to enable submodules on Codacy. After we enabled submodules for your organization, do the following: If you're using Codacy Self-hosted , you must update the license . If your submodules are: Public repositories , make sure that your Git URL uses the HTTPS protocol Private repositories , make sure that your Git URL uses the SSH protocol. If you already have repositories on Codacy where you want to use submodules, navigate to the page Settings and click the button Generate New User Key for each of these repositories. Important If you're using Bitbucket Cloud , you must manually add the SSH key on your user account . When you add a repository to Codacy, Codacy adds a new SSH key to your repository using an integration with your Git provider. Codacy uses this SSH key every time it needs to clone that repository. When you're using submodules, Codacy needs to clone additional repositories it has no access to. Since there is no way of identifying the submodules of a repository before cloning the repository, Codacy adds the SSH keys to the user account so that it has access to the same repositories as the user. If you're using submodules to share an analysis tool configuration file across your repositories, check if your tool recursively searches the subdirectories of your repositories for configuration files. If your tool doesn't detect the configuration files in the submodule directories, you must include a configuration file directly in the root of your repositories referencing the configuration files in the submodule directories. Using submodules on new repositories # You must repeat steps 2 to 4 above every time you add new repositories with submodules to Codacy. Alternatively, you can make this the default behavior for all new repositories by enabling Add project key to the user, by default in Administration , page Settings . Important If you're using Bitbucket Cloud this setting must be disabled since automatically adding the user keys isn't supported.","title":"Using submodules"},{"location":"repositories-configure/using-submodules/#using-submodules","text":"Git submodules allow you to keep a Git repository as a subdirectory within another Git repository. Git submodules are helpful in maintaining a shared configuration file for your team, and then applying it to multiple Git repositories.","title":"Using submodules"},{"location":"repositories-configure/using-submodules/#enabling-submodules","text":"By default, Codacy does normal Git clones that don't include submodules to ensure that we only clone necessary repositories. However, if your organization needs to use submodules, please contact us at support@codacy.com asking to enable submodules on Codacy. After we enabled submodules for your organization, do the following: If you're using Codacy Self-hosted , you must update the license . If your submodules are: Public repositories , make sure that your Git URL uses the HTTPS protocol Private repositories , make sure that your Git URL uses the SSH protocol. If you already have repositories on Codacy where you want to use submodules, navigate to the page Settings and click the button Generate New User Key for each of these repositories. Important If you're using Bitbucket Cloud , you must manually add the SSH key on your user account . When you add a repository to Codacy, Codacy adds a new SSH key to your repository using an integration with your Git provider. Codacy uses this SSH key every time it needs to clone that repository. When you're using submodules, Codacy needs to clone additional repositories it has no access to. Since there is no way of identifying the submodules of a repository before cloning the repository, Codacy adds the SSH keys to the user account so that it has access to the same repositories as the user. If you're using submodules to share an analysis tool configuration file across your repositories, check if your tool recursively searches the subdirectories of your repositories for configuration files. If your tool doesn't detect the configuration files in the submodule directories, you must include a configuration file directly in the root of your repositories referencing the configuration files in the submodule directories.","title":"Enabling submodules"},{"location":"repositories-configure/using-submodules/#using-submodules-on-new-repositories","text":"You must repeat steps 2 to 4 above every time you add new repositories with submodules to Codacy. Alternatively, you can make this the default behavior for all new repositories by enabling Add project key to the user, by default in Administration , page Settings . Important If you're using Bitbucket Cloud this setting must be disabled since automatically adding the user keys isn't supported.","title":"Using submodules on new repositories"},{"location":"repositories-configure/integrations/bitbucket-integration/","text":"Bitbucket integration # The Bitbucket integration incorporates Codacy on your existing Git provider workflows. When the integration is enabled, you can create pull request comments and Jira issues directly from Codacy when browsing the existing issues on the repository: Depending on the configuration of the Bitbucket integration, Codacy can also report and notify you about issues directly on your pull requests. Enabling the Bitbucket integration # To enable the Bitbucket integration, open your repository Settings , tab Integrations . When you add a new repository, the integration is already enabled by default. If you remove the integration, you can enable it again as follows: Click the button Add integration and select Bitbucket on the list. Click the button Enable and follow the instructions. Important The user that enables the integration must have administrator access to the repository. Codacy uses this Bitbucket user to create comments on pull requests. Tip We recommend that you use a dedicated service account for integrating Codacy with your repositories. This will avoid disruption of service if the user who originally enabled the integration stops having access to the repository, such as when the user leaves the team or the organization. For more information and instructions on how to set up a dedicated service account see Why did Codacy stop commenting on pull requests? Configuring the Bitbucket integration # To configure the Bitbucket integration, open your repository Settings , tab Integrations . Depending on the options that you enable, Codacy will automatically update pull requests on Bitbucket with extra information when accepting pull requests: Pull Request Status # Adds a report to your pull requests showing whether your pull requests and coverage are up to standards or not as configured on the quality settings of your repository. To see the coverage status, ensure that you enable the option Coverage in the quality settings. After enabling this option, you can set Codacy as a required check before merging your pull requests. Pull Request Comment # Adds comments on the lines of the pull request where Codacy finds new issues. Click on the links to open Codacy and see more details about the issues and how to fix them. Pull Request Summary # Shows an overall view of the changes in the pull request, including new issues and metrics such as complexity and duplication.","title":"Bitbucket integration"},{"location":"repositories-configure/integrations/bitbucket-integration/#bitbucket-integration","text":"The Bitbucket integration incorporates Codacy on your existing Git provider workflows. When the integration is enabled, you can create pull request comments and Jira issues directly from Codacy when browsing the existing issues on the repository: Depending on the configuration of the Bitbucket integration, Codacy can also report and notify you about issues directly on your pull requests.","title":"Bitbucket integration"},{"location":"repositories-configure/integrations/bitbucket-integration/#enabling","text":"To enable the Bitbucket integration, open your repository Settings , tab Integrations . When you add a new repository, the integration is already enabled by default. If you remove the integration, you can enable it again as follows: Click the button Add integration and select Bitbucket on the list. Click the button Enable and follow the instructions. Important The user that enables the integration must have administrator access to the repository. Codacy uses this Bitbucket user to create comments on pull requests. Tip We recommend that you use a dedicated service account for integrating Codacy with your repositories. This will avoid disruption of service if the user who originally enabled the integration stops having access to the repository, such as when the user leaves the team or the organization. For more information and instructions on how to set up a dedicated service account see Why did Codacy stop commenting on pull requests?","title":"Enabling the Bitbucket integration"},{"location":"repositories-configure/integrations/bitbucket-integration/#configuring-the-bitbucket-integration","text":"To configure the Bitbucket integration, open your repository Settings , tab Integrations . Depending on the options that you enable, Codacy will automatically update pull requests on Bitbucket with extra information when accepting pull requests:","title":"Configuring the Bitbucket integration"},{"location":"repositories-configure/integrations/github-integration/","text":"GitHub integration # The GitHub integration incorporates Codacy on your existing Git provider workflows. When the integration is enabled, you can create pull request comments and GitHub issues directly from Codacy when browsing the existing issues on the repository: Depending on the configuration of the GitHub integration, Codacy can also report and notify you about issues directly on your pull requests. Enabling the GitHub integration # To enable the GitHub integration, open your repository Settings , tab Integrations . When you add a new repository, the integration is already enabled by default. If you remove the integration, you can enable it again as follows: Click the button Add integration and select GitHub on the list. Click the button Enable and follow the instructions. Important The user that enables the integration must have administrator access to the repository. Codacy uses this GitHub user to suggest fixes on pull requests. Tip We recommend that you use a dedicated service account for integrating Codacy with your repositories. This will avoid disruption of service if the user who originally enabled the integration stops having access to the repository, such as when the user leaves the team or the organization. For more information and instructions on how to set up a dedicated service account see Why did Codacy stop commenting on pull requests? Configuring the GitHub integration # To configure the GitHub integration, open your repository Settings , tab Integrations . Depending on the options that you enable, Codacy will automatically update pull requests on GitHub with extra information when accepting pull requests: Status checks # Adds a report to your pull requests showing whether your pull requests and coverage are up to standards or not as configured on the quality settings of your repository. To see the coverage status check, ensure that you enable the option Coverage in the quality settings. Tip After enabling this option, you can set Codacy as a required check before merging your pull requests. Annotations # Adds annotations on the lines of the pull request where Codacy finds new issues. Codacy maps the severity of the issues reported by the tools to the severity levels of the annotations. To enable this option, you must enable Status checks first. Summary # Shows an overall view of the changes in the pull request, including new issues and metrics such as complexity and duplication. To enable this option, you must enable Status checks first. Suggested fixes # This feature is only available on paid plans Adds comments on the lines of the pull request where Codacy finds new issues with suggestions on how to fix the issues. Codacy doesn't apply any changes automatically. To apply the changes, manually review and accept the suggestions . Note This feature is in early access and has the following limitations for now: The only supported Git providers are GitHub Cloud and GitHub Enterprise. The only two tools that suggest fixes are ESLint and markdownlint . However, we're planning to support suggestions from more tools. Because of a limitation from GitHub, the author of the comments suggesting fixes is the user that enabled the GitHub integration and not Codacy. \ud83d\udce2 Activate suggested fixes now and let us know what you think!","title":"GitHub integration"},{"location":"repositories-configure/integrations/github-integration/#github-integration","text":"The GitHub integration incorporates Codacy on your existing Git provider workflows. When the integration is enabled, you can create pull request comments and GitHub issues directly from Codacy when browsing the existing issues on the repository: Depending on the configuration of the GitHub integration, Codacy can also report and notify you about issues directly on your pull requests.","title":"GitHub integration"},{"location":"repositories-configure/integrations/github-integration/#enabling","text":"To enable the GitHub integration, open your repository Settings , tab Integrations . When you add a new repository, the integration is already enabled by default. If you remove the integration, you can enable it again as follows: Click the button Add integration and select GitHub on the list. Click the button Enable and follow the instructions. Important The user that enables the integration must have administrator access to the repository. Codacy uses this GitHub user to suggest fixes on pull requests. Tip We recommend that you use a dedicated service account for integrating Codacy with your repositories. This will avoid disruption of service if the user who originally enabled the integration stops having access to the repository, such as when the user leaves the team or the organization. For more information and instructions on how to set up a dedicated service account see Why did Codacy stop commenting on pull requests?","title":"Enabling the GitHub integration"},{"location":"repositories-configure/integrations/github-integration/#configuring-the-github-integration","text":"To configure the GitHub integration, open your repository Settings , tab Integrations . Depending on the options that you enable, Codacy will automatically update pull requests on GitHub with extra information when accepting pull requests:","title":"Configuring the GitHub integration"},{"location":"repositories-configure/integrations/gitlab-integration/","text":"GitLab integration # The GitLab integration incorporates Codacy on your existing Git provider workflows. Depending on the configuration of the GitLab integration, Codacy can report and notify you about issues directly on your merge requests. Enabling the GitLab integration # To enable the GitLab integration, open your repository Settings , tab Integrations . When you add a new repository, the integration is already enabled by default. If you remove the integration, you can enable it again as follows: Click the button Add integration and select GitLab on the list. Click the button Enable and follow the instructions. Important The user that enables the integration must have administrator access to the repository. Codacy uses this GitLab user to create comments on merge requests. Tip We recommend that you use a dedicated service account for integrating Codacy with your repositories. This will avoid disruption of service if the user who originally enabled the integration stops having access to the repository, such as when the user leaves the team or the organization. For more information and instructions on how to set up a dedicated service account see Why did Codacy stop commenting on pull requests? Configuring the GitLab integration # To configure the GitLab integration, open your repository Settings , tab Integrations . Depending on the options that you enable, Codacy will automatically update merge requests on GitLab with extra information when accepting merge requests: Pull Request Status # Adds a report to your merge requests showing whether your merge requests and coverage are up to standards or not as configured on the quality settings of your project. To see the coverage status, ensure that you enable the option Coverage in the quality settings. Pull Request Comment # Adds comments on the lines of the merge request where Codacy finds new issues. Click on the links to open Codacy and see more details about the issues and how to fix them. Pull Request Summary # Shows an overall view of the changes in the merge request, including new issues and metrics such as complexity and duplication.","title":"GitLab integration"},{"location":"repositories-configure/integrations/gitlab-integration/#gitlab-integration","text":"The GitLab integration incorporates Codacy on your existing Git provider workflows. Depending on the configuration of the GitLab integration, Codacy can report and notify you about issues directly on your merge requests.","title":"GitLab integration"},{"location":"repositories-configure/integrations/gitlab-integration/#enabling","text":"To enable the GitLab integration, open your repository Settings , tab Integrations . When you add a new repository, the integration is already enabled by default. If you remove the integration, you can enable it again as follows: Click the button Add integration and select GitLab on the list. Click the button Enable and follow the instructions. Important The user that enables the integration must have administrator access to the repository. Codacy uses this GitLab user to create comments on merge requests. Tip We recommend that you use a dedicated service account for integrating Codacy with your repositories. This will avoid disruption of service if the user who originally enabled the integration stops having access to the repository, such as when the user leaves the team or the organization. For more information and instructions on how to set up a dedicated service account see Why did Codacy stop commenting on pull requests?","title":"Enabling the GitLab integration"},{"location":"repositories-configure/integrations/gitlab-integration/#configuring-the-gitlab-integration","text":"To configure the GitLab integration, open your repository Settings , tab Integrations . Depending on the options that you enable, Codacy will automatically update merge requests on GitLab with extra information when accepting merge requests:","title":"Configuring the GitLab integration"},{"location":"repositories-configure/integrations/jira-integration/","text":"Jira integration # The Jira integration incorporates Codacy on your existing Jira workflows. When the integration is enabled, you can create issues on a Jira project directly from Codacy when browsing the existing issues on the repository: Enabling the Jira integration # To enable the Jira integration: Open your project Settings , tab Integrations . Click the button Add integration and select Jira on the list. Configure the Jira integration fields as follows: Host URL: Base URL of your Jira instance, including the protocol. For example, https://mycompany.atlassian.net/ . Project ID: Key of the Jira project where Codacy will create issues. You can obtain the project key from the prefix of Jira issue numbers in that project. For example, DOCS for a project with the issue DOCS-42. Email: Email address of the user account that Codacy will use to create new issues in Jira. API token: Jira API token for the user account that Codacy will use to create new issues in Jira. The Jira integration only supports HTTP basic authentication. Important We recommend that you use a dedicated service account for integrating Codacy with Jira. Jira issues created by Codacy will appear as being reported by this user account. Click Save and make sure that Codacy can successfully establish a connection with Jira. Click Advanced to configure the issue type and any built-in or custom Jira fields of new issues created by Codacy.","title":"Jira integration"},{"location":"repositories-configure/integrations/jira-integration/#jira-integration","text":"The Jira integration incorporates Codacy on your existing Jira workflows. When the integration is enabled, you can create issues on a Jira project directly from Codacy when browsing the existing issues on the repository:","title":"Jira integration"},{"location":"repositories-configure/integrations/jira-integration/#enabling-the-jira-integration","text":"To enable the Jira integration: Open your project Settings , tab Integrations . Click the button Add integration and select Jira on the list. Configure the Jira integration fields as follows: Host URL: Base URL of your Jira instance, including the protocol. For example, https://mycompany.atlassian.net/ . Project ID: Key of the Jira project where Codacy will create issues. You can obtain the project key from the prefix of Jira issue numbers in that project. For example, DOCS for a project with the issue DOCS-42. Email: Email address of the user account that Codacy will use to create new issues in Jira. API token: Jira API token for the user account that Codacy will use to create new issues in Jira. The Jira integration only supports HTTP basic authentication. Important We recommend that you use a dedicated service account for integrating Codacy with Jira. Jira issues created by Codacy will appear as being reported by this user account. Click Save and make sure that Codacy can successfully establish a connection with Jira. Click Advanced to configure the issue type and any built-in or custom Jira fields of new issues created by Codacy.","title":"Enabling the Jira integration"},{"location":"repositories-configure/integrations/post-commit-hooks/","text":"Post-commit hooks # For Codacy to check updates in your repository (new commits and pull requests) you must have post-commit hooks enabled. There are two ways to do this: automatically or manually Automatic setup of post-commit hook # If you're using GitHub or Bitbucket you can let Codacy configure the hook for you. Go to your repository settings and click on the Integrations tab. There should be a switch button for the automatic setup of post-commit hooks. Missing hook automatic setup switch button # If the switch isn't visible, go to the Integrations tab and add the GitHub or Bitbucket integration. Important Make sure that you enable the integration after adding it. Manual setup of post-commit hooks on GitHub # To turn on post-commit hooks for GitHub: Copy the hook URL to your clipboard. Go to Webhooks & Services under your repository settings. Paste the hook URL into the field Payload URL . Select application/json in the field Content Type . Click Add Webhook . Here's an example of how to configure your hooks on GitHub:","title":"Post-commit hooks"},{"location":"repositories-configure/integrations/post-commit-hooks/#post-commit-hooks","text":"For Codacy to check updates in your repository (new commits and pull requests) you must have post-commit hooks enabled. There are two ways to do this: automatically or manually","title":"Post-commit hooks"},{"location":"repositories-configure/integrations/post-commit-hooks/#automatic-setup-of-post-commit-hook","text":"If you're using GitHub or Bitbucket you can let Codacy configure the hook for you. Go to your repository settings and click on the Integrations tab. There should be a switch button for the automatic setup of post-commit hooks.","title":"Automatic setup of post-commit hook"},{"location":"repositories-configure/integrations/post-commit-hooks/#manual-setup-of-post-commit-hooks-on-github","text":"To turn on post-commit hooks for GitHub: Copy the hook URL to your clipboard. Go to Webhooks & Services under your repository settings. Paste the hook URL into the field Payload URL . Select application/json in the field Content Type . Click Add Webhook . Here's an example of how to configure your hooks on GitHub:","title":"Manual setup of post-commit hooks on GitHub"},{"location":"repositories-configure/integrations/slack-integration/","text":"Slack integration # Enable the Slack integration to integrate Codacy with Slack by sending messages to a channel when it finds new issues. To enable the Slack integration access the Integrations tab of your repository Settings , click Add integration and select Slack from the list. Configuration # Configure the Slack integration as follows: Incoming webhook: Access the Incoming Webhooks page on the App Directory of your Slack account Select the channel where you want to receive notifications and click Add Incoming Webhooks Integration Copy the generated URL and use it on Codacy Save settings on Slack Channel: The name of the channel where Codacy will send the notifications. This value is optional and it will override the default channel of the webhook. After filling both fields, click the Save button. You can also use the Test button to send a test notification to your Slack channel and confirm that the integration is working. After configuring your Slack integration with your server settings, Codacy will send a message on Slack whenever it finds new issues.","title":"Slack integration"},{"location":"repositories-configure/integrations/slack-integration/#slack-integration","text":"Enable the Slack integration to integrate Codacy with Slack by sending messages to a channel when it finds new issues. To enable the Slack integration access the Integrations tab of your repository Settings , click Add integration and select Slack from the list.","title":"Slack integration"},{"location":"repositories-configure/integrations/slack-integration/#configuration","text":"Configure the Slack integration as follows: Incoming webhook: Access the Incoming Webhooks page on the App Directory of your Slack account Select the channel where you want to receive notifications and click Add Incoming Webhooks Integration Copy the generated URL and use it on Codacy Save settings on Slack Channel: The name of the channel where Codacy will send the notifications. This value is optional and it will override the default channel of the webhook. After filling both fields, click the Save button. You can also use the Test button to send a test notification to your Slack channel and confirm that the integration is working. After configuring your Slack integration with your server settings, Codacy will send a message on Slack whenever it finds new issues.","title":"Configuration"},{"location":"repositories-configure/integrations/webhook-notifications/","text":"Webhook notifications # Codacy integrates with any service by sending a POST message to a defined address. To add a webhook, access the Integrations tab of your repository Settings , click on Add channel and select Webhook from the list. Configuration # Endpoint Address The URL where to POST the message. After filling the field you have to click the Save button and everything should be setup correctly. You can use the Test button to send a test notification to the address. When Codacy sends the POST to the address the message is in JSON format. Below, you can see an example message: { \"commit\" :{ \"data\" :{ \"uuid\" : \"4cbf02df84dbcaa44b75a64ed832f7dbff2231dd\" , \"urls\" :{ \"delta\" : \"https://www.codacy.com/public/jquery/jquery.git/commit?bid=21776&cid=6037089\" } }, \"results\" :{ \"fixed_count\" : 1 , \"new_count\" : 0 } } }","title":"Webhook notifications"},{"location":"repositories-configure/integrations/webhook-notifications/#webhook-notifications","text":"Codacy integrates with any service by sending a POST message to a defined address. To add a webhook, access the Integrations tab of your repository Settings , click on Add channel and select Webhook from the list.","title":"Webhook notifications"},{"location":"repositories-configure/integrations/webhook-notifications/#configuration","text":"Endpoint Address The URL where to POST the message. After filling the field you have to click the Save button and everything should be setup correctly. You can use the Test button to send a test notification to the address. When Codacy sends the POST to the address the message is in JSON format. Below, you can see an example message: { \"commit\" :{ \"data\" :{ \"uuid\" : \"4cbf02df84dbcaa44b75a64ed832f7dbff2231dd\" , \"urls\" :{ \"delta\" : \"https://www.codacy.com/public/jquery/jquery.git/commit?bid=21776&cid=6037089\" } }, \"results\" :{ \"fixed_count\" : 1 , \"new_count\" : 0 } } }","title":"Configuration"}]}